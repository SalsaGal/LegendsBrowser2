// Code generated by legendsbrowser; DO NOT EDIT.
package model

import (
	"encoding/xml"
	"fmt"
	"strconv"
)

func InitSameFields() {
	sameFields = map[string]map[string]map[string]bool{
		"Artifact": {
			"ItemSubtype": {},
			"ItemType":    {},
			"PageCount": {
				"StructureLocalId": true,
				"AbsTileY":         true,
				"HolderHfid":       true,
				"AbsTileX":         true,
				"SubregionId":      true,
				"AbsTileZ":         true,
				"SiteId":           true,
			},
			"Mat":             {},
			"ItemDescription": {},
			"Writing": {
				"StructureLocalId": true,
				"AbsTileY":         true,
				"HolderHfid":       true,
				"SubregionId":      true,
				"AbsTileX":         true,
				"AbsTileZ":         true,
				"SiteId":           true,
			},
		},
		"Creature":                        {},
		"DanceForm":                       {},
		"DfWorld":                         {},
		"Entity":                          {},
		"EntityEntityLink":                {},
		"EntityFormerPositionLink":        {},
		"EntityPopulation":                {},
		"EntityPosition":                  {},
		"EntityPositionAssignment":        {},
		"EntityPositionLink":              {},
		"EntityReputation":                {},
		"EntitySquadLink":                 {},
		"Feature":                         {},
		"HfLink":                          {},
		"HfSkill":                         {},
		"HistoricalEra":                   {},
		"HistoricalEvent":                 {},
		"HistoricalEventAddHfEntityHonor": {},
		"HistoricalEventAddHfEntityLink": {
			"Histfig": {
				"CivId":      true,
				"PositionId": true,
				"Hfid":       true,
			},
			"LinkType": {
				"Link": true,
			},
			"Position": {
				"Link": true,
			},
			"Civ": {
				"Hfid":       true,
				"CivId":      true,
				"PositionId": true,
			},
		},
		"HistoricalEventAddHfHfLink": {
			"LinkType": {},
			"Hf": {
				"Hfid":       true,
				"HfidTarget": true,
			},
			"HfTarget": {
				"HfidTarget": true,
				"Hfid":       true,
			},
		},
		"HistoricalEventAddHfSiteLink": {
			"Civ": {
				"SiteId": true,
			},
			"Histfig": {
				"SiteId": true,
			},
			"LinkType": {},
			"Site": {
				"SiteId": true,
			},
			"Structure": {
				"SiteId": true,
			},
		},
		"HistoricalEventAgreementFormed":     {},
		"HistoricalEventArtifactClaimFormed": {},
		"HistoricalEventArtifactCopied":      {},
		"HistoricalEventArtifactCreated": {
			"CreatorHfid": {
				"HistFigureId": true,
				"SiteId":       true,
				"UnitId":       true,
			},
			"CreatorUnitId": {
				"HistFigureId": true,
				"SiteId":       true,
				"UnitId":       true,
			},
			"Reason": {},
			"Site": {
				"HistFigureId": true,
				"SiteId":       true,
				"UnitId":       true,
			},
			"SanctifyHf": {
				"SiteId":       true,
				"UnitId":       true,
				"HistFigureId": true,
			},
		},
		"HistoricalEventArtifactCreatedCircumstance": {},
		"HistoricalEventArtifactDestroyed":           {},
		"HistoricalEventArtifactFound":               {},
		"HistoricalEventArtifactGiven":               {},
		"HistoricalEventArtifactLost":                {},
		"HistoricalEventArtifactPossessed":           {},
		"HistoricalEventArtifactRecovered":           {},
		"HistoricalEventArtifactStored":              {},
		"HistoricalEventAssumeIdentity": {
			"Trickster": {
				"IdentityId":    true,
				"TargetEnid":    true,
				"TricksterHfid": true,
			},
			"IdentityCaste": {},
			"IdentityRace":  {},
			"Target": {
				"IdentityId":    true,
				"TargetEnid":    true,
				"TricksterHfid": true,
			},
			"IdentityHistfigId": {
				"IdentityId":    true,
				"TargetEnid":    true,
				"TricksterHfid": true,
			},
			"IdentityName": {},
			"IdentityNemesisId": {
				"IdentityId":    true,
				"TargetEnid":    true,
				"TricksterHfid": true,
			},
		},
		"HistoricalEventAttackedSite": {},
		"HistoricalEventBodyAbused": {
			"Site": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Histfig": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Interaction": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Civ": {
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
			},
			"ItemType": {
				"Coords": true,
			},
			"Structure": {
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
			},
			"Tree": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"AbuseType": {
				"Coords": true,
			},
			"ItemSubtype": {
				"Coords": true,
			},
			"ItemMat": {
				"Coords": true,
			},
			"PileType": {
				"Coords": true,
			},
			"VictimEntity": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
		},
		"HistoricalEventBuildingProfileAcquired": {},
		"HistoricalEventCeremony":                {},
		"HistoricalEventChangeHfBodyState":       {},
		"HistoricalEventChangeHfJob": {
			"OldJob": {},
			"Site": {
				"SubregionId":    true,
				"FeatureLayerId": true,
				"SiteId":         true,
			},
			"NewJob": {},
		},
		"HistoricalEventChangeHfState": {
			"Site": {
				"FeatureLayerId": true,
				"SubregionId":    true,
				"SiteId":         true,
			},
		},
		"HistoricalEventChangedCreatureType": {
			"Changee": {
				"ChangerHfid": true,
				"ChangeeHfid": true,
			},
			"Changer": {
				"ChangeeHfid": true,
				"ChangerHfid": true,
			},
		},
		"HistoricalEventCollection":                 {},
		"HistoricalEventCollectionAbduction":        {},
		"HistoricalEventCollectionBattle":           {},
		"HistoricalEventCollectionBeastAttack":      {},
		"HistoricalEventCollectionCeremony":         {},
		"HistoricalEventCollectionCompetition":      {},
		"HistoricalEventCollectionDuel":             {},
		"HistoricalEventCollectionEntityOverthrown": {},
		"HistoricalEventCollectionJourney":          {},
		"HistoricalEventCollectionOccasion":         {},
		"HistoricalEventCollectionPerformance":      {},
		"HistoricalEventCollectionPersecution":      {},
		"HistoricalEventCollectionProcession":       {},
		"HistoricalEventCollectionPurge":            {},
		"HistoricalEventCollectionSiteConquered":    {},
		"HistoricalEventCollectionTheft":            {},
		"HistoricalEventCollectionWar":              {},
		"HistoricalEventCompetition":                {},
		"HistoricalEventCreateEntityPosition":       {},
		"HistoricalEventCreatedSite":                {},
		"HistoricalEventCreatedStructure": {
			"BuilderHf": {
				"BuilderHfid": true,
				"StructureId": true,
				"SiteId":      true,
				"CivId":       true,
				"SiteCivId":   true,
			},
			"Rebuild": {},
			"Site": {
				"StructureId": true,
				"BuilderHfid": true,
				"SiteCivId":   true,
				"SiteId":      true,
				"CivId":       true,
			},
			"Structure": {
				"StructureId": true,
				"BuilderHfid": true,
				"SiteCivId":   true,
				"SiteId":      true,
				"CivId":       true,
			},
			"Civ": {
				"StructureId": true,
				"BuilderHfid": true,
				"SiteCivId":   true,
				"SiteId":      true,
				"CivId":       true,
			},
			"SiteCiv": {
				"SiteId":      true,
				"CivId":       true,
				"SiteCivId":   true,
				"BuilderHfid": true,
				"StructureId": true,
			},
		},
		"HistoricalEventCreatedWorldConstruction": {},
		"HistoricalEventCreatureDevoured": {
			"Entity": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Race": {},
			"Victim": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Caste": {},
			"Eater": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"Site": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
		},
		"HistoricalEventDanceFormCreated":         {},
		"HistoricalEventDestroyedSite":            {},
		"HistoricalEventEntityAllianceFormed":     {},
		"HistoricalEventEntityBreachFeatureLayer": {},
		"HistoricalEventEntityCreated":            {},
		"HistoricalEventEntityDissolved":          {},
		"HistoricalEventEntityEquipmentPurchase":  {},
		"HistoricalEventEntityIncorporated":       {},
		"HistoricalEventEntityLaw":                {},
		"HistoricalEventEntityOverthrown":         {},
		"HistoricalEventEntityPersecuted":         {},
		"HistoricalEventEntityPrimaryCriminals": {
			"Site": {
				"EntityId":    true,
				"SiteId":      true,
				"StructureId": true,
			},
			"Structure": {
				"EntityId":    true,
				"SiteId":      true,
				"StructureId": true,
			},
			"Action": {},
			"Entity": {
				"EntityId":    true,
				"SiteId":      true,
				"StructureId": true,
			},
		},
		"HistoricalEventEntityRelocate": {
			"Site": {
				"EntityId":    true,
				"SiteId":      true,
				"StructureId": true,
			},
			"Structure": {
				"StructureId": true,
				"EntityId":    true,
				"SiteId":      true,
			},
			"Action": {},
			"Entity": {
				"EntityId":    true,
				"SiteId":      true,
				"StructureId": true,
			},
		},
		"HistoricalEventFailedFrameAttempt":       {},
		"HistoricalEventFailedIntrigueCorruption": {},
		"HistoricalEventFieldBattle":              {},
		"HistoricalEventGamble":                   {},
		"HistoricalEventHfAbducted":               {},
		"HistoricalEventHfAttackedSite":           {},
		"HistoricalEventHfConfronted":             {},
		"HistoricalEventHfConvicted":              {},
		"HistoricalEventHfDestroyedSite":          {},
		"HistoricalEventHfDied": {
			"Site": {
				"SlayerShooterItemId": true,
				"FeatureLayerId":      true,
				"SiteId":              true,
				"SlayerHfid":          true,
				"SlayerItemId":        true,
				"Hfid":                true,
				"SubregionId":         true,
			},
			"ArtifactId": {
				"FeatureLayerId":      true,
				"SiteId":              true,
				"Hfid":                true,
				"SlayerHfid":          true,
				"SlayerItemId":        true,
				"SubregionId":         true,
				"SlayerShooterItemId": true,
			},
			"DeathCause": {
				"Cause": true,
			},
			"Item": {
				"FeatureLayerId":      true,
				"SiteId":              true,
				"SlayerItemId":        true,
				"Hfid":                true,
				"SlayerHfid":          true,
				"SubregionId":         true,
				"SlayerShooterItemId": true,
			},
			"Mat": {
				"Cause": true,
			},
			"ItemSubtype": {
				"Cause": true,
			},
			"VictimHf": {
				"FeatureLayerId":      true,
				"SiteId":              true,
				"SlayerHfid":          true,
				"SlayerItemId":        true,
				"Hfid":                true,
				"SubregionId":         true,
				"SlayerShooterItemId": true,
			},
			"ItemType": {
				"Cause": true,
			},
			"SlayerHf": {
				"SubregionId":         true,
				"SlayerShooterItemId": true,
				"SiteId":              true,
				"FeatureLayerId":      true,
				"SlayerHfid":          true,
				"SlayerItemId":        true,
				"Hfid":                true,
			},
		},
		"HistoricalEventHfDisturbedStructure": {
			"Structure": {
				"StructureId": true,
				"HistFigId":   true,
				"SiteId":      true,
			},
			"Action": {},
			"Histfig": {
				"StructureId": true,
				"HistFigId":   true,
				"SiteId":      true,
			},
			"Site": {
				"SiteId":      true,
				"StructureId": true,
				"HistFigId":   true,
			},
		},
		"HistoricalEventHfDoesInteraction": {
			"Region": {
				"TargetHfid": true,
				"DoerHfid":   true,
			},
			"InteractionAction": {
				"Interaction": true,
			},
			"Site": {
				"TargetHfid": true,
				"DoerHfid":   true,
			},
			"Source": {
				"TargetHfid": true,
				"DoerHfid":   true,
			},
			"Target": {
				"DoerHfid":   true,
				"TargetHfid": true,
			},
			"Doer": {
				"DoerHfid":   true,
				"TargetHfid": true,
			},
		},
		"HistoricalEventHfEnslaved":          {},
		"HistoricalEventHfEquipmentPurchase": {},
		"HistoricalEventHfGainsSecretGoal":   {},
		"HistoricalEventHfInterrogated":      {},
		"HistoricalEventHfLearnsSecret": {
			"SecretText": {
				"Interaction": true,
			},
			"Student": {
				"ArtifactId":  true,
				"StudentHfid": true,
				"TeacherHfid": true,
			},
			"Teacher": {
				"TeacherHfid": true,
				"ArtifactId":  true,
				"StudentHfid": true,
			},
			"Artifact": {
				"StudentHfid": true,
				"TeacherHfid": true,
				"ArtifactId":  true,
			},
		},
		"HistoricalEventHfNewPet": {
			"Group": {
				"GroupHfid":      true,
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
			},
			"Pets": {
				"Coords": true,
			},
			"Site": {
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
				"GroupHfid":      true,
			},
		},
		"HistoricalEventHfPerformedHorribleExperiments": {},
		"HistoricalEventHfPrayedInsideStructure": {
			"Action": {},
			"Histfig": {
				"SiteId":      true,
				"StructureId": true,
				"HistFigId":   true,
			},
			"Site": {
				"StructureId": true,
				"HistFigId":   true,
				"SiteId":      true,
			},
			"Structure": {
				"HistFigId":   true,
				"SiteId":      true,
				"StructureId": true,
			},
		},
		"HistoricalEventHfPreach": {},
		"HistoricalEventHfProfanedStructure": {
			"Action": {},
			"Histfig": {
				"SiteId":      true,
				"StructureId": true,
				"HistFigId":   true,
			},
			"Site": {
				"SiteId":      true,
				"StructureId": true,
				"HistFigId":   true,
			},
			"Structure": {
				"StructureId": true,
				"HistFigId":   true,
				"SiteId":      true,
			},
		},
		"HistoricalEventHfRecruitedUnitTypeForEntity": {},
		"HistoricalEventHfRelationshipDenied":         {},
		"HistoricalEventHfReunion":                    {},
		"HistoricalEventHfRevived":                    {},
		"HistoricalEventHfSimpleBattleEvent":          {},
		"HistoricalEventHfTravel":                     {},
		"HistoricalEventHfViewedArtifact":             {},
		"HistoricalEventHfWounded": {
			"Woundee": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
				"WoundeeHfid":    true,
				"WounderHfid":    true,
			},
			"WoundeeRace": {
				"WoundeeHfid":    true,
				"WounderHfid":    true,
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
			},
			"BodyPart": {
				"WoundeeHfid":    true,
				"WounderHfid":    true,
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
			},
			"InjuryType": {},
			"PartLost":   {},
			"Site": {
				"WoundeeHfid":    true,
				"WounderHfid":    true,
				"SiteId":         true,
				"SubregionId":    true,
				"FeatureLayerId": true,
			},
			"WoundeeCaste": {
				"SubregionId":    true,
				"FeatureLayerId": true,
				"SiteId":         true,
				"WoundeeHfid":    true,
				"WounderHfid":    true,
			},
			"Wounder": {
				"FeatureLayerId": true,
				"SiteId":         true,
				"SubregionId":    true,
				"WoundeeHfid":    true,
				"WounderHfid":    true,
			},
		},
		"HistoricalEventHfsFormedIntrigueRelationship":   {},
		"HistoricalEventHfsFormedReputationRelationship": {},
		"HistoricalEventHolyCityDeclaration":             {},
		"HistoricalEventItemStolen": {
			"Entity": {
				"CircumstanceId": true,
			},
			"Histfig": {
				"CircumstanceId": true,
			},
			"ItemType": {},
			"Site": {
				"CircumstanceId": true,
			},
			"Structure": {
				"CircumstanceId": true,
			},
			"Item": {
				"CircumstanceId": true,
			},
			"Mat": {},
			"Matindex": {
				"CircumstanceId": true,
			},
			"TheftMethod": {},
			"ItemSubtype": {},
			"Mattype": {
				"CircumstanceId": true,
			},
			"StashSite": {
				"CircumstanceId": true,
			},
		},
		"HistoricalEventItemStolenCircumstance": {},
		"HistoricalEventKnowledgeDiscovered":    {},
		"HistoricalEventMasterpieceItem": {
			"MakerEntity": {
				"Hfid":     true,
				"SiteId":   true,
				"EntityId": true,
			},
			"ItemId": {
				"SiteId":   true,
				"EntityId": true,
				"Hfid":     true,
			},
			"ItemType": {},
			"Maker": {
				"SiteId":   true,
				"EntityId": true,
				"Hfid":     true,
			},
			"Mat": {},
			"Site": {
				"SiteId":   true,
				"EntityId": true,
				"Hfid":     true,
			},
		},
		"HistoricalEventMerchant": {
			"Destination": {
				"SiteId":         true,
				"TraderEntityId": true,
				"DepotEntityId":  true,
			},
			"Site": {
				"SiteId":         true,
				"TraderEntityId": true,
				"DepotEntityId":  true,
			},
			"Source": {
				"SiteId":         true,
				"TraderEntityId": true,
				"DepotEntityId":  true,
			},
		},
		"HistoricalEventModifiedBuilding":   {},
		"HistoricalEventMusicalFormCreated": {},
		"HistoricalEventNewSiteLeader":      {},
		"HistoricalEventPeaceAccepted": {
			"Source": {
				"SiteId": true,
			},
			"Topic": {},
			"Destination": {
				"SiteId": true,
			},
			"Site": {
				"SiteId": true,
			},
		},
		"HistoricalEventPeaceRejected": {
			"Source": {
				"SiteId": true,
			},
			"Topic": {},
			"Destination": {
				"SiteId": true,
			},
			"Site": {
				"SiteId": true,
			},
		},
		"HistoricalEventPerformance":                     {},
		"HistoricalEventPlunderedSite":                   {},
		"HistoricalEventPoeticFormCreated":               {},
		"HistoricalEventProcession":                      {},
		"HistoricalEventRazedStructure":                  {},
		"HistoricalEventReclaimSite":                     {},
		"HistoricalEventRegionpopIncorporatedIntoEntity": {},
		"HistoricalEventRelationship":                    {},
		"HistoricalEventRelationshipSupplement":          {},
		"HistoricalEventRemoveHfEntityLink": {
			"Position": {
				"Link": true,
			},
			"Civ": {
				"Hfid":       true,
				"PositionId": true,
				"CivId":      true,
			},
			"Histfig": {
				"Hfid":       true,
				"PositionId": true,
				"CivId":      true,
			},
			"LinkType": {
				"Link": true,
			},
		},
		"HistoricalEventRemoveHfHfLink": {},
		"HistoricalEventRemoveHfSiteLink": {
			"Site": {
				"SiteId": true,
			},
			"Structure": {
				"SiteId": true,
			},
			"Civ": {
				"SiteId": true,
			},
			"Histfig": {
				"SiteId": true,
			},
			"LinkType": {},
		},
		"HistoricalEventReplacedStructure": {
			"NewStructure": {
				"NewAbId":   true,
				"SiteCivId": true,
				"SiteId":    true,
				"CivId":     true,
				"OldAbId":   true,
			},
			"OldStructure": {
				"NewAbId":   true,
				"CivId":     true,
				"OldAbId":   true,
				"SiteCivId": true,
				"SiteId":    true,
			},
			"Civ": {
				"NewAbId":   true,
				"SiteCivId": true,
				"SiteId":    true,
				"CivId":     true,
				"OldAbId":   true,
			},
			"Site": {
				"NewAbId":   true,
				"SiteId":    true,
				"CivId":     true,
				"OldAbId":   true,
				"SiteCivId": true,
			},
			"SiteCiv": {
				"OldAbId":   true,
				"SiteCivId": true,
				"SiteId":    true,
				"CivId":     true,
				"NewAbId":   true,
			},
		},
		"HistoricalEventSiteDispute":            {},
		"HistoricalEventSiteTakenOver":          {},
		"HistoricalEventSquadVsSquad":           {},
		"HistoricalEventTacticalSituation":      {},
		"HistoricalEventTrade":                  {},
		"HistoricalEventWrittenContentComposed": {},
		"HistoricalFigure": {
			"Sex": {
				"BirthSeconds72":    true,
				"DeathYear":         true,
				"EntPopId":          true,
				"BirthYear":         true,
				"CurrentIdentityId": true,
				"DeathSeconds72":    true,
				"Appeared":          true,
			},
		},
		"HistoricalFigureEntityLink":      {},
		"HistoricalFigureSiteProperty":    {},
		"Honor":                           {},
		"HonorEntity":                     {},
		"Identity":                        {},
		"IntrigueActor":                   {},
		"IntriguePlot":                    {},
		"Item":                            {},
		"Landmass":                        {},
		"MountainPeak":                    {},
		"MusicalForm":                     {},
		"Occasion":                        {},
		"PlotActor":                       {},
		"PoeticForm":                      {},
		"Reference":                       {},
		"Region":                          {},
		"RelationshipProfileHfHistorical": {},
		"RelationshipProfileHfVisual":     {},
		"River":                           {},
		"Schedule":                        {},
		"Site": {
			"CivId":      {},
			"CurOwnerId": {},
		},
		"SiteLink":         {},
		"SiteSiteProperty": {},
		"Structure": {
			"DeityType": {
				"EntityId":    true,
				"WorshipHfid": true,
				"LocalId":     true,
			},
			"Name2": {
				"Subtype": true,
			},
			"Religion": {
				"EntityId":    true,
				"WorshipHfid": true,
				"LocalId":     true,
			},
			"Deity": {
				"EntityId":    true,
				"WorshipHfid": true,
				"LocalId":     true,
			},
			"DungeonType": {
				"EntityId":    true,
				"WorshipHfid": true,
				"LocalId":     true,
			},
		},
		"UndergroundRegion": {
			"Coords": {},
		},
		"VagueRelationship": {},
		"WorldConstruction": {},
		"WrittenContent": {
			"Author": {
				"AuthorHfid": true,
				"AuthorRoll": true,
				"FormId":     true,
			},
			"PageEnd": {
				"AuthorHfid": true,
				"AuthorRoll": true,
				"FormId":     true,
			},
			"PageStart": {
				"FormId":     true,
				"AuthorHfid": true,
				"AuthorRoll": true,
			},
		},
	}
}

type Artifact struct {
	AbsTileX         int    `json:"absTileX" legend:"base"`         // abs_tile_x
	AbsTileY         int    `json:"absTileY" legend:"base"`         // abs_tile_y
	AbsTileZ         int    `json:"absTileZ" legend:"base"`         // abs_tile_z
	HolderHfid       int    `json:"holderHfid" legend:"base"`       // holder_hfid
	Id_              int    `json:"id" legend:"both"`               // id
	Item             *Item  `json:"item" legend:"base"`             // item
	ItemDescription  string `json:"itemDescription" legend:"plus"`  // item_description
	ItemSubtype      string `json:"itemSubtype" legend:"plus"`      // item_subtype
	ItemType         string `json:"itemType" legend:"plus"`         // item_type
	Mat              string `json:"mat" legend:"plus"`              // mat
	Name_            string `json:"name" legend:"base"`             // name
	PageCount        int    `json:"pageCount" legend:"plus"`        // page_count
	SiteId           int    `json:"siteId" legend:"base"`           // site_id
	StructureLocalId int    `json:"structureLocalId" legend:"base"` // structure_local_id
	SubregionId      int    `json:"subregionId" legend:"base"`      // subregion_id
	Writing          int    `json:"writing" legend:"plus"`          // writing
}

func (x *Artifact) Id() int                     { return x.Id_ }
func (x *Artifact) Name() string                { return x.Name_ }
func (x *Artifact) RelatedToEntity(id int) bool { return false }
func (x *Artifact) RelatedToHf(id int) bool     { return x.HolderHfid == id }

func (x *Artifact) CheckFields() {
	if x.PageCount != x.AbsTileZ && x.PageCount != 0 && x.AbsTileZ != 0 {
		sameFields["Artifact"]["PageCount"]["AbsTileZ"] = false
	}
	if x.PageCount != x.SiteId && x.PageCount != 0 && x.SiteId != 0 {
		sameFields["Artifact"]["PageCount"]["SiteId"] = false
	}
	if x.PageCount != x.StructureLocalId && x.PageCount != 0 && x.StructureLocalId != 0 {
		sameFields["Artifact"]["PageCount"]["StructureLocalId"] = false
	}
	if x.PageCount != x.AbsTileY && x.PageCount != 0 && x.AbsTileY != 0 {
		sameFields["Artifact"]["PageCount"]["AbsTileY"] = false
	}
	if x.PageCount != x.HolderHfid && x.PageCount != 0 && x.HolderHfid != 0 {
		sameFields["Artifact"]["PageCount"]["HolderHfid"] = false
	}
	if x.PageCount != x.SubregionId && x.PageCount != 0 && x.SubregionId != 0 {
		sameFields["Artifact"]["PageCount"]["SubregionId"] = false
	}
	if x.PageCount != x.AbsTileX && x.PageCount != 0 && x.AbsTileX != 0 {
		sameFields["Artifact"]["PageCount"]["AbsTileX"] = false
	}
	if x.Writing != x.AbsTileY && x.Writing != 0 && x.AbsTileY != 0 {
		sameFields["Artifact"]["Writing"]["AbsTileY"] = false
	}
	if x.Writing != x.HolderHfid && x.Writing != 0 && x.HolderHfid != 0 {
		sameFields["Artifact"]["Writing"]["HolderHfid"] = false
	}
	if x.Writing != x.StructureLocalId && x.Writing != 0 && x.StructureLocalId != 0 {
		sameFields["Artifact"]["Writing"]["StructureLocalId"] = false
	}
	if x.Writing != x.AbsTileX && x.Writing != 0 && x.AbsTileX != 0 {
		sameFields["Artifact"]["Writing"]["AbsTileX"] = false
	}
	if x.Writing != x.SubregionId && x.Writing != 0 && x.SubregionId != 0 {
		sameFields["Artifact"]["Writing"]["SubregionId"] = false
	}
	if x.Writing != x.AbsTileZ && x.Writing != 0 && x.AbsTileZ != 0 {
		sameFields["Artifact"]["Writing"]["AbsTileZ"] = false
	}
	if x.Writing != x.SiteId && x.Writing != 0 && x.SiteId != 0 {
		sameFields["Artifact"]["Writing"]["SiteId"] = false
	}
}

type Creature struct {
	AllCastesAlive                    bool   `json:"allCastesAlive" legend:"plus"`                    // all_castes_alive
	ArtificialHiveable                bool   `json:"artificialHiveable" legend:"plus"`                // artificial_hiveable
	BiomeDesertBadland                bool   `json:"biomeDesertBadland" legend:"plus"`                // biome_desert_badland
	BiomeDesertRock                   bool   `json:"biomeDesertRock" legend:"plus"`                   // biome_desert_rock
	BiomeDesertSand                   bool   `json:"biomeDesertSand" legend:"plus"`                   // biome_desert_sand
	BiomeForestTaiga                  bool   `json:"biomeForestTaiga" legend:"plus"`                  // biome_forest_taiga
	BiomeForestTemperateBroadleaf     bool   `json:"biomeForestTemperateBroadleaf" legend:"plus"`     // biome_forest_temperate_broadleaf
	BiomeForestTemperateConifer       bool   `json:"biomeForestTemperateConifer" legend:"plus"`       // biome_forest_temperate_conifer
	BiomeForestTropicalConifer        bool   `json:"biomeForestTropicalConifer" legend:"plus"`        // biome_forest_tropical_conifer
	BiomeForestTropicalDryBroadleaf   bool   `json:"biomeForestTropicalDryBroadleaf" legend:"plus"`   // biome_forest_tropical_dry_broadleaf
	BiomeForestTropicalMoistBroadleaf bool   `json:"biomeForestTropicalMoistBroadleaf" legend:"plus"` // biome_forest_tropical_moist_broadleaf
	BiomeGlacier                      bool   `json:"biomeGlacier" legend:"plus"`                      // biome_glacier
	BiomeGrasslandTemperate           bool   `json:"biomeGrasslandTemperate" legend:"plus"`           // biome_grassland_temperate
	BiomeGrasslandTropical            bool   `json:"biomeGrasslandTropical" legend:"plus"`            // biome_grassland_tropical
	BiomeLakeTemperateBrackishwater   bool   `json:"biomeLakeTemperateBrackishwater" legend:"plus"`   // biome_lake_temperate_brackishwater
	BiomeLakeTemperateFreshwater      bool   `json:"biomeLakeTemperateFreshwater" legend:"plus"`      // biome_lake_temperate_freshwater
	BiomeLakeTemperateSaltwater       bool   `json:"biomeLakeTemperateSaltwater" legend:"plus"`       // biome_lake_temperate_saltwater
	BiomeLakeTropicalBrackishwater    bool   `json:"biomeLakeTropicalBrackishwater" legend:"plus"`    // biome_lake_tropical_brackishwater
	BiomeLakeTropicalFreshwater       bool   `json:"biomeLakeTropicalFreshwater" legend:"plus"`       // biome_lake_tropical_freshwater
	BiomeLakeTropicalSaltwater        bool   `json:"biomeLakeTropicalSaltwater" legend:"plus"`        // biome_lake_tropical_saltwater
	BiomeMarshTemperateFreshwater     bool   `json:"biomeMarshTemperateFreshwater" legend:"plus"`     // biome_marsh_temperate_freshwater
	BiomeMarshTemperateSaltwater      bool   `json:"biomeMarshTemperateSaltwater" legend:"plus"`      // biome_marsh_temperate_saltwater
	BiomeMarshTropicalFreshwater      bool   `json:"biomeMarshTropicalFreshwater" legend:"plus"`      // biome_marsh_tropical_freshwater
	BiomeMarshTropicalSaltwater       bool   `json:"biomeMarshTropicalSaltwater" legend:"plus"`       // biome_marsh_tropical_saltwater
	BiomeMountain                     bool   `json:"biomeMountain" legend:"plus"`                     // biome_mountain
	BiomeOceanArctic                  bool   `json:"biomeOceanArctic" legend:"plus"`                  // biome_ocean_arctic
	BiomeOceanTemperate               bool   `json:"biomeOceanTemperate" legend:"plus"`               // biome_ocean_temperate
	BiomeOceanTropical                bool   `json:"biomeOceanTropical" legend:"plus"`                // biome_ocean_tropical
	BiomePoolTemperateBrackishwater   bool   `json:"biomePoolTemperateBrackishwater" legend:"plus"`   // biome_pool_temperate_brackishwater
	BiomePoolTemperateFreshwater      bool   `json:"biomePoolTemperateFreshwater" legend:"plus"`      // biome_pool_temperate_freshwater
	BiomePoolTemperateSaltwater       bool   `json:"biomePoolTemperateSaltwater" legend:"plus"`       // biome_pool_temperate_saltwater
	BiomePoolTropicalBrackishwater    bool   `json:"biomePoolTropicalBrackishwater" legend:"plus"`    // biome_pool_tropical_brackishwater
	BiomePoolTropicalFreshwater       bool   `json:"biomePoolTropicalFreshwater" legend:"plus"`       // biome_pool_tropical_freshwater
	BiomePoolTropicalSaltwater        bool   `json:"biomePoolTropicalSaltwater" legend:"plus"`        // biome_pool_tropical_saltwater
	BiomeRiverTemperateBrackishwater  bool   `json:"biomeRiverTemperateBrackishwater" legend:"plus"`  // biome_river_temperate_brackishwater
	BiomeRiverTemperateFreshwater     bool   `json:"biomeRiverTemperateFreshwater" legend:"plus"`     // biome_river_temperate_freshwater
	BiomeRiverTemperateSaltwater      bool   `json:"biomeRiverTemperateSaltwater" legend:"plus"`      // biome_river_temperate_saltwater
	BiomeRiverTropicalBrackishwater   bool   `json:"biomeRiverTropicalBrackishwater" legend:"plus"`   // biome_river_tropical_brackishwater
	BiomeRiverTropicalFreshwater      bool   `json:"biomeRiverTropicalFreshwater" legend:"plus"`      // biome_river_tropical_freshwater
	BiomeRiverTropicalSaltwater       bool   `json:"biomeRiverTropicalSaltwater" legend:"plus"`       // biome_river_tropical_saltwater
	BiomeSavannaTemperate             bool   `json:"biomeSavannaTemperate" legend:"plus"`             // biome_savanna_temperate
	BiomeSavannaTropical              bool   `json:"biomeSavannaTropical" legend:"plus"`              // biome_savanna_tropical
	BiomeShrublandTemperate           bool   `json:"biomeShrublandTemperate" legend:"plus"`           // biome_shrubland_temperate
	BiomeShrublandTropical            bool   `json:"biomeShrublandTropical" legend:"plus"`            // biome_shrubland_tropical
	BiomeSubterraneanChasm            bool   `json:"biomeSubterraneanChasm" legend:"plus"`            // biome_subterranean_chasm
	BiomeSubterraneanLava             bool   `json:"biomeSubterraneanLava" legend:"plus"`             // biome_subterranean_lava
	BiomeSubterraneanWater            bool   `json:"biomeSubterraneanWater" legend:"plus"`            // biome_subterranean_water
	BiomeSwampMangrove                bool   `json:"biomeSwampMangrove" legend:"plus"`                // biome_swamp_mangrove
	BiomeSwampTemperateFreshwater     bool   `json:"biomeSwampTemperateFreshwater" legend:"plus"`     // biome_swamp_temperate_freshwater
	BiomeSwampTemperateSaltwater      bool   `json:"biomeSwampTemperateSaltwater" legend:"plus"`      // biome_swamp_temperate_saltwater
	BiomeSwampTropicalFreshwater      bool   `json:"biomeSwampTropicalFreshwater" legend:"plus"`      // biome_swamp_tropical_freshwater
	BiomeSwampTropicalSaltwater       bool   `json:"biomeSwampTropicalSaltwater" legend:"plus"`       // biome_swamp_tropical_saltwater
	BiomeTundra                       bool   `json:"biomeTundra" legend:"plus"`                       // biome_tundra
	CreatureId                        string `json:"creatureId" legend:"plus"`                        // creature_id
	DoesNotExist                      bool   `json:"doesNotExist" legend:"plus"`                      // does_not_exist
	Equipment                         bool   `json:"equipment" legend:"plus"`                         // equipment
	EquipmentWagon                    bool   `json:"equipmentWagon" legend:"plus"`                    // equipment_wagon
	Evil                              bool   `json:"evil" legend:"plus"`                              // evil
	Fanciful                          bool   `json:"fanciful" legend:"plus"`                          // fanciful
	Generated                         bool   `json:"generated" legend:"plus"`                         // generated
	Good                              bool   `json:"good" legend:"plus"`                              // good
	HasAnyBenign                      bool   `json:"hasAnyBenign" legend:"plus"`                      // has_any_benign
	HasAnyCanSwim                     bool   `json:"hasAnyCanSwim" legend:"plus"`                     // has_any_can_swim
	HasAnyCannotBreatheAir            bool   `json:"hasAnyCannotBreatheAir" legend:"plus"`            // has_any_cannot_breathe_air
	HasAnyCannotBreatheWater          bool   `json:"hasAnyCannotBreatheWater" legend:"plus"`          // has_any_cannot_breathe_water
	HasAnyCarnivore                   bool   `json:"hasAnyCarnivore" legend:"plus"`                   // has_any_carnivore
	HasAnyCommonDomestic              bool   `json:"hasAnyCommonDomestic" legend:"plus"`              // has_any_common_domestic
	HasAnyCuriousBeast                bool   `json:"hasAnyCuriousBeast" legend:"plus"`                // has_any_curious_beast
	HasAnyDemon                       bool   `json:"hasAnyDemon" legend:"plus"`                       // has_any_demon
	HasAnyFeatureBeast                bool   `json:"hasAnyFeatureBeast" legend:"plus"`                // has_any_feature_beast
	HasAnyFlier                       bool   `json:"hasAnyFlier" legend:"plus"`                       // has_any_flier
	HasAnyFlyRaceGait                 bool   `json:"hasAnyFlyRaceGait" legend:"plus"`                 // has_any_fly_race_gait
	HasAnyGrasp                       bool   `json:"hasAnyGrasp" legend:"plus"`                       // has_any_grasp
	HasAnyGrazer                      bool   `json:"hasAnyGrazer" legend:"plus"`                      // has_any_grazer
	HasAnyHasBlood                    bool   `json:"hasAnyHasBlood" legend:"plus"`                    // has_any_has_blood
	HasAnyImmobile                    bool   `json:"hasAnyImmobile" legend:"plus"`                    // has_any_immobile
	HasAnyIntelligentLearns           bool   `json:"hasAnyIntelligentLearns" legend:"plus"`           // has_any_intelligent_learns
	HasAnyIntelligentSpeaks           bool   `json:"hasAnyIntelligentSpeaks" legend:"plus"`           // has_any_intelligent_speaks
	HasAnyLargePredator               bool   `json:"hasAnyLargePredator" legend:"plus"`               // has_any_large_predator
	HasAnyLocalPopsControllable       bool   `json:"hasAnyLocalPopsControllable" legend:"plus"`       // has_any_local_pops_controllable
	HasAnyLocalPopsProduceHeroes      bool   `json:"hasAnyLocalPopsProduceHeroes" legend:"plus"`      // has_any_local_pops_produce_heroes
	HasAnyMegabeast                   bool   `json:"hasAnyMegabeast" legend:"plus"`                   // has_any_megabeast
	HasAnyMischievous                 bool   `json:"hasAnyMischievous" legend:"plus"`                 // has_any_mischievous
	HasAnyNaturalAnimal               bool   `json:"hasAnyNaturalAnimal" legend:"plus"`               // has_any_natural_animal
	HasAnyNightCreature               bool   `json:"hasAnyNightCreature" legend:"plus"`               // has_any_night_creature
	HasAnyNightCreatureBogeyman       bool   `json:"hasAnyNightCreatureBogeyman" legend:"plus"`       // has_any_night_creature_bogeyman
	HasAnyNightCreatureHunter         bool   `json:"hasAnyNightCreatureHunter" legend:"plus"`         // has_any_night_creature_hunter
	HasAnyNightCreatureNightmare      bool   `json:"hasAnyNightCreatureNightmare" legend:"plus"`      // has_any_night_creature_nightmare
	HasAnyNotFireimmune               bool   `json:"hasAnyNotFireimmune" legend:"plus"`               // has_any_not_fireimmune
	HasAnyNotLiving                   bool   `json:"hasAnyNotLiving" legend:"plus"`                   // has_any_not_living
	HasAnyOutsiderControllable        bool   `json:"hasAnyOutsiderControllable" legend:"plus"`        // has_any_outsider_controllable
	HasAnyRaceGait                    bool   `json:"hasAnyRaceGait" legend:"plus"`                    // has_any_race_gait
	HasAnySemimegabeast               bool   `json:"hasAnySemimegabeast" legend:"plus"`               // has_any_semimegabeast
	HasAnySlowLearner                 bool   `json:"hasAnySlowLearner" legend:"plus"`                 // has_any_slow_learner
	HasAnySupernatural                bool   `json:"hasAnySupernatural" legend:"plus"`                // has_any_supernatural
	HasAnyTitan                       bool   `json:"hasAnyTitan" legend:"plus"`                       // has_any_titan
	HasAnyUniqueDemon                 bool   `json:"hasAnyUniqueDemon" legend:"plus"`                 // has_any_unique_demon
	HasAnyUtterances                  bool   `json:"hasAnyUtterances" legend:"plus"`                  // has_any_utterances
	HasAnyVerminHateable              bool   `json:"hasAnyVerminHateable" legend:"plus"`              // has_any_vermin_hateable
	HasAnyVerminMicro                 bool   `json:"hasAnyVerminMicro" legend:"plus"`                 // has_any_vermin_micro
	HasFemale                         bool   `json:"hasFemale" legend:"plus"`                         // has_female
	HasMale                           bool   `json:"hasMale" legend:"plus"`                           // has_male
	LargeRoaming                      bool   `json:"largeRoaming" legend:"plus"`                      // large_roaming
	LooseClusters                     bool   `json:"looseClusters" legend:"plus"`                     // loose_clusters
	MatesToBreed                      bool   `json:"matesToBreed" legend:"plus"`                      // mates_to_breed
	Mundane                           bool   `json:"mundane" legend:"plus"`                           // mundane
	NamePlural                        string `json:"namePlural" legend:"plus"`                        // name_plural
	NameSingular                      string `json:"nameSingular" legend:"plus"`                      // name_singular
	OccursAsEntityRace                bool   `json:"occursAsEntityRace" legend:"plus"`                // occurs_as_entity_race
	Savage                            bool   `json:"savage" legend:"plus"`                            // savage
	SmallRace                         bool   `json:"smallRace" legend:"plus"`                         // small_race
	TwoGenders                        bool   `json:"twoGenders" legend:"plus"`                        // two_genders
	Ubiquitous                        bool   `json:"ubiquitous" legend:"plus"`                        // ubiquitous
	VerminEater                       bool   `json:"verminEater" legend:"plus"`                       // vermin_eater
	VerminFish                        bool   `json:"verminFish" legend:"plus"`                        // vermin_fish
	VerminGrounder                    bool   `json:"verminGrounder" legend:"plus"`                    // vermin_grounder
	VerminRotter                      bool   `json:"verminRotter" legend:"plus"`                      // vermin_rotter
	VerminSoil                        bool   `json:"verminSoil" legend:"plus"`                        // vermin_soil
	VerminSoilColony                  bool   `json:"verminSoilColony" legend:"plus"`                  // vermin_soil_colony
}

func (x *Creature) RelatedToEntity(id int) bool { return false }
func (x *Creature) RelatedToHf(id int) bool     { return false }

func (x *Creature) CheckFields() {
}

type DanceForm struct {
	Description string `json:"description" legend:"base"` // description
	Id_         int    `json:"id" legend:"both"`          // id
	Name_       string `json:"name" legend:"plus"`        // name
}

func (x *DanceForm) Id() int                     { return x.Id_ }
func (x *DanceForm) Name() string                { return x.Name_ }
func (x *DanceForm) RelatedToEntity(id int) bool { return false }
func (x *DanceForm) RelatedToHf(id int) bool     { return false }

func (x *DanceForm) CheckFields() {
}

type DfWorld struct {
	Altname                                string                                   `json:"altname" legend:"plus"`                                // altname
	Artifacts                              map[int]*Artifact                        `json:"artifacts" legend:"both"`                              // artifacts
	CreatureRaw                            []*Creature                              `json:"creatureRaw" legend:"plus"`                            // creature_raw
	DanceForms                             map[int]*DanceForm                       `json:"danceForms" legend:"both"`                             // dance_forms
	Entities                               map[int]*Entity                          `json:"entities" legend:"both"`                               // entities
	EntityPopulations                      map[int]*EntityPopulation                `json:"entityPopulations" legend:"both"`                      // entity_populations
	HistoricalEras                         []*HistoricalEra                         `json:"historicalEras" legend:"both"`                         // historical_eras
	HistoricalEventCollections             map[int]*HistoricalEventCollection       `json:"historicalEventCollections" legend:"both"`             // historical_event_collections
	HistoricalEventRelationshipSupplements []*HistoricalEventRelationshipSupplement `json:"historicalEventRelationshipSupplements" legend:"plus"` // historical_event_relationship_supplements
	HistoricalEventRelationships           []*HistoricalEventRelationship           `json:"historicalEventRelationships" legend:"plus"`           // historical_event_relationships
	HistoricalEvents                       map[int]*HistoricalEvent                 `json:"historicalEvents" legend:"both"`                       // historical_events
	HistoricalFigures                      map[int]*HistoricalFigure                `json:"historicalFigures" legend:"both"`                      // historical_figures
	Identities                             map[int]*Identity                        `json:"identities" legend:"plus"`                             // identities
	Landmasses                             map[int]*Landmass                        `json:"landmasses" legend:"plus"`                             // landmasses
	MountainPeaks                          map[int]*MountainPeak                    `json:"mountainPeaks" legend:"plus"`                          // mountain_peaks
	MusicalForms                           map[int]*MusicalForm                     `json:"musicalForms" legend:"both"`                           // musical_forms
	Name_                                  string                                   `json:"name" legend:"plus"`                                   // name
	PoeticForms                            map[int]*PoeticForm                      `json:"poeticForms" legend:"both"`                            // poetic_forms
	Regions                                map[int]*Region                          `json:"regions" legend:"both"`                                // regions
	Rivers                                 []*River                                 `json:"rivers" legend:"plus"`                                 // rivers
	Sites                                  map[int]*Site                            `json:"sites" legend:"both"`                                  // sites
	UndergroundRegions                     map[int]*UndergroundRegion               `json:"undergroundRegions" legend:"both"`                     // underground_regions
	WorldConstructions                     map[int]*WorldConstruction               `json:"worldConstructions" legend:"both"`                     // world_constructions
	WrittenContents                        map[int]*WrittenContent                  `json:"writtenContents" legend:"both"`                        // written_contents
}

func (x *DfWorld) Name() string                { return x.Name_ }
func (x *DfWorld) RelatedToEntity(id int) bool { return false }
func (x *DfWorld) RelatedToHf(id int) bool     { return false }

func (x *DfWorld) CheckFields() {
}

type Entity struct {
	Child                    []int                       `json:"child" legend:"plus"`                    // child
	Claims                   string                      `json:"claims" legend:"plus"`                   // claims
	EntityLink               []*EntityEntityLink         `json:"entityLink" legend:"plus"`               // entity_link
	EntityPosition           []*EntityPosition           `json:"entityPosition" legend:"plus"`           // entity_position
	EntityPositionAssignment []*EntityPositionAssignment `json:"entityPositionAssignment" legend:"plus"` // entity_position_assignment
	HistfigId                []int                       `json:"histfigId" legend:"plus"`                // histfig_id
	Honor                    []*Honor                    `json:"honor" legend:"base"`                    // honor
	Id_                      int                         `json:"id" legend:"both"`                       // id
	Name_                    string                      `json:"name" legend:"base"`                     // name
	Occasion                 []*Occasion                 `json:"occasion" legend:"plus"`                 // occasion
	Profession               string                      `json:"profession" legend:"plus"`               // profession
	Race                     string                      `json:"race" legend:"plus"`                     // race
	Type                     string                      `json:"type" legend:"plus"`                     // type
	Weapon                   []string                    `json:"weapon" legend:"plus"`                   // weapon
	WorshipId                []int                       `json:"worshipId" legend:"plus"`                // worship_id
}

func (x *Entity) Id() int                     { return x.Id_ }
func (x *Entity) Name() string                { return x.Name_ }
func (x *Entity) RelatedToEntity(id int) bool { return false }
func (x *Entity) RelatedToHf(id int) bool     { return containsInt(x.HistfigId, id) }

func (x *Entity) CheckFields() {
}

type EntityEntityLink struct {
	Strength int    `json:"strength" legend:"plus"` // strength
	Target   int    `json:"target" legend:"plus"`   // target
	Type     string `json:"type" legend:"plus"`     // type
}

func (x *EntityEntityLink) RelatedToEntity(id int) bool { return false }
func (x *EntityEntityLink) RelatedToHf(id int) bool     { return false }

func (x *EntityEntityLink) CheckFields() {
}

type EntityFormerPositionLink struct {
	EndYear           int `json:"endYear" legend:"base"`           // end_year
	EntityId          int `json:"entityId" legend:"base"`          // entity_id
	PositionProfileId int `json:"positionProfileId" legend:"base"` // position_profile_id
	StartYear         int `json:"startYear" legend:"base"`         // start_year
}

func (x *EntityFormerPositionLink) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *EntityFormerPositionLink) RelatedToHf(id int) bool     { return false }

func (x *EntityFormerPositionLink) CheckFields() {
}

type EntityPopulation struct {
	CivId int    `json:"civId" legend:"plus"` // civ_id
	Id_   int    `json:"id" legend:"both"`    // id
	Race  string `json:"race" legend:"plus"`  // race
}

func (x *EntityPopulation) Id() int                     { return x.Id_ }
func (x *EntityPopulation) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *EntityPopulation) RelatedToHf(id int) bool     { return false }

func (x *EntityPopulation) CheckFields() {
}

type EntityPosition struct {
	Id_          int    `json:"id" legend:"plus"`           // id
	Name_        string `json:"name" legend:"plus"`         // name
	NameFemale   string `json:"nameFemale" legend:"plus"`   // name_female
	NameMale     string `json:"nameMale" legend:"plus"`     // name_male
	Spouse       string `json:"spouse" legend:"plus"`       // spouse
	SpouseFemale string `json:"spouseFemale" legend:"plus"` // spouse_female
	SpouseMale   string `json:"spouseMale" legend:"plus"`   // spouse_male
}

func (x *EntityPosition) Id() int                     { return x.Id_ }
func (x *EntityPosition) Name() string                { return x.Name_ }
func (x *EntityPosition) RelatedToEntity(id int) bool { return false }
func (x *EntityPosition) RelatedToHf(id int) bool     { return false }

func (x *EntityPosition) CheckFields() {
}

type EntityPositionAssignment struct {
	Histfig    int `json:"histfig" legend:"plus"`    // histfig
	Id_        int `json:"id" legend:"plus"`         // id
	PositionId int `json:"positionId" legend:"plus"` // position_id
	SquadId    int `json:"squadId" legend:"plus"`    // squad_id
}

func (x *EntityPositionAssignment) Id() int                     { return x.Id_ }
func (x *EntityPositionAssignment) RelatedToEntity(id int) bool { return false }
func (x *EntityPositionAssignment) RelatedToHf(id int) bool     { return x.Histfig == id }

func (x *EntityPositionAssignment) CheckFields() {
}

type EntityPositionLink struct {
	EntityId          int `json:"entityId" legend:"base"`          // entity_id
	PositionProfileId int `json:"positionProfileId" legend:"base"` // position_profile_id
	StartYear         int `json:"startYear" legend:"base"`         // start_year
}

func (x *EntityPositionLink) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *EntityPositionLink) RelatedToHf(id int) bool     { return false }

func (x *EntityPositionLink) CheckFields() {
}

type EntityReputation struct {
	EntityId                int `json:"entityId" legend:"base"`                // entity_id
	FirstAgelessSeasonCount int `json:"firstAgelessSeasonCount" legend:"base"` // first_ageless_season_count
	FirstAgelessYear        int `json:"firstAgelessYear" legend:"base"`        // first_ageless_year
	UnsolvedMurders         int `json:"unsolvedMurders" legend:"base"`         // unsolved_murders
}

func (x *EntityReputation) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *EntityReputation) RelatedToHf(id int) bool     { return false }

func (x *EntityReputation) CheckFields() {
}

type EntitySquadLink struct {
	EntityId      int `json:"entityId" legend:"base"`      // entity_id
	SquadId       int `json:"squadId" legend:"base"`       // squad_id
	SquadPosition int `json:"squadPosition" legend:"base"` // squad_position
	StartYear     int `json:"startYear" legend:"base"`     // start_year
}

func (x *EntitySquadLink) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *EntitySquadLink) RelatedToHf(id int) bool     { return false }

func (x *EntitySquadLink) CheckFields() {
}

type Feature struct {
	Reference int    `json:"reference" legend:"plus"` // reference
	Type      string `json:"type" legend:"plus"`      // type
}

func (x *Feature) RelatedToEntity(id int) bool { return false }
func (x *Feature) RelatedToHf(id int) bool     { return false }

func (x *Feature) CheckFields() {
}

type HfLink struct {
	Hfid         int    `json:"hfid" legend:"base"`         // hfid
	LinkStrength int    `json:"linkStrength" legend:"base"` // link_strength
	LinkType     string `json:"linkType" legend:"base"`     // link_type
}

func (x *HfLink) RelatedToEntity(id int) bool { return false }
func (x *HfLink) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HfLink) CheckFields() {
}

type HfSkill struct {
	Skill   string `json:"skill" legend:"base"`   // skill
	TotalIp int    `json:"totalIp" legend:"base"` // total_ip
}

func (x *HfSkill) RelatedToEntity(id int) bool { return false }
func (x *HfSkill) RelatedToHf(id int) bool     { return false }

func (x *HfSkill) CheckFields() {
}

type HistoricalEra struct {
	Name_     string `json:"name" legend:"base"`      // name
	StartYear int    `json:"startYear" legend:"base"` // start_year
}

func (x *HistoricalEra) Name() string                { return x.Name_ }
func (x *HistoricalEra) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEra) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEra) CheckFields() {
}

type HistoricalEvent struct {
	Id_       int `json:"id" legend:"both"`        // id
	Seconds72 int `json:"seconds72" legend:"base"` // seconds72
	Year      int `json:"year" legend:"base"`      // year
	Details   HistoricalEventDetails
}

func (x *HistoricalEvent) Id() int                     { return x.Id_ }
func (x *HistoricalEvent) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEvent) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEvent) CheckFields() {
}

type HistoricalEventAddHfEntityHonor struct {
	EntityId int `json:"entityId" legend:"base"` // entity_id
	Hfid     int `json:"hfid" legend:"base"`     // hfid
	HonorId  int `json:"honorId" legend:"base"`  // honor_id
}

func (x *HistoricalEventAddHfEntityHonor) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventAddHfEntityHonor) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventAddHfEntityHonor) CheckFields() {
}

type HistoricalEventAddHfEntityLink struct {
	AppointerHfid int    `json:"appointerHfid" legend:"both"` // appointer_hfid
	CivId         int    `json:"civId" legend:"base"`         // civ_id
	Hfid          int    `json:"hfid" legend:"base"`          // hfid
	Link          string `json:"link" legend:"base"`          // link
	Position      string `json:"position" legend:"plus"`      // position
	PositionId    int    `json:"positionId" legend:"base"`    // position_id
	PromiseToHfid int    `json:"promiseToHfid" legend:"both"` // promise_to_hfid
}

func (x *HistoricalEventAddHfEntityLink) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventAddHfEntityLink) RelatedToHf(id int) bool {
	return x.Hfid == id || x.PromiseToHfid == id || x.AppointerHfid == id
}

func (x *HistoricalEventAddHfEntityLink) CheckFields() {
	if x.Position != x.Link && x.Position != "" && x.Link != "" {
		sameFields["HistoricalEventAddHfEntityLink"]["Position"]["Link"] = false
	}
}

type HistoricalEventAddHfHfLink struct {
	Hfid       int    `json:"hfid" legend:"base"`       // hfid
	HfidTarget int    `json:"hfidTarget" legend:"base"` // hfid_target
	LinkType   string `json:"linkType" legend:"plus"`   // link_type
}

func (x *HistoricalEventAddHfHfLink) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventAddHfHfLink) RelatedToHf(id int) bool {
	return x.Hfid == id || x.HfidTarget == id
}

func (x *HistoricalEventAddHfHfLink) CheckFields() {
}

type HistoricalEventAddHfSiteLink struct {
	Civ       int    `json:"civ" legend:"plus"`       // civ
	Histfig   int    `json:"histfig" legend:"plus"`   // histfig
	LinkType  string `json:"linkType" legend:"plus"`  // link_type
	SiteId    int    `json:"siteId" legend:"base"`    // site_id
	Structure int    `json:"structure" legend:"plus"` // structure
}

func (x *HistoricalEventAddHfSiteLink) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventAddHfSiteLink) RelatedToHf(id int) bool     { return x.Histfig == id }

func (x *HistoricalEventAddHfSiteLink) CheckFields() {
	if x.Structure != x.SiteId && x.Structure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventAddHfSiteLink"]["Structure"]["SiteId"] = false
	}
	if x.Civ != x.SiteId && x.Civ != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventAddHfSiteLink"]["Civ"]["SiteId"] = false
	}
	if x.Histfig != x.SiteId && x.Histfig != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventAddHfSiteLink"]["Histfig"]["SiteId"] = false
	}
}

type HistoricalEventAgreementFormed struct {
	Action                    string `json:"action" legend:"base"`                    // action
	AgreementId               int    `json:"agreementId" legend:"base"`               // agreement_id
	AllyDefenseBonus          int    `json:"allyDefenseBonus" legend:"base"`          // ally_defense_bonus
	CoconspiratorBonus        int    `json:"coconspiratorBonus" legend:"base"`        // coconspirator_bonus
	Delegated                 bool   `json:"delegated" legend:"base"`                 // delegated
	FailedJudgmentTest        bool   `json:"failedJudgmentTest" legend:"base"`        // failed_judgment_test
	Method                    string `json:"method" legend:"base"`                    // method
	RelevantEntityId          int    `json:"relevantEntityId" legend:"base"`          // relevant_entity_id
	RelevantIdForMethod       int    `json:"relevantIdForMethod" legend:"base"`       // relevant_id_for_method
	RelevantPositionProfileId int    `json:"relevantPositionProfileId" legend:"base"` // relevant_position_profile_id
	Successful                bool   `json:"successful" legend:"base"`                // successful
	TopFacet                  string `json:"topFacet" legend:"base"`                  // top_facet
	TopFacetModifier          int    `json:"topFacetModifier" legend:"base"`          // top_facet_modifier
	TopFacetRating            int    `json:"topFacetRating" legend:"base"`            // top_facet_rating
	TopRelationshipFactor     string `json:"topRelationshipFactor" legend:"base"`     // top_relationship_factor
	TopRelationshipModifier   int    `json:"topRelationshipModifier" legend:"base"`   // top_relationship_modifier
	TopRelationshipRating     int    `json:"topRelationshipRating" legend:"base"`     // top_relationship_rating
	TopValue                  string `json:"topValue" legend:"base"`                  // top_value
	TopValueModifier          int    `json:"topValueModifier" legend:"base"`          // top_value_modifier
	TopValueRating            int    `json:"topValueRating" legend:"base"`            // top_value_rating
}

func (x *HistoricalEventAgreementFormed) RelatedToEntity(id int) bool {
	return x.RelevantEntityId == id
}
func (x *HistoricalEventAgreementFormed) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventAgreementFormed) CheckFields() {
}

type HistoricalEventArtifactClaimFormed struct {
	ArtifactId        int    `json:"artifactId" legend:"base"`        // artifact_id
	Circumstance      string `json:"circumstance" legend:"base"`      // circumstance
	Claim             string `json:"claim" legend:"base"`             // claim
	EntityId          int    `json:"entityId" legend:"base"`          // entity_id
	HistFigureId      int    `json:"histFigureId" legend:"base"`      // hist_figure_id
	PositionProfileId int    `json:"positionProfileId" legend:"base"` // position_profile_id
}

func (x *HistoricalEventArtifactClaimFormed) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventArtifactClaimFormed) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventArtifactClaimFormed) CheckFields() {
}

type HistoricalEventArtifactCopied struct {
	ArtifactId        int  `json:"artifactId" legend:"base"`        // artifact_id
	DestEntityId      int  `json:"destEntityId" legend:"base"`      // dest_entity_id
	DestSiteId        int  `json:"destSiteId" legend:"base"`        // dest_site_id
	DestStructureId   int  `json:"destStructureId" legend:"base"`   // dest_structure_id
	FromOriginal      bool `json:"fromOriginal" legend:"base"`      // from_original
	SourceEntityId    int  `json:"sourceEntityId" legend:"base"`    // source_entity_id
	SourceSiteId      int  `json:"sourceSiteId" legend:"base"`      // source_site_id
	SourceStructureId int  `json:"sourceStructureId" legend:"base"` // source_structure_id
}

func (x *HistoricalEventArtifactCopied) RelatedToEntity(id int) bool {
	return x.DestEntityId == id || x.SourceEntityId == id
}
func (x *HistoricalEventArtifactCopied) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventArtifactCopied) CheckFields() {
}

type HistoricalEventArtifactCreated struct {
	ArtifactId   int                                         `json:"artifactId" legend:"both"`   // artifact_id
	Circumstance *HistoricalEventArtifactCreatedCircumstance `json:"circumstance" legend:"plus"` // circumstance
	HistFigureId int                                         `json:"histFigureId" legend:"base"` // hist_figure_id
	NameOnly     bool                                        `json:"nameOnly" legend:"base"`     // name_only
	Reason       string                                      `json:"reason" legend:"plus"`       // reason
	SanctifyHf   int                                         `json:"sanctifyHf" legend:"plus"`   // sanctify_hf
	SiteId       int                                         `json:"siteId" legend:"base"`       // site_id
	UnitId       int                                         `json:"unitId" legend:"base"`       // unit_id
}

func (x *HistoricalEventArtifactCreated) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactCreated) RelatedToHf(id int) bool {
	return x.SanctifyHf == id || x.HistFigureId == id
}

func (x *HistoricalEventArtifactCreated) CheckFields() {
	if x.SanctifyHf != x.SiteId && x.SanctifyHf != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventArtifactCreated"]["SanctifyHf"]["SiteId"] = false
	}
	if x.SanctifyHf != x.UnitId && x.SanctifyHf != 0 && x.UnitId != 0 {
		sameFields["HistoricalEventArtifactCreated"]["SanctifyHf"]["UnitId"] = false
	}
	if x.SanctifyHf != x.HistFigureId && x.SanctifyHf != 0 && x.HistFigureId != 0 {
		sameFields["HistoricalEventArtifactCreated"]["SanctifyHf"]["HistFigureId"] = false
	}
}

type HistoricalEventArtifactCreatedCircumstance struct {
	Defeated int    `json:"defeated" legend:"plus"` // defeated
	Type     string `json:"type" legend:"plus"`     // type
}

func (x *HistoricalEventArtifactCreatedCircumstance) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactCreatedCircumstance) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventArtifactCreatedCircumstance) CheckFields() {
}

type HistoricalEventArtifactDestroyed struct {
	ArtifactId    int `json:"artifactId" legend:"base"`    // artifact_id
	DestroyerEnid int `json:"destroyerEnid" legend:"base"` // destroyer_enid
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventArtifactDestroyed) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactDestroyed) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventArtifactDestroyed) CheckFields() {
}

type HistoricalEventArtifactFound struct {
	ArtifactId   int `json:"artifactId" legend:"base"`   // artifact_id
	HistFigureId int `json:"histFigureId" legend:"base"` // hist_figure_id
	SiteId       int `json:"siteId" legend:"base"`       // site_id
	UnitId       int `json:"unitId" legend:"base"`       // unit_id
}

func (x *HistoricalEventArtifactFound) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactFound) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventArtifactFound) CheckFields() {
}

type HistoricalEventArtifactGiven struct {
	ArtifactId           int `json:"artifactId" legend:"base"`           // artifact_id
	GiverEntityId        int `json:"giverEntityId" legend:"base"`        // giver_entity_id
	GiverHistFigureId    int `json:"giverHistFigureId" legend:"base"`    // giver_hist_figure_id
	ReceiverEntityId     int `json:"receiverEntityId" legend:"base"`     // receiver_entity_id
	ReceiverHistFigureId int `json:"receiverHistFigureId" legend:"base"` // receiver_hist_figure_id
}

func (x *HistoricalEventArtifactGiven) RelatedToEntity(id int) bool {
	return x.GiverEntityId == id || x.ReceiverEntityId == id
}
func (x *HistoricalEventArtifactGiven) RelatedToHf(id int) bool {
	return x.GiverHistFigureId == id || x.ReceiverHistFigureId == id
}

func (x *HistoricalEventArtifactGiven) CheckFields() {
}

type HistoricalEventArtifactLost struct {
	ArtifactId     int `json:"artifactId" legend:"base"`     // artifact_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	SitePropertyId int `json:"sitePropertyId" legend:"base"` // site_property_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventArtifactLost) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactLost) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventArtifactLost) CheckFields() {
}

type HistoricalEventArtifactPossessed struct {
	ArtifactId     int    `json:"artifactId" legend:"base"`     // artifact_id
	Circumstance   string `json:"circumstance" legend:"base"`   // circumstance
	CircumstanceId int    `json:"circumstanceId" legend:"base"` // circumstance_id
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	HistFigureId   int    `json:"histFigureId" legend:"base"`   // hist_figure_id
	Reason         string `json:"reason" legend:"base"`         // reason
	ReasonId       int    `json:"reasonId" legend:"base"`       // reason_id
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	UnitId         int    `json:"unitId" legend:"base"`         // unit_id
}

func (x *HistoricalEventArtifactPossessed) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactPossessed) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventArtifactPossessed) CheckFields() {
}

type HistoricalEventArtifactRecovered struct {
	ArtifactId     int `json:"artifactId" legend:"base"`     // artifact_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	HistFigureId   int `json:"histFigureId" legend:"base"`   // hist_figure_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	StructureId    int `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
	UnitId         int `json:"unitId" legend:"base"`         // unit_id
}

func (x *HistoricalEventArtifactRecovered) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactRecovered) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventArtifactRecovered) CheckFields() {
}

type HistoricalEventArtifactStored struct {
	ArtifactId   int `json:"artifactId" legend:"base"`   // artifact_id
	HistFigureId int `json:"histFigureId" legend:"base"` // hist_figure_id
	SiteId       int `json:"siteId" legend:"base"`       // site_id
	UnitId       int `json:"unitId" legend:"base"`       // unit_id
}

func (x *HistoricalEventArtifactStored) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventArtifactStored) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventArtifactStored) CheckFields() {
}

type HistoricalEventAssumeIdentity struct {
	IdentityCaste string `json:"identityCaste" legend:"plus"` // identity_caste
	IdentityId    int    `json:"identityId" legend:"base"`    // identity_id
	IdentityName  string `json:"identityName" legend:"plus"`  // identity_name
	IdentityRace  string `json:"identityRace" legend:"plus"`  // identity_race
	TargetEnid    int    `json:"targetEnid" legend:"base"`    // target_enid
	TricksterHfid int    `json:"tricksterHfid" legend:"base"` // trickster_hfid
}

func (x *HistoricalEventAssumeIdentity) RelatedToEntity(id int) bool { return x.IdentityId == id }
func (x *HistoricalEventAssumeIdentity) RelatedToHf(id int) bool     { return x.TricksterHfid == id }

func (x *HistoricalEventAssumeIdentity) CheckFields() {
}

type HistoricalEventAttackedSite struct {
	ASupportMercEnid    int `json:"aSupportMercEnid" legend:"base"`    // a_support_merc_enid
	AttackerCivId       int `json:"attackerCivId" legend:"base"`       // attacker_civ_id
	AttackerGeneralHfid int `json:"attackerGeneralHfid" legend:"base"` // attacker_general_hfid
	AttackerMercEnid    int `json:"attackerMercEnid" legend:"base"`    // attacker_merc_enid
	DSupportMercEnid    int `json:"dSupportMercEnid" legend:"base"`    // d_support_merc_enid
	DefenderCivId       int `json:"defenderCivId" legend:"base"`       // defender_civ_id
	DefenderGeneralHfid int `json:"defenderGeneralHfid" legend:"base"` // defender_general_hfid
	DefenderMercEnid    int `json:"defenderMercEnid" legend:"base"`    // defender_merc_enid
	SiteCivId           int `json:"siteCivId" legend:"base"`           // site_civ_id
	SiteId              int `json:"siteId" legend:"base"`              // site_id
}

func (x *HistoricalEventAttackedSite) RelatedToEntity(id int) bool {
	return x.DefenderCivId == id || x.SiteCivId == id || x.AttackerCivId == id
}
func (x *HistoricalEventAttackedSite) RelatedToHf(id int) bool {
	return x.AttackerGeneralHfid == id || x.DefenderGeneralHfid == id
}

func (x *HistoricalEventAttackedSite) CheckFields() {
}

type HistoricalEventBodyAbused struct {
	AbuseType      string `json:"abuseType" legend:"plus"`      // abuse_type
	Bodies         []int  `json:"bodies" legend:"plus"`         // bodies
	Civ            int    `json:"civ" legend:"plus"`            // civ
	Coords         string `json:"coords" legend:"base"`         // coords
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Histfig        int    `json:"histfig" legend:"plus"`        // histfig
	Interaction    int    `json:"interaction" legend:"plus"`    // interaction
	ItemMat        string `json:"itemMat" legend:"plus"`        // item_mat
	ItemSubtype    string `json:"itemSubtype" legend:"plus"`    // item_subtype
	ItemType       string `json:"itemType" legend:"plus"`       // item_type
	PileType       string `json:"pileType" legend:"plus"`       // pile_type
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	Structure      int    `json:"structure" legend:"plus"`      // structure
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	Tree           int    `json:"tree" legend:"plus"`           // tree
	VictimEntity   int    `json:"victimEntity" legend:"plus"`   // victim_entity
}

func (x *HistoricalEventBodyAbused) RelatedToEntity(id int) bool { return x.VictimEntity == id }
func (x *HistoricalEventBodyAbused) RelatedToHf(id int) bool {
	return x.Histfig == id || containsInt(x.Bodies, id)
}

func (x *HistoricalEventBodyAbused) CheckFields() {
	if x.AbuseType != x.Coords && x.AbuseType != "" && x.Coords != "" {
		sameFields["HistoricalEventBodyAbused"]["AbuseType"]["Coords"] = false
	}
	if x.ItemSubtype != x.Coords && x.ItemSubtype != "" && x.Coords != "" {
		sameFields["HistoricalEventBodyAbused"]["ItemSubtype"]["Coords"] = false
	}
	if x.Tree != x.SiteId && x.Tree != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Tree"]["SiteId"] = false
	}
	if x.Tree != x.SubregionId && x.Tree != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Tree"]["SubregionId"] = false
	}
	if x.Tree != x.FeatureLayerId && x.Tree != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Tree"]["FeatureLayerId"] = false
	}
	if x.ItemMat != x.Coords && x.ItemMat != "" && x.Coords != "" {
		sameFields["HistoricalEventBodyAbused"]["ItemMat"]["Coords"] = false
	}
	if x.PileType != x.Coords && x.PileType != "" && x.Coords != "" {
		sameFields["HistoricalEventBodyAbused"]["PileType"]["Coords"] = false
	}
	if x.VictimEntity != x.FeatureLayerId && x.VictimEntity != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["VictimEntity"]["FeatureLayerId"] = false
	}
	if x.VictimEntity != x.SubregionId && x.VictimEntity != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["VictimEntity"]["SubregionId"] = false
	}
	if x.VictimEntity != x.SiteId && x.VictimEntity != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["VictimEntity"]["SiteId"] = false
	}
	if x.Histfig != x.FeatureLayerId && x.Histfig != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Histfig"]["FeatureLayerId"] = false
	}
	if x.Histfig != x.SiteId && x.Histfig != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Histfig"]["SiteId"] = false
	}
	if x.Histfig != x.SubregionId && x.Histfig != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Histfig"]["SubregionId"] = false
	}
	if x.Interaction != x.FeatureLayerId && x.Interaction != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Interaction"]["FeatureLayerId"] = false
	}
	if x.Interaction != x.SiteId && x.Interaction != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Interaction"]["SiteId"] = false
	}
	if x.Interaction != x.SubregionId && x.Interaction != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Interaction"]["SubregionId"] = false
	}
	if x.Civ != x.FeatureLayerId && x.Civ != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Civ"]["FeatureLayerId"] = false
	}
	if x.Civ != x.SubregionId && x.Civ != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Civ"]["SubregionId"] = false
	}
	if x.Civ != x.SiteId && x.Civ != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Civ"]["SiteId"] = false
	}
	if x.ItemType != x.Coords && x.ItemType != "" && x.Coords != "" {
		sameFields["HistoricalEventBodyAbused"]["ItemType"]["Coords"] = false
	}
	if x.Structure != x.FeatureLayerId && x.Structure != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Structure"]["FeatureLayerId"] = false
	}
	if x.Structure != x.SiteId && x.Structure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Structure"]["SiteId"] = false
	}
	if x.Structure != x.SubregionId && x.Structure != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventBodyAbused"]["Structure"]["SubregionId"] = false
	}
}

type HistoricalEventBuildingProfileAcquired struct {
	AcquirerEnid      int  `json:"acquirerEnid" legend:"base"`      // acquirer_enid
	AcquirerHfid      int  `json:"acquirerHfid" legend:"base"`      // acquirer_hfid
	BuildingProfileId int  `json:"buildingProfileId" legend:"base"` // building_profile_id
	Inherited         bool `json:"inherited" legend:"base"`         // inherited
	LastOwnerHfid     int  `json:"lastOwnerHfid" legend:"base"`     // last_owner_hfid
	PurchasedUnowned  bool `json:"purchasedUnowned" legend:"base"`  // purchased_unowned
	RebuiltRuined     bool `json:"rebuiltRuined" legend:"base"`     // rebuilt_ruined
	SiteId            int  `json:"siteId" legend:"base"`            // site_id
}

func (x *HistoricalEventBuildingProfileAcquired) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventBuildingProfileAcquired) RelatedToHf(id int) bool {
	return x.AcquirerHfid == id || x.LastOwnerHfid == id
}

func (x *HistoricalEventBuildingProfileAcquired) CheckFields() {
}

type HistoricalEventCeremony struct {
	CivId          int `json:"civId" legend:"base"`          // civ_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	OccasionId     int `json:"occasionId" legend:"base"`     // occasion_id
	ScheduleId     int `json:"scheduleId" legend:"base"`     // schedule_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventCeremony) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventCeremony) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCeremony) CheckFields() {
}

type HistoricalEventChangeHfBodyState struct {
	BodyState      string `json:"bodyState" legend:"base"`      // body_state
	Coords         string `json:"coords" legend:"base"`         // coords
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int    `json:"hfid" legend:"base"`           // hfid
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	StructureId    int    `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventChangeHfBodyState) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventChangeHfBodyState) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventChangeHfBodyState) CheckFields() {
}

type HistoricalEventChangeHfJob struct {
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int    `json:"hfid" legend:"both"`           // hfid
	NewJob         string `json:"newJob" legend:"plus"`         // new_job
	OldJob         string `json:"oldJob" legend:"plus"`         // old_job
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventChangeHfJob) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventChangeHfJob) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventChangeHfJob) CheckFields() {
}

type HistoricalEventChangeHfState struct {
	Coords         string `json:"coords" legend:"base"`         // coords
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int    `json:"hfid" legend:"both"`           // hfid
	Mood           string `json:"mood" legend:"base"`           // mood
	Reason         string `json:"reason" legend:"both"`         // reason
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	State          string `json:"state" legend:"both"`          // state
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventChangeHfState) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventChangeHfState) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventChangeHfState) CheckFields() {
}

type HistoricalEventChangedCreatureType struct {
	ChangeeHfid int    `json:"changeeHfid" legend:"base"` // changee_hfid
	ChangerHfid int    `json:"changerHfid" legend:"base"` // changer_hfid
	NewCaste    string `json:"newCaste" legend:"both"`    // new_caste
	NewRace     string `json:"newRace" legend:"both"`     // new_race
	OldCaste    string `json:"oldCaste" legend:"both"`    // old_caste
	OldRace     string `json:"oldRace" legend:"both"`     // old_race
}

func (x *HistoricalEventChangedCreatureType) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventChangedCreatureType) RelatedToHf(id int) bool {
	return x.ChangeeHfid == id || x.ChangerHfid == id
}

func (x *HistoricalEventChangedCreatureType) CheckFields() {
}

type HistoricalEventCollection struct {
	EndSeconds72   int   `json:"endSeconds72" legend:"base"`   // end_seconds72
	EndYear        int   `json:"endYear" legend:"base"`        // end_year
	Event          []int `json:"event" legend:"base"`          // event
	Eventcol       []int `json:"eventcol" legend:"base"`       // eventcol
	Id_            int   `json:"id" legend:"base"`             // id
	StartSeconds72 int   `json:"startSeconds72" legend:"base"` // start_seconds72
	StartYear      int   `json:"startYear" legend:"base"`      // start_year
	Details        HistoricalEventCollectionDetails
}

func (x *HistoricalEventCollection) Id() int                     { return x.Id_ }
func (x *HistoricalEventCollection) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollection) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollection) CheckFields() {
}

type HistoricalEventCollectionAbduction struct {
	AttackingEnid  int    `json:"attackingEnid" legend:"base"`  // attacking_enid
	Coords         string `json:"coords" legend:"base"`         // coords
	DefendingEnid  int    `json:"defendingEnid" legend:"base"`  // defending_enid
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Ordinal        int    `json:"ordinal" legend:"base"`        // ordinal
	ParentEventcol int    `json:"parentEventcol" legend:"base"` // parent_eventcol
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventCollectionAbduction) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionAbduction) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionAbduction) CheckFields() {
}

type HistoricalEventCollectionBattle struct {
	ASupportMercEnid        int      `json:"aSupportMercEnid" legend:"base"`        // a_support_merc_enid
	ASupportMercHfid        []int    `json:"aSupportMercHfid" legend:"base"`        // a_support_merc_hfid
	AttackingHfid           []int    `json:"attackingHfid" legend:"base"`           // attacking_hfid
	AttackingMercEnid       int      `json:"attackingMercEnid" legend:"base"`       // attacking_merc_enid
	AttackingSquadAnimated  []bool   `json:"attackingSquadAnimated" legend:"base"`  // attacking_squad_animated
	AttackingSquadDeaths    []int    `json:"attackingSquadDeaths" legend:"base"`    // attacking_squad_deaths
	AttackingSquadEntityPop []int    `json:"attackingSquadEntityPop" legend:"base"` // attacking_squad_entity_pop
	AttackingSquadNumber    []int    `json:"attackingSquadNumber" legend:"base"`    // attacking_squad_number
	AttackingSquadRace      []string `json:"attackingSquadRace" legend:"base"`      // attacking_squad_race
	AttackingSquadSite      []int    `json:"attackingSquadSite" legend:"base"`      // attacking_squad_site
	CompanyMerc             []bool   `json:"companyMerc" legend:"base"`             // company_merc
	Coords                  string   `json:"coords" legend:"base"`                  // coords
	DSupportMercEnid        int      `json:"dSupportMercEnid" legend:"base"`        // d_support_merc_enid
	DSupportMercHfid        []int    `json:"dSupportMercHfid" legend:"base"`        // d_support_merc_hfid
	DefendingHfid           []int    `json:"defendingHfid" legend:"base"`           // defending_hfid
	DefendingMercEnid       int      `json:"defendingMercEnid" legend:"base"`       // defending_merc_enid
	DefendingSquadAnimated  []bool   `json:"defendingSquadAnimated" legend:"base"`  // defending_squad_animated
	DefendingSquadDeaths    []int    `json:"defendingSquadDeaths" legend:"base"`    // defending_squad_deaths
	DefendingSquadEntityPop []int    `json:"defendingSquadEntityPop" legend:"base"` // defending_squad_entity_pop
	DefendingSquadNumber    []int    `json:"defendingSquadNumber" legend:"base"`    // defending_squad_number
	DefendingSquadRace      []string `json:"defendingSquadRace" legend:"base"`      // defending_squad_race
	DefendingSquadSite      []int    `json:"defendingSquadSite" legend:"base"`      // defending_squad_site
	FeatureLayerId          int      `json:"featureLayerId" legend:"base"`          // feature_layer_id
	IndividualMerc          []bool   `json:"individualMerc" legend:"base"`          // individual_merc
	Name_                   string   `json:"name" legend:"base"`                    // name
	NoncomHfid              []int    `json:"noncomHfid" legend:"base"`              // noncom_hfid
	Outcome                 string   `json:"outcome" legend:"base"`                 // outcome
	SiteId                  int      `json:"siteId" legend:"base"`                  // site_id
	SubregionId             int      `json:"subregionId" legend:"base"`             // subregion_id
	WarEventcol             int      `json:"warEventcol" legend:"base"`             // war_eventcol
}

func (x *HistoricalEventCollectionBattle) Name() string { return x.Name_ }
func (x *HistoricalEventCollectionBattle) RelatedToEntity(id int) bool {
	return containsInt(x.DefendingSquadEntityPop, id) || containsInt(x.AttackingSquadEntityPop, id)
}
func (x *HistoricalEventCollectionBattle) RelatedToHf(id int) bool {
	return containsInt(x.ASupportMercHfid, id) || containsInt(x.DefendingHfid, id) || containsInt(x.DSupportMercHfid, id) || containsInt(x.AttackingHfid, id) || containsInt(x.NoncomHfid, id)
}

func (x *HistoricalEventCollectionBattle) CheckFields() {
}

type HistoricalEventCollectionBeastAttack struct {
	Coords         string `json:"coords" legend:"base"`         // coords
	DefendingEnid  int    `json:"defendingEnid" legend:"base"`  // defending_enid
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Ordinal        int    `json:"ordinal" legend:"base"`        // ordinal
	ParentEventcol int    `json:"parentEventcol" legend:"base"` // parent_eventcol
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventCollectionBeastAttack) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionBeastAttack) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionBeastAttack) CheckFields() {
}

type HistoricalEventCollectionCeremony struct {
	Ordinal int `json:"ordinal" legend:"base"` // ordinal
}

func (x *HistoricalEventCollectionCeremony) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionCeremony) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionCeremony) CheckFields() {
}

type HistoricalEventCollectionCompetition struct {
	Ordinal int `json:"ordinal" legend:"base"` // ordinal
}

func (x *HistoricalEventCollectionCompetition) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionCompetition) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionCompetition) CheckFields() {
}

type HistoricalEventCollectionDuel struct {
	AttackingHfid  int    `json:"attackingHfid" legend:"base"`  // attacking_hfid
	Coords         string `json:"coords" legend:"base"`         // coords
	DefendingHfid  int    `json:"defendingHfid" legend:"base"`  // defending_hfid
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Ordinal        int    `json:"ordinal" legend:"base"`        // ordinal
	ParentEventcol int    `json:"parentEventcol" legend:"base"` // parent_eventcol
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventCollectionDuel) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionDuel) RelatedToHf(id int) bool {
	return x.AttackingHfid == id || x.DefendingHfid == id
}

func (x *HistoricalEventCollectionDuel) CheckFields() {
}

type HistoricalEventCollectionEntityOverthrown struct {
	Ordinal        int `json:"ordinal" legend:"base"`        // ordinal
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	TargetEntityId int `json:"targetEntityId" legend:"base"` // target_entity_id
}

func (x *HistoricalEventCollectionEntityOverthrown) RelatedToEntity(id int) bool {
	return x.TargetEntityId == id
}
func (x *HistoricalEventCollectionEntityOverthrown) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventCollectionEntityOverthrown) CheckFields() {
}

type HistoricalEventCollectionJourney struct {
	Ordinal int `json:"ordinal" legend:"base"` // ordinal
}

func (x *HistoricalEventCollectionJourney) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionJourney) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionJourney) CheckFields() {
}

type HistoricalEventCollectionOccasion struct {
	CivId      int `json:"civId" legend:"base"`      // civ_id
	OccasionId int `json:"occasionId" legend:"base"` // occasion_id
	Ordinal    int `json:"ordinal" legend:"base"`    // ordinal
}

func (x *HistoricalEventCollectionOccasion) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventCollectionOccasion) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionOccasion) CheckFields() {
}

type HistoricalEventCollectionPerformance struct {
	Ordinal int `json:"ordinal" legend:"base"` // ordinal
}

func (x *HistoricalEventCollectionPerformance) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionPerformance) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionPerformance) CheckFields() {
}

type HistoricalEventCollectionPersecution struct {
	Ordinal        int `json:"ordinal" legend:"base"`        // ordinal
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	TargetEntityId int `json:"targetEntityId" legend:"base"` // target_entity_id
}

func (x *HistoricalEventCollectionPersecution) RelatedToEntity(id int) bool {
	return x.TargetEntityId == id
}
func (x *HistoricalEventCollectionPersecution) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventCollectionPersecution) CheckFields() {
}

type HistoricalEventCollectionProcession struct {
	Ordinal int `json:"ordinal" legend:"base"` // ordinal
}

func (x *HistoricalEventCollectionProcession) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionProcession) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionProcession) CheckFields() {
}

type HistoricalEventCollectionPurge struct {
	Adjective string `json:"adjective" legend:"base"` // adjective
	Ordinal   int    `json:"ordinal" legend:"base"`   // ordinal
	SiteId    int    `json:"siteId" legend:"base"`    // site_id
}

func (x *HistoricalEventCollectionPurge) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionPurge) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionPurge) CheckFields() {
}

type HistoricalEventCollectionSiteConquered struct {
	AttackingEnid int `json:"attackingEnid" legend:"base"` // attacking_enid
	DefendingEnid int `json:"defendingEnid" legend:"base"` // defending_enid
	Ordinal       int `json:"ordinal" legend:"base"`       // ordinal
	SiteId        int `json:"siteId" legend:"base"`        // site_id
	WarEventcol   int `json:"warEventcol" legend:"base"`   // war_eventcol
}

func (x *HistoricalEventCollectionSiteConquered) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionSiteConquered) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionSiteConquered) CheckFields() {
}

type HistoricalEventCollectionTheft struct {
	AttackingEnid  int    `json:"attackingEnid" legend:"base"`  // attacking_enid
	Coords         string `json:"coords" legend:"base"`         // coords
	DefendingEnid  int    `json:"defendingEnid" legend:"base"`  // defending_enid
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Ordinal        int    `json:"ordinal" legend:"base"`        // ordinal
	ParentEventcol int    `json:"parentEventcol" legend:"base"` // parent_eventcol
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventCollectionTheft) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionTheft) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionTheft) CheckFields() {
}

type HistoricalEventCollectionWar struct {
	AggressorEntId int    `json:"aggressorEntId" legend:"base"` // aggressor_ent_id
	DefenderEntId  int    `json:"defenderEntId" legend:"base"`  // defender_ent_id
	Name_          string `json:"name" legend:"base"`           // name
}

func (x *HistoricalEventCollectionWar) Name() string                { return x.Name_ }
func (x *HistoricalEventCollectionWar) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCollectionWar) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCollectionWar) CheckFields() {
}

type HistoricalEventCompetition struct {
	CivId          int   `json:"civId" legend:"base"`          // civ_id
	CompetitorHfid []int `json:"competitorHfid" legend:"base"` // competitor_hfid
	FeatureLayerId int   `json:"featureLayerId" legend:"base"` // feature_layer_id
	OccasionId     int   `json:"occasionId" legend:"base"`     // occasion_id
	ScheduleId     int   `json:"scheduleId" legend:"base"`     // schedule_id
	SiteId         int   `json:"siteId" legend:"base"`         // site_id
	SubregionId    int   `json:"subregionId" legend:"base"`    // subregion_id
	WinnerHfid     int   `json:"winnerHfid" legend:"base"`     // winner_hfid
}

func (x *HistoricalEventCompetition) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventCompetition) RelatedToHf(id int) bool {
	return x.WinnerHfid == id || containsInt(x.CompetitorHfid, id)
}

func (x *HistoricalEventCompetition) CheckFields() {
}

type HistoricalEventCreateEntityPosition struct {
	Civ      int    `json:"civ" legend:"plus"`      // civ
	Histfig  int    `json:"histfig" legend:"plus"`  // histfig
	Position string `json:"position" legend:"plus"` // position
	Reason   string `json:"reason" legend:"plus"`   // reason
	SiteCiv  int    `json:"siteCiv" legend:"plus"`  // site_civ
}

func (x *HistoricalEventCreateEntityPosition) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventCreateEntityPosition) RelatedToHf(id int) bool     { return x.Histfig == id }

func (x *HistoricalEventCreateEntityPosition) CheckFields() {
}

type HistoricalEventCreatedSite struct {
	BuilderHfid   int `json:"builderHfid" legend:"base"`   // builder_hfid
	CivId         int `json:"civId" legend:"base"`         // civ_id
	ResidentCivId int `json:"residentCivId" legend:"base"` // resident_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventCreatedSite) RelatedToEntity(id int) bool {
	return x.CivId == id || x.ResidentCivId == id || x.SiteCivId == id
}
func (x *HistoricalEventCreatedSite) RelatedToHf(id int) bool { return x.BuilderHfid == id }

func (x *HistoricalEventCreatedSite) CheckFields() {
}

type HistoricalEventCreatedStructure struct {
	BuilderHfid int    `json:"builderHfid" legend:"base"` // builder_hfid
	CivId       int    `json:"civId" legend:"base"`       // civ_id
	Rebuild     string `json:"rebuild" legend:"plus"`     // rebuild
	Rebuilt     bool   `json:"rebuilt" legend:"base"`     // rebuilt
	SiteCivId   int    `json:"siteCivId" legend:"base"`   // site_civ_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	Structure   int    `json:"structure" legend:"plus"`   // structure
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventCreatedStructure) RelatedToEntity(id int) bool {
	return x.CivId == id || x.SiteCivId == id
}
func (x *HistoricalEventCreatedStructure) RelatedToHf(id int) bool { return x.BuilderHfid == id }

func (x *HistoricalEventCreatedStructure) CheckFields() {
	if x.Structure != x.SiteCivId && x.Structure != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventCreatedStructure"]["Structure"]["SiteCivId"] = false
	}
	if x.Structure != x.SiteId && x.Structure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventCreatedStructure"]["Structure"]["SiteId"] = false
	}
	if x.Structure != x.CivId && x.Structure != 0 && x.CivId != 0 {
		sameFields["HistoricalEventCreatedStructure"]["Structure"]["CivId"] = false
	}
	if x.Structure != x.StructureId && x.Structure != 0 && x.StructureId != 0 {
		sameFields["HistoricalEventCreatedStructure"]["Structure"]["StructureId"] = false
	}
	if x.Structure != x.BuilderHfid && x.Structure != 0 && x.BuilderHfid != 0 {
		sameFields["HistoricalEventCreatedStructure"]["Structure"]["BuilderHfid"] = false
	}
}

type HistoricalEventCreatedWorldConstruction struct {
	CivId      int `json:"civId" legend:"base"`      // civ_id
	MasterWcid int `json:"masterWcid" legend:"base"` // master_wcid
	SiteCivId  int `json:"siteCivId" legend:"base"`  // site_civ_id
	SiteId1    int `json:"siteId1" legend:"base"`    // site_id1
	SiteId2    int `json:"siteId2" legend:"base"`    // site_id2
	Wcid       int `json:"wcid" legend:"base"`       // wcid
}

func (x *HistoricalEventCreatedWorldConstruction) RelatedToEntity(id int) bool {
	return x.CivId == id || x.SiteCivId == id
}
func (x *HistoricalEventCreatedWorldConstruction) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventCreatedWorldConstruction) CheckFields() {
}

type HistoricalEventCreatureDevoured struct {
	Caste          string `json:"caste" legend:"plus"`          // caste
	Eater          int    `json:"eater" legend:"plus"`          // eater
	Entity         int    `json:"entity" legend:"plus"`         // entity
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Race           string `json:"race" legend:"plus"`           // race
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	Victim         int    `json:"victim" legend:"plus"`         // victim
}

func (x *HistoricalEventCreatureDevoured) RelatedToEntity(id int) bool { return x.Entity == id }
func (x *HistoricalEventCreatureDevoured) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventCreatureDevoured) CheckFields() {
	if x.Eater != x.SiteId && x.Eater != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Eater"]["SiteId"] = false
	}
	if x.Eater != x.SubregionId && x.Eater != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Eater"]["SubregionId"] = false
	}
	if x.Eater != x.FeatureLayerId && x.Eater != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Eater"]["FeatureLayerId"] = false
	}
	if x.Entity != x.SubregionId && x.Entity != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Entity"]["SubregionId"] = false
	}
	if x.Entity != x.FeatureLayerId && x.Entity != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Entity"]["FeatureLayerId"] = false
	}
	if x.Entity != x.SiteId && x.Entity != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Entity"]["SiteId"] = false
	}
	if x.Victim != x.FeatureLayerId && x.Victim != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Victim"]["FeatureLayerId"] = false
	}
	if x.Victim != x.SiteId && x.Victim != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Victim"]["SiteId"] = false
	}
	if x.Victim != x.SubregionId && x.Victim != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventCreatureDevoured"]["Victim"]["SubregionId"] = false
	}
}

type HistoricalEventDanceFormCreated struct {
	Circumstance   string `json:"circumstance" legend:"base"`   // circumstance
	CircumstanceId int    `json:"circumstanceId" legend:"base"` // circumstance_id
	FormId         int    `json:"formId" legend:"base"`         // form_id
	HistFigureId   int    `json:"histFigureId" legend:"base"`   // hist_figure_id
	Reason         string `json:"reason" legend:"base"`         // reason
	ReasonId       int    `json:"reasonId" legend:"base"`       // reason_id
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
}

func (x *HistoricalEventDanceFormCreated) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventDanceFormCreated) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventDanceFormCreated) CheckFields() {
}

type HistoricalEventDestroyedSite struct {
	AttackerCivId int `json:"attackerCivId" legend:"base"` // attacker_civ_id
	DefenderCivId int `json:"defenderCivId" legend:"base"` // defender_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventDestroyedSite) RelatedToEntity(id int) bool {
	return x.AttackerCivId == id || x.DefenderCivId == id || x.SiteCivId == id
}
func (x *HistoricalEventDestroyedSite) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventDestroyedSite) CheckFields() {
}

type HistoricalEventEntityAllianceFormed struct {
	InitiatingEnid int   `json:"initiatingEnid" legend:"base"` // initiating_enid
	JoiningEnid    []int `json:"joiningEnid" legend:"base"`    // joining_enid
}

func (x *HistoricalEventEntityAllianceFormed) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventEntityAllianceFormed) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventEntityAllianceFormed) CheckFields() {
}

type HistoricalEventEntityBreachFeatureLayer struct {
	CivEntityId    int `json:"civEntityId" legend:"base"`    // civ_entity_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	SiteEntityId   int `json:"siteEntityId" legend:"base"`   // site_entity_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
}

func (x *HistoricalEventEntityBreachFeatureLayer) RelatedToEntity(id int) bool {
	return x.CivEntityId == id || x.SiteEntityId == id
}
func (x *HistoricalEventEntityBreachFeatureLayer) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventEntityBreachFeatureLayer) CheckFields() {
}

type HistoricalEventEntityCreated struct {
	CreatorHfid int `json:"creatorHfid" legend:"base"` // creator_hfid
	EntityId    int `json:"entityId" legend:"base"`    // entity_id
	SiteId      int `json:"siteId" legend:"base"`      // site_id
	StructureId int `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventEntityCreated) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityCreated) RelatedToHf(id int) bool     { return x.CreatorHfid == id }

func (x *HistoricalEventEntityCreated) CheckFields() {
}

type HistoricalEventEntityDissolved struct {
	EntityId int    `json:"entityId" legend:"base"` // entity_id
	Reason   string `json:"reason" legend:"base"`   // reason
}

func (x *HistoricalEventEntityDissolved) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityDissolved) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventEntityDissolved) CheckFields() {
}

type HistoricalEventEntityEquipmentPurchase struct {
	EntityId          int   `json:"entityId" legend:"base"`          // entity_id
	Hfid              []int `json:"hfid" legend:"base"`              // hfid
	NewEquipmentLevel int   `json:"newEquipmentLevel" legend:"base"` // new_equipment_level
}

func (x *HistoricalEventEntityEquipmentPurchase) RelatedToEntity(id int) bool {
	return x.EntityId == id
}
func (x *HistoricalEventEntityEquipmentPurchase) RelatedToHf(id int) bool {
	return containsInt(x.Hfid, id)
}

func (x *HistoricalEventEntityEquipmentPurchase) CheckFields() {
}

type HistoricalEventEntityIncorporated struct {
	JoinedEntityId       int  `json:"joinedEntityId" legend:"base"`       // joined_entity_id
	JoinerEntityId       int  `json:"joinerEntityId" legend:"base"`       // joiner_entity_id
	LeaderHfid           int  `json:"leaderHfid" legend:"base"`           // leader_hfid
	PartialIncorporation bool `json:"partialIncorporation" legend:"base"` // partial_incorporation
	SiteId               int  `json:"siteId" legend:"base"`               // site_id
}

func (x *HistoricalEventEntityIncorporated) RelatedToEntity(id int) bool {
	return x.JoinedEntityId == id || x.JoinerEntityId == id
}
func (x *HistoricalEventEntityIncorporated) RelatedToHf(id int) bool { return x.LeaderHfid == id }

func (x *HistoricalEventEntityIncorporated) CheckFields() {
}

type HistoricalEventEntityLaw struct {
	EntityId     int    `json:"entityId" legend:"base"`     // entity_id
	HistFigureId int    `json:"histFigureId" legend:"base"` // hist_figure_id
	LawAdd       string `json:"lawAdd" legend:"base"`       // law_add
	LawRemove    string `json:"lawRemove" legend:"base"`    // law_remove
}

func (x *HistoricalEventEntityLaw) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityLaw) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventEntityLaw) CheckFields() {
}

type HistoricalEventEntityOverthrown struct {
	ConspiratorHfid   []int `json:"conspiratorHfid" legend:"base"`   // conspirator_hfid
	EntityId          int   `json:"entityId" legend:"base"`          // entity_id
	InstigatorHfid    int   `json:"instigatorHfid" legend:"base"`    // instigator_hfid
	OverthrownHfid    int   `json:"overthrownHfid" legend:"base"`    // overthrown_hfid
	PosTakerHfid      int   `json:"posTakerHfid" legend:"base"`      // pos_taker_hfid
	PositionProfileId int   `json:"positionProfileId" legend:"base"` // position_profile_id
	SiteId            int   `json:"siteId" legend:"base"`            // site_id
}

func (x *HistoricalEventEntityOverthrown) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityOverthrown) RelatedToHf(id int) bool {
	return containsInt(x.ConspiratorHfid, id) || x.InstigatorHfid == id || x.OverthrownHfid == id || x.PosTakerHfid == id
}

func (x *HistoricalEventEntityOverthrown) CheckFields() {
}

type HistoricalEventEntityPersecuted struct {
	DestroyedStructureId        int   `json:"destroyedStructureId" legend:"base"`        // destroyed_structure_id
	ExpelledCreature            []int `json:"expelledCreature" legend:"base"`            // expelled_creature
	ExpelledHfid                []int `json:"expelledHfid" legend:"base"`                // expelled_hfid
	ExpelledNumber              []int `json:"expelledNumber" legend:"base"`              // expelled_number
	ExpelledPopId               []int `json:"expelledPopId" legend:"base"`               // expelled_pop_id
	PersecutorEnid              int   `json:"persecutorEnid" legend:"base"`              // persecutor_enid
	PersecutorHfid              int   `json:"persecutorHfid" legend:"base"`              // persecutor_hfid
	PropertyConfiscatedFromHfid []int `json:"propertyConfiscatedFromHfid" legend:"base"` // property_confiscated_from_hfid
	ShrineAmountDestroyed       int   `json:"shrineAmountDestroyed" legend:"base"`       // shrine_amount_destroyed
	SiteId                      int   `json:"siteId" legend:"base"`                      // site_id
	TargetEnid                  int   `json:"targetEnid" legend:"base"`                  // target_enid
}

func (x *HistoricalEventEntityPersecuted) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventEntityPersecuted) RelatedToHf(id int) bool {
	return containsInt(x.PropertyConfiscatedFromHfid, id) || x.PersecutorHfid == id || containsInt(x.ExpelledHfid, id)
}

func (x *HistoricalEventEntityPersecuted) CheckFields() {
}

type HistoricalEventEntityPrimaryCriminals struct {
	Action      string `json:"action" legend:"plus"`      // action
	EntityId    int    `json:"entityId" legend:"base"`    // entity_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventEntityPrimaryCriminals) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityPrimaryCriminals) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventEntityPrimaryCriminals) CheckFields() {
}

type HistoricalEventEntityRelocate struct {
	Action      string `json:"action" legend:"plus"`      // action
	EntityId    int    `json:"entityId" legend:"base"`    // entity_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventEntityRelocate) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalEventEntityRelocate) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventEntityRelocate) CheckFields() {
}

type HistoricalEventFailedFrameAttempt struct {
	ConvicterEnid int    `json:"convicterEnid" legend:"base"` // convicter_enid
	Crime         string `json:"crime" legend:"base"`         // crime
	FooledHfid    int    `json:"fooledHfid" legend:"base"`    // fooled_hfid
	FramerHfid    int    `json:"framerHfid" legend:"base"`    // framer_hfid
	PlotterHfid   int    `json:"plotterHfid" legend:"base"`   // plotter_hfid
	TargetHfid    int    `json:"targetHfid" legend:"base"`    // target_hfid
}

func (x *HistoricalEventFailedFrameAttempt) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventFailedFrameAttempt) RelatedToHf(id int) bool {
	return x.FooledHfid == id || x.FramerHfid == id || x.PlotterHfid == id || x.TargetHfid == id
}

func (x *HistoricalEventFailedFrameAttempt) CheckFields() {
}

type HistoricalEventFailedIntrigueCorruption struct {
	Action                    string `json:"action" legend:"base"`                    // action
	AllyDefenseBonus          int    `json:"allyDefenseBonus" legend:"base"`          // ally_defense_bonus
	CoconspiratorBonus        int    `json:"coconspiratorBonus" legend:"base"`        // coconspirator_bonus
	CorruptorHfid             int    `json:"corruptorHfid" legend:"base"`             // corruptor_hfid
	CorruptorIdentity         int    `json:"corruptorIdentity" legend:"base"`         // corruptor_identity
	FailedJudgmentTest        bool   `json:"failedJudgmentTest" legend:"base"`        // failed_judgment_test
	FeatureLayerId            int    `json:"featureLayerId" legend:"base"`            // feature_layer_id
	LureHfid                  int    `json:"lureHfid" legend:"base"`                  // lure_hfid
	Method                    string `json:"method" legend:"base"`                    // method
	RelevantEntityId          int    `json:"relevantEntityId" legend:"base"`          // relevant_entity_id
	RelevantIdForMethod       int    `json:"relevantIdForMethod" legend:"base"`       // relevant_id_for_method
	RelevantPositionProfileId int    `json:"relevantPositionProfileId" legend:"base"` // relevant_position_profile_id
	SiteId                    int    `json:"siteId" legend:"base"`                    // site_id
	SubregionId               int    `json:"subregionId" legend:"base"`               // subregion_id
	TargetHfid                int    `json:"targetHfid" legend:"base"`                // target_hfid
	TargetIdentity            int    `json:"targetIdentity" legend:"base"`            // target_identity
	TopFacet                  string `json:"topFacet" legend:"base"`                  // top_facet
	TopFacetModifier          int    `json:"topFacetModifier" legend:"base"`          // top_facet_modifier
	TopFacetRating            int    `json:"topFacetRating" legend:"base"`            // top_facet_rating
	TopRelationshipFactor     string `json:"topRelationshipFactor" legend:"base"`     // top_relationship_factor
	TopRelationshipModifier   int    `json:"topRelationshipModifier" legend:"base"`   // top_relationship_modifier
	TopRelationshipRating     int    `json:"topRelationshipRating" legend:"base"`     // top_relationship_rating
	TopValue                  string `json:"topValue" legend:"base"`                  // top_value
	TopValueModifier          int    `json:"topValueModifier" legend:"base"`          // top_value_modifier
	TopValueRating            int    `json:"topValueRating" legend:"base"`            // top_value_rating
}

func (x *HistoricalEventFailedIntrigueCorruption) RelatedToEntity(id int) bool {
	return x.CorruptorIdentity == id || x.RelevantEntityId == id || x.TargetIdentity == id
}
func (x *HistoricalEventFailedIntrigueCorruption) RelatedToHf(id int) bool {
	return x.LureHfid == id || x.TargetHfid == id || x.CorruptorHfid == id
}

func (x *HistoricalEventFailedIntrigueCorruption) CheckFields() {
}

type HistoricalEventFieldBattle struct {
	ASupportMercEnid    int    `json:"aSupportMercEnid" legend:"base"`    // a_support_merc_enid
	AttackerCivId       int    `json:"attackerCivId" legend:"base"`       // attacker_civ_id
	AttackerGeneralHfid int    `json:"attackerGeneralHfid" legend:"base"` // attacker_general_hfid
	AttackerMercEnid    int    `json:"attackerMercEnid" legend:"base"`    // attacker_merc_enid
	Coords              string `json:"coords" legend:"base"`              // coords
	DSupportMercEnid    int    `json:"dSupportMercEnid" legend:"base"`    // d_support_merc_enid
	DefenderCivId       int    `json:"defenderCivId" legend:"base"`       // defender_civ_id
	DefenderGeneralHfid int    `json:"defenderGeneralHfid" legend:"base"` // defender_general_hfid
	DefenderMercEnid    int    `json:"defenderMercEnid" legend:"base"`    // defender_merc_enid
	FeatureLayerId      int    `json:"featureLayerId" legend:"base"`      // feature_layer_id
	SubregionId         int    `json:"subregionId" legend:"base"`         // subregion_id
}

func (x *HistoricalEventFieldBattle) RelatedToEntity(id int) bool {
	return x.DefenderCivId == id || x.AttackerCivId == id
}
func (x *HistoricalEventFieldBattle) RelatedToHf(id int) bool {
	return x.DefenderGeneralHfid == id || x.AttackerGeneralHfid == id
}

func (x *HistoricalEventFieldBattle) CheckFields() {
}

type HistoricalEventGamble struct {
	GamblerHfid int `json:"gamblerHfid" legend:"base"` // gambler_hfid
	NewAccount  int `json:"newAccount" legend:"base"`  // new_account
	OldAccount  int `json:"oldAccount" legend:"base"`  // old_account
	SiteId      int `json:"siteId" legend:"base"`      // site_id
	StructureId int `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventGamble) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventGamble) RelatedToHf(id int) bool     { return x.GamblerHfid == id }

func (x *HistoricalEventGamble) CheckFields() {
}

type HistoricalEventHfAbducted struct {
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	SnatcherHfid   int `json:"snatcherHfid" legend:"base"`   // snatcher_hfid
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
	TargetHfid     int `json:"targetHfid" legend:"base"`     // target_hfid
}

func (x *HistoricalEventHfAbducted) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfAbducted) RelatedToHf(id int) bool {
	return x.SnatcherHfid == id || x.TargetHfid == id
}

func (x *HistoricalEventHfAbducted) CheckFields() {
}

type HistoricalEventHfAttackedSite struct {
	AttackerHfid  int `json:"attackerHfid" legend:"base"`  // attacker_hfid
	DefenderCivId int `json:"defenderCivId" legend:"base"` // defender_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventHfAttackedSite) RelatedToEntity(id int) bool {
	return x.SiteCivId == id || x.DefenderCivId == id
}
func (x *HistoricalEventHfAttackedSite) RelatedToHf(id int) bool { return x.AttackerHfid == id }

func (x *HistoricalEventHfAttackedSite) CheckFields() {
}

type HistoricalEventHfConfronted struct {
	Coords         string   `json:"coords" legend:"base"`         // coords
	FeatureLayerId int      `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int      `json:"hfid" legend:"base"`           // hfid
	Reason         []string `json:"reason" legend:"base"`         // reason
	SiteId         int      `json:"siteId" legend:"base"`         // site_id
	Situation      string   `json:"situation" legend:"base"`      // situation
	SubregionId    int      `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfConfronted) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfConfronted) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventHfConfronted) CheckFields() {
}

type HistoricalEventHfConvicted struct {
	CoconspiratorHfid              int    `json:"coconspiratorHfid" legend:"base"`              // coconspirator_hfid
	ConfessedAfterApbArrestEnid    int    `json:"confessedAfterApbArrestEnid" legend:"base"`    // confessed_after_apb_arrest_enid
	ContactHfid                    int    `json:"contactHfid" legend:"base"`                    // contact_hfid
	ConvictIsContact               bool   `json:"convictIsContact" legend:"base"`               // convict_is_contact
	ConvictedHfid                  int    `json:"convictedHfid" legend:"base"`                  // convicted_hfid
	ConvicterEnid                  int    `json:"convicterEnid" legend:"base"`                  // convicter_enid
	CorruptConvicterHfid           int    `json:"corruptConvicterHfid" legend:"base"`           // corrupt_convicter_hfid
	Crime                          string `json:"crime" legend:"base"`                          // crime
	DeathPenalty                   bool   `json:"deathPenalty" legend:"base"`                   // death_penalty
	DidNotRevealAllInInterrogation bool   `json:"didNotRevealAllInInterrogation" legend:"base"` // did_not_reveal_all_in_interrogation
	Exiled                         bool   `json:"exiled" legend:"base"`                         // exiled
	FooledHfid                     int    `json:"fooledHfid" legend:"base"`                     // fooled_hfid
	FramerHfid                     int    `json:"framerHfid" legend:"base"`                     // framer_hfid
	HeldFirmInInterrogation        bool   `json:"heldFirmInInterrogation" legend:"base"`        // held_firm_in_interrogation
	ImplicatedHfid                 []int  `json:"implicatedHfid" legend:"base"`                 // implicated_hfid
	InterrogatorHfid               int    `json:"interrogatorHfid" legend:"base"`               // interrogator_hfid
	PlotterHfid                    int    `json:"plotterHfid" legend:"base"`                    // plotter_hfid
	PrisonMonths                   int    `json:"prisonMonths" legend:"base"`                   // prison_months
	SurveiledCoconspirator         bool   `json:"surveiledCoconspirator" legend:"base"`         // surveiled_coconspirator
	SurveiledContact               bool   `json:"surveiledContact" legend:"base"`               // surveiled_contact
	SurveiledConvicted             bool   `json:"surveiledConvicted" legend:"base"`             // surveiled_convicted
	SurveiledTarget                bool   `json:"surveiledTarget" legend:"base"`                // surveiled_target
	TargetHfid                     int    `json:"targetHfid" legend:"base"`                     // target_hfid
	WrongfulConviction             bool   `json:"wrongfulConviction" legend:"base"`             // wrongful_conviction
}

func (x *HistoricalEventHfConvicted) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfConvicted) RelatedToHf(id int) bool {
	return x.ConvictedHfid == id || containsInt(x.ImplicatedHfid, id) || x.ContactHfid == id || x.FooledHfid == id || x.FramerHfid == id || x.InterrogatorHfid == id || x.TargetHfid == id || x.CoconspiratorHfid == id || x.CorruptConvicterHfid == id || x.PlotterHfid == id
}

func (x *HistoricalEventHfConvicted) CheckFields() {
}

type HistoricalEventHfDestroyedSite struct {
	AttackerHfid  int `json:"attackerHfid" legend:"base"`  // attacker_hfid
	DefenderCivId int `json:"defenderCivId" legend:"base"` // defender_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventHfDestroyedSite) RelatedToEntity(id int) bool {
	return x.DefenderCivId == id || x.SiteCivId == id
}
func (x *HistoricalEventHfDestroyedSite) RelatedToHf(id int) bool { return x.AttackerHfid == id }

func (x *HistoricalEventHfDestroyedSite) CheckFields() {
}

type HistoricalEventHfDied struct {
	Cause               string `json:"cause" legend:"base"`               // cause
	DeathCause          string `json:"deathCause" legend:"plus"`          // death_cause
	FeatureLayerId      int    `json:"featureLayerId" legend:"base"`      // feature_layer_id
	Hfid                int    `json:"hfid" legend:"base"`                // hfid
	ItemType            string `json:"itemType" legend:"plus"`            // item_type
	SiteId              int    `json:"siteId" legend:"base"`              // site_id
	SlayerCaste         string `json:"slayerCaste" legend:"both"`         // slayer_caste
	SlayerHfid          int    `json:"slayerHfid" legend:"base"`          // slayer_hfid
	SlayerItemId        int    `json:"slayerItemId" legend:"base"`        // slayer_item_id
	SlayerRace          string `json:"slayerRace" legend:"both"`          // slayer_race
	SlayerShooterItemId int    `json:"slayerShooterItemId" legend:"base"` // slayer_shooter_item_id
	SubregionId         int    `json:"subregionId" legend:"base"`         // subregion_id
}

func (x *HistoricalEventHfDied) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfDied) RelatedToHf(id int) bool     { return x.Hfid == id || x.SlayerHfid == id }

func (x *HistoricalEventHfDied) CheckFields() {
	if x.ItemType != x.Cause && x.ItemType != "" && x.Cause != "" {
		sameFields["HistoricalEventHfDied"]["ItemType"]["Cause"] = false
	}
	if x.DeathCause != x.Cause && x.DeathCause != "" && x.Cause != "" {
		sameFields["HistoricalEventHfDied"]["DeathCause"]["Cause"] = false
	}
}

type HistoricalEventHfDisturbedStructure struct {
	Action      string `json:"action" legend:"plus"`      // action
	HistFigId   int    `json:"histFigId" legend:"base"`   // hist_fig_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventHfDisturbedStructure) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfDisturbedStructure) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventHfDisturbedStructure) CheckFields() {
}

type HistoricalEventHfDoesInteraction struct {
	DoerHfid          int    `json:"doerHfid" legend:"base"`          // doer_hfid
	Interaction       string `json:"interaction" legend:"base"`       // interaction
	InteractionAction string `json:"interactionAction" legend:"plus"` // interaction_action
	Region            int    `json:"region" legend:"plus"`            // region
	Site              int    `json:"site" legend:"plus"`              // site
	Source            int    `json:"source" legend:"plus"`            // source
	TargetHfid        int    `json:"targetHfid" legend:"base"`        // target_hfid
}

func (x *HistoricalEventHfDoesInteraction) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfDoesInteraction) RelatedToHf(id int) bool {
	return x.DoerHfid == id || x.TargetHfid == id
}

func (x *HistoricalEventHfDoesInteraction) CheckFields() {
	if x.InteractionAction != x.Interaction && x.InteractionAction != "" && x.Interaction != "" {
		sameFields["HistoricalEventHfDoesInteraction"]["InteractionAction"]["Interaction"] = false
	}
	if x.Site != x.DoerHfid && x.Site != 0 && x.DoerHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Site"]["DoerHfid"] = false
	}
	if x.Site != x.TargetHfid && x.Site != 0 && x.TargetHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Site"]["TargetHfid"] = false
	}
	if x.Source != x.TargetHfid && x.Source != 0 && x.TargetHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Source"]["TargetHfid"] = false
	}
	if x.Source != x.DoerHfid && x.Source != 0 && x.DoerHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Source"]["DoerHfid"] = false
	}
	if x.Region != x.TargetHfid && x.Region != 0 && x.TargetHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Region"]["TargetHfid"] = false
	}
	if x.Region != x.DoerHfid && x.Region != 0 && x.DoerHfid != 0 {
		sameFields["HistoricalEventHfDoesInteraction"]["Region"]["DoerHfid"] = false
	}
}

type HistoricalEventHfEnslaved struct {
	EnslavedHfid  int `json:"enslavedHfid" legend:"base"`  // enslaved_hfid
	MovedToSiteId int `json:"movedToSiteId" legend:"base"` // moved_to_site_id
	PayerEntityId int `json:"payerEntityId" legend:"base"` // payer_entity_id
	SellerHfid    int `json:"sellerHfid" legend:"base"`    // seller_hfid
}

func (x *HistoricalEventHfEnslaved) RelatedToEntity(id int) bool { return x.PayerEntityId == id }
func (x *HistoricalEventHfEnslaved) RelatedToHf(id int) bool {
	return x.EnslavedHfid == id || x.SellerHfid == id
}

func (x *HistoricalEventHfEnslaved) CheckFields() {
}

type HistoricalEventHfEquipmentPurchase struct {
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	GroupHfid      int `json:"groupHfid" legend:"base"`      // group_hfid
	Quality        int `json:"quality" legend:"base"`        // quality
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	StructureId    int `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfEquipmentPurchase) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfEquipmentPurchase) RelatedToHf(id int) bool     { return x.GroupHfid == id }

func (x *HistoricalEventHfEquipmentPurchase) CheckFields() {
}

type HistoricalEventHfGainsSecretGoal struct {
	Hfid       int    `json:"hfid" legend:"base"`       // hfid
	SecretGoal string `json:"secretGoal" legend:"base"` // secret_goal
}

func (x *HistoricalEventHfGainsSecretGoal) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfGainsSecretGoal) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventHfGainsSecretGoal) CheckFields() {
}

type HistoricalEventHfInterrogated struct {
	ArrestingEnid           int  `json:"arrestingEnid" legend:"base"`           // arresting_enid
	HeldFirmInInterrogation bool `json:"heldFirmInInterrogation" legend:"base"` // held_firm_in_interrogation
	InterrogatorHfid        int  `json:"interrogatorHfid" legend:"base"`        // interrogator_hfid
	TargetHfid              int  `json:"targetHfid" legend:"base"`              // target_hfid
	WantedAndRecognized     bool `json:"wantedAndRecognized" legend:"base"`     // wanted_and_recognized
}

func (x *HistoricalEventHfInterrogated) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfInterrogated) RelatedToHf(id int) bool {
	return x.InterrogatorHfid == id || x.TargetHfid == id
}

func (x *HistoricalEventHfInterrogated) CheckFields() {
}

type HistoricalEventHfLearnsSecret struct {
	ArtifactId  int    `json:"artifactId" legend:"base"`  // artifact_id
	Interaction string `json:"interaction" legend:"base"` // interaction
	SecretText  string `json:"secretText" legend:"plus"`  // secret_text
	StudentHfid int    `json:"studentHfid" legend:"base"` // student_hfid
	TeacherHfid int    `json:"teacherHfid" legend:"base"` // teacher_hfid
}

func (x *HistoricalEventHfLearnsSecret) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfLearnsSecret) RelatedToHf(id int) bool {
	return x.TeacherHfid == id || x.StudentHfid == id
}

func (x *HistoricalEventHfLearnsSecret) CheckFields() {
	if x.SecretText != x.Interaction && x.SecretText != "" && x.Interaction != "" {
		sameFields["HistoricalEventHfLearnsSecret"]["SecretText"]["Interaction"] = false
	}
}

type HistoricalEventHfNewPet struct {
	Coords         string `json:"coords" legend:"base"`         // coords
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	GroupHfid      int    `json:"groupHfid" legend:"base"`      // group_hfid
	Pets           string `json:"pets" legend:"plus"`           // pets
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfNewPet) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfNewPet) RelatedToHf(id int) bool     { return x.GroupHfid == id }

func (x *HistoricalEventHfNewPet) CheckFields() {
	if x.Pets != x.Coords && x.Pets != "" && x.Coords != "" {
		sameFields["HistoricalEventHfNewPet"]["Pets"]["Coords"] = false
	}
}

type HistoricalEventHfPerformedHorribleExperiments struct {
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	GroupHfid      int `json:"groupHfid" legend:"base"`      // group_hfid
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	StructureId    int `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfPerformedHorribleExperiments) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfPerformedHorribleExperiments) RelatedToHf(id int) bool {
	return x.GroupHfid == id
}

func (x *HistoricalEventHfPerformedHorribleExperiments) CheckFields() {
}

type HistoricalEventHfPrayedInsideStructure struct {
	Action      string `json:"action" legend:"plus"`      // action
	HistFigId   int    `json:"histFigId" legend:"base"`   // hist_fig_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventHfPrayedInsideStructure) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfPrayedInsideStructure) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventHfPrayedInsideStructure) CheckFields() {
}

type HistoricalEventHfPreach struct {
	Entity1     int    `json:"entity1" legend:"base"`     // entity_1
	Entity2     int    `json:"entity2" legend:"base"`     // entity_2
	SiteHfid    int    `json:"siteHfid" legend:"base"`    // site_hfid
	SpeakerHfid int    `json:"speakerHfid" legend:"base"` // speaker_hfid
	Topic       string `json:"topic" legend:"base"`       // topic
}

func (x *HistoricalEventHfPreach) RelatedToEntity(id int) bool {
	return x.Entity1 == id || x.Entity2 == id
}
func (x *HistoricalEventHfPreach) RelatedToHf(id int) bool {
	return x.SiteHfid == id || x.SpeakerHfid == id
}

func (x *HistoricalEventHfPreach) CheckFields() {
}

type HistoricalEventHfProfanedStructure struct {
	Action      string `json:"action" legend:"plus"`      // action
	HistFigId   int    `json:"histFigId" legend:"base"`   // hist_fig_id
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	StructureId int    `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventHfProfanedStructure) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfProfanedStructure) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventHfProfanedStructure) CheckFields() {
}

type HistoricalEventHfRecruitedUnitTypeForEntity struct {
	EntityId       int    `json:"entityId" legend:"base"`       // entity_id
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int    `json:"hfid" legend:"base"`           // hfid
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	UnitType       string `json:"unitType" legend:"base"`       // unit_type
}

func (x *HistoricalEventHfRecruitedUnitTypeForEntity) RelatedToEntity(id int) bool {
	return x.EntityId == id
}
func (x *HistoricalEventHfRecruitedUnitTypeForEntity) RelatedToHf(id int) bool { return x.Hfid == id }

func (x *HistoricalEventHfRecruitedUnitTypeForEntity) CheckFields() {
}

type HistoricalEventHfRelationshipDenied struct {
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Reason         string `json:"reason" legend:"base"`         // reason
	ReasonId       int    `json:"reasonId" legend:"base"`       // reason_id
	Relationship   string `json:"relationship" legend:"base"`   // relationship
	SeekerHfid     int    `json:"seekerHfid" legend:"base"`     // seeker_hfid
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	TargetHfid     int    `json:"targetHfid" legend:"base"`     // target_hfid
}

func (x *HistoricalEventHfRelationshipDenied) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfRelationshipDenied) RelatedToHf(id int) bool {
	return x.TargetHfid == id || x.SeekerHfid == id
}

func (x *HistoricalEventHfRelationshipDenied) CheckFields() {
}

type HistoricalEventHfReunion struct {
	FeatureLayerId int   `json:"featureLayerId" legend:"base"` // feature_layer_id
	Group1Hfid     int   `json:"group1Hfid" legend:"base"`     // group_1_hfid
	Group2Hfid     []int `json:"group2Hfid" legend:"base"`     // group_2_hfid
	SiteId         int   `json:"siteId" legend:"base"`         // site_id
	SubregionId    int   `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfReunion) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfReunion) RelatedToHf(id int) bool {
	return x.Group1Hfid == id || containsInt(x.Group2Hfid, id)
}

func (x *HistoricalEventHfReunion) CheckFields() {
}

type HistoricalEventHfRevived struct {
	ActorHfid      int  `json:"actorHfid" legend:"base"`      // actor_hfid
	Disturbance    bool `json:"disturbance" legend:"base"`    // disturbance
	FeatureLayerId int  `json:"featureLayerId" legend:"base"` // feature_layer_id
	Hfid           int  `json:"hfid" legend:"base"`           // hfid
	SiteId         int  `json:"siteId" legend:"base"`         // site_id
	SubregionId    int  `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfRevived) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfRevived) RelatedToHf(id int) bool     { return x.Hfid == id || x.ActorHfid == id }

func (x *HistoricalEventHfRevived) CheckFields() {
}

type HistoricalEventHfSimpleBattleEvent struct {
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	Group1Hfid     int    `json:"group1Hfid" legend:"base"`     // group_1_hfid
	Group2Hfid     int    `json:"group2Hfid" legend:"base"`     // group_2_hfid
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	Subtype        string `json:"subtype" legend:"base"`        // subtype
}

func (x *HistoricalEventHfSimpleBattleEvent) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfSimpleBattleEvent) RelatedToHf(id int) bool {
	return x.Group1Hfid == id || x.Group2Hfid == id
}

func (x *HistoricalEventHfSimpleBattleEvent) CheckFields() {
}

type HistoricalEventHfTravel struct {
	Coords         string `json:"coords" legend:"base"`         // coords
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	GroupHfid      []int  `json:"groupHfid" legend:"base"`      // group_hfid
	Return         bool   `json:"return" legend:"base"`         // return
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfTravel) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfTravel) RelatedToHf(id int) bool     { return containsInt(x.GroupHfid, id) }

func (x *HistoricalEventHfTravel) CheckFields() {
}

type HistoricalEventHfViewedArtifact struct {
	ArtifactId  int `json:"artifactId" legend:"base"`  // artifact_id
	HistFigId   int `json:"histFigId" legend:"base"`   // hist_fig_id
	SiteId      int `json:"siteId" legend:"base"`      // site_id
	StructureId int `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventHfViewedArtifact) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfViewedArtifact) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventHfViewedArtifact) CheckFields() {
}

type HistoricalEventHfWounded struct {
	BodyPart       int    `json:"bodyPart" legend:"plus"`       // body_part
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	InjuryType     string `json:"injuryType" legend:"plus"`     // injury_type
	PartLost       string `json:"partLost" legend:"plus"`       // part_lost
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	WoundeeCaste   int    `json:"woundeeCaste" legend:"plus"`   // woundee_caste
	WoundeeHfid    int    `json:"woundeeHfid" legend:"base"`    // woundee_hfid
	WoundeeRace    int    `json:"woundeeRace" legend:"plus"`    // woundee_race
	WounderHfid    int    `json:"wounderHfid" legend:"base"`    // wounder_hfid
}

func (x *HistoricalEventHfWounded) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHfWounded) RelatedToHf(id int) bool {
	return x.WoundeeHfid == id || x.WounderHfid == id
}

func (x *HistoricalEventHfWounded) CheckFields() {
	if x.WoundeeRace != x.WoundeeHfid && x.WoundeeRace != 0 && x.WoundeeHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeRace"]["WoundeeHfid"] = false
	}
	if x.WoundeeRace != x.WounderHfid && x.WoundeeRace != 0 && x.WounderHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeRace"]["WounderHfid"] = false
	}
	if x.WoundeeRace != x.FeatureLayerId && x.WoundeeRace != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeRace"]["FeatureLayerId"] = false
	}
	if x.WoundeeRace != x.SiteId && x.WoundeeRace != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeRace"]["SiteId"] = false
	}
	if x.WoundeeRace != x.SubregionId && x.WoundeeRace != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeRace"]["SubregionId"] = false
	}
	if x.BodyPart != x.WoundeeHfid && x.BodyPart != 0 && x.WoundeeHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["BodyPart"]["WoundeeHfid"] = false
	}
	if x.BodyPart != x.WounderHfid && x.BodyPart != 0 && x.WounderHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["BodyPart"]["WounderHfid"] = false
	}
	if x.BodyPart != x.SubregionId && x.BodyPart != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventHfWounded"]["BodyPart"]["SubregionId"] = false
	}
	if x.BodyPart != x.FeatureLayerId && x.BodyPart != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventHfWounded"]["BodyPart"]["FeatureLayerId"] = false
	}
	if x.BodyPart != x.SiteId && x.BodyPart != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventHfWounded"]["BodyPart"]["SiteId"] = false
	}
	if x.WoundeeCaste != x.FeatureLayerId && x.WoundeeCaste != 0 && x.FeatureLayerId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeCaste"]["FeatureLayerId"] = false
	}
	if x.WoundeeCaste != x.SiteId && x.WoundeeCaste != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeCaste"]["SiteId"] = false
	}
	if x.WoundeeCaste != x.SubregionId && x.WoundeeCaste != 0 && x.SubregionId != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeCaste"]["SubregionId"] = false
	}
	if x.WoundeeCaste != x.WoundeeHfid && x.WoundeeCaste != 0 && x.WoundeeHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeCaste"]["WoundeeHfid"] = false
	}
	if x.WoundeeCaste != x.WounderHfid && x.WoundeeCaste != 0 && x.WounderHfid != 0 {
		sameFields["HistoricalEventHfWounded"]["WoundeeCaste"]["WounderHfid"] = false
	}
}

type HistoricalEventHfsFormedIntrigueRelationship struct {
	Action                    string `json:"action" legend:"base"`                    // action
	AllyDefenseBonus          int    `json:"allyDefenseBonus" legend:"base"`          // ally_defense_bonus
	Circumstance              string `json:"circumstance" legend:"base"`              // circumstance
	CircumstanceId            int    `json:"circumstanceId" legend:"base"`            // circumstance_id
	CoconspiratorBonus        int    `json:"coconspiratorBonus" legend:"base"`        // coconspirator_bonus
	CorruptorHfid             int    `json:"corruptorHfid" legend:"base"`             // corruptor_hfid
	CorruptorIdentity         int    `json:"corruptorIdentity" legend:"base"`         // corruptor_identity
	CorruptorSeenAs           string `json:"corruptorSeenAs" legend:"base"`           // corruptor_seen_as
	FailedJudgmentTest        bool   `json:"failedJudgmentTest" legend:"base"`        // failed_judgment_test
	FeatureLayerId            int    `json:"featureLayerId" legend:"base"`            // feature_layer_id
	LureHfid                  int    `json:"lureHfid" legend:"base"`                  // lure_hfid
	Method                    string `json:"method" legend:"base"`                    // method
	RelevantEntityId          int    `json:"relevantEntityId" legend:"base"`          // relevant_entity_id
	RelevantIdForMethod       int    `json:"relevantIdForMethod" legend:"base"`       // relevant_id_for_method
	RelevantPositionProfileId int    `json:"relevantPositionProfileId" legend:"base"` // relevant_position_profile_id
	SiteId                    int    `json:"siteId" legend:"base"`                    // site_id
	SubregionId               int    `json:"subregionId" legend:"base"`               // subregion_id
	Successful                bool   `json:"successful" legend:"base"`                // successful
	TargetHfid                int    `json:"targetHfid" legend:"base"`                // target_hfid
	TargetIdentity            int    `json:"targetIdentity" legend:"base"`            // target_identity
	TargetSeenAs              string `json:"targetSeenAs" legend:"base"`              // target_seen_as
	TopFacet                  string `json:"topFacet" legend:"base"`                  // top_facet
	TopFacetModifier          int    `json:"topFacetModifier" legend:"base"`          // top_facet_modifier
	TopFacetRating            int    `json:"topFacetRating" legend:"base"`            // top_facet_rating
	TopRelationshipFactor     string `json:"topRelationshipFactor" legend:"base"`     // top_relationship_factor
	TopRelationshipModifier   int    `json:"topRelationshipModifier" legend:"base"`   // top_relationship_modifier
	TopRelationshipRating     int    `json:"topRelationshipRating" legend:"base"`     // top_relationship_rating
	TopValue                  string `json:"topValue" legend:"base"`                  // top_value
	TopValueModifier          int    `json:"topValueModifier" legend:"base"`          // top_value_modifier
	TopValueRating            int    `json:"topValueRating" legend:"base"`            // top_value_rating
}

func (x *HistoricalEventHfsFormedIntrigueRelationship) RelatedToEntity(id int) bool {
	return x.RelevantEntityId == id || x.CorruptorIdentity == id || x.TargetIdentity == id
}
func (x *HistoricalEventHfsFormedIntrigueRelationship) RelatedToHf(id int) bool {
	return x.TargetHfid == id || x.LureHfid == id || x.CorruptorHfid == id
}

func (x *HistoricalEventHfsFormedIntrigueRelationship) CheckFields() {
}

type HistoricalEventHfsFormedReputationRelationship struct {
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	HfRep1Of2      string `json:"hfRep1Of2" legend:"base"`      // hf_rep_1_of_2
	HfRep2Of1      string `json:"hfRep2Of1" legend:"base"`      // hf_rep_2_of_1
	Hfid1          int    `json:"hfid1" legend:"base"`          // hfid1
	Hfid2          int    `json:"hfid2" legend:"base"`          // hfid2
	IdentityId1    int    `json:"identityId1" legend:"base"`    // identity_id1
	IdentityId2    int    `json:"identityId2" legend:"base"`    // identity_id2
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventHfsFormedReputationRelationship) RelatedToEntity(id int) bool {
	return x.IdentityId1 == id || x.IdentityId2 == id
}
func (x *HistoricalEventHfsFormedReputationRelationship) RelatedToHf(id int) bool {
	return x.Hfid2 == id || x.Hfid1 == id
}

func (x *HistoricalEventHfsFormedReputationRelationship) CheckFields() {
}

type HistoricalEventHolyCityDeclaration struct {
	ReligionId int `json:"religionId" legend:"base"` // religion_id
	SiteId     int `json:"siteId" legend:"base"`     // site_id
}

func (x *HistoricalEventHolyCityDeclaration) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventHolyCityDeclaration) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventHolyCityDeclaration) CheckFields() {
}

type HistoricalEventItemStolen struct {
	Circumstance   *HistoricalEventItemStolenCircumstance `json:"circumstance" legend:"both"`   // circumstance
	CircumstanceId int                                    `json:"circumstanceId" legend:"base"` // circumstance_id
	Entity         int                                    `json:"entity" legend:"plus"`         // entity
	Histfig        int                                    `json:"histfig" legend:"plus"`        // histfig
	Item           int                                    `json:"item" legend:"plus"`           // item
	ItemSubtype    string                                 `json:"itemSubtype" legend:"plus"`    // item_subtype
	ItemType       string                                 `json:"itemType" legend:"plus"`       // item_type
	Mat            string                                 `json:"mat" legend:"plus"`            // mat
	Matindex       int                                    `json:"matindex" legend:"plus"`       // matindex
	Mattype        int                                    `json:"mattype" legend:"plus"`        // mattype
	Site           int                                    `json:"site" legend:"plus"`           // site
	StashSite      int                                    `json:"stashSite" legend:"plus"`      // stash_site
	Structure      int                                    `json:"structure" legend:"plus"`      // structure
	TheftMethod    string                                 `json:"theftMethod" legend:"plus"`    // theft_method
}

func (x *HistoricalEventItemStolen) RelatedToEntity(id int) bool { return x.Entity == id }
func (x *HistoricalEventItemStolen) RelatedToHf(id int) bool     { return x.Histfig == id }

func (x *HistoricalEventItemStolen) CheckFields() {
	if x.Matindex != x.CircumstanceId && x.Matindex != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Matindex"]["CircumstanceId"] = false
	}
	if x.StashSite != x.CircumstanceId && x.StashSite != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["StashSite"]["CircumstanceId"] = false
	}
	if x.Mattype != x.CircumstanceId && x.Mattype != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Mattype"]["CircumstanceId"] = false
	}
	if x.Site != x.CircumstanceId && x.Site != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Site"]["CircumstanceId"] = false
	}
	if x.Structure != x.CircumstanceId && x.Structure != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Structure"]["CircumstanceId"] = false
	}
	if x.Entity != x.CircumstanceId && x.Entity != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Entity"]["CircumstanceId"] = false
	}
	if x.Histfig != x.CircumstanceId && x.Histfig != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Histfig"]["CircumstanceId"] = false
	}
	if x.Item != x.CircumstanceId && x.Item != 0 && x.CircumstanceId != 0 {
		sameFields["HistoricalEventItemStolen"]["Item"]["CircumstanceId"] = false
	}
}

type HistoricalEventItemStolenCircumstance struct {
	Defeated            int    `json:"defeated" legend:"plus"`            // defeated
	HistEventCollection int    `json:"histEventCollection" legend:"plus"` // hist_event_collection
	Murdered            int    `json:"murdered" legend:"plus"`            // murdered
	Type                string `json:"type" legend:"plus"`                // type
}

func (x *HistoricalEventItemStolenCircumstance) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventItemStolenCircumstance) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventItemStolenCircumstance) CheckFields() {
}

type HistoricalEventKnowledgeDiscovered struct {
	First     bool   `json:"first" legend:"base"`     // first
	Hfid      int    `json:"hfid" legend:"base"`      // hfid
	Knowledge string `json:"knowledge" legend:"base"` // knowledge
}

func (x *HistoricalEventKnowledgeDiscovered) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventKnowledgeDiscovered) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventKnowledgeDiscovered) CheckFields() {
}

type HistoricalEventMasterpieceItem struct {
	EntityId    int    `json:"entityId" legend:"base"`    // entity_id
	Hfid        int    `json:"hfid" legend:"base"`        // hfid
	ItemId      int    `json:"itemId" legend:"plus"`      // item_id
	ItemType    string `json:"itemType" legend:"plus"`    // item_type
	Maker       int    `json:"maker" legend:"plus"`       // maker
	MakerEntity int    `json:"makerEntity" legend:"plus"` // maker_entity
	Mat         string `json:"mat" legend:"plus"`         // mat
	Site        int    `json:"site" legend:"plus"`        // site
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	SkillAtTime string `json:"skillAtTime" legend:"both"` // skill_at_time
}

func (x *HistoricalEventMasterpieceItem) RelatedToEntity(id int) bool {
	return x.EntityId == id || x.MakerEntity == id
}
func (x *HistoricalEventMasterpieceItem) RelatedToHf(id int) bool { return x.Hfid == id }

func (x *HistoricalEventMasterpieceItem) CheckFields() {
	if x.MakerEntity != x.Hfid && x.MakerEntity != 0 && x.Hfid != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["MakerEntity"]["Hfid"] = false
	}
	if x.MakerEntity != x.SiteId && x.MakerEntity != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["MakerEntity"]["SiteId"] = false
	}
	if x.MakerEntity != x.EntityId && x.MakerEntity != 0 && x.EntityId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["MakerEntity"]["EntityId"] = false
	}
	if x.ItemId != x.SiteId && x.ItemId != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["ItemId"]["SiteId"] = false
	}
	if x.ItemId != x.EntityId && x.ItemId != 0 && x.EntityId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["ItemId"]["EntityId"] = false
	}
	if x.ItemId != x.Hfid && x.ItemId != 0 && x.Hfid != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["ItemId"]["Hfid"] = false
	}
	if x.Maker != x.SiteId && x.Maker != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Maker"]["SiteId"] = false
	}
	if x.Maker != x.EntityId && x.Maker != 0 && x.EntityId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Maker"]["EntityId"] = false
	}
	if x.Maker != x.Hfid && x.Maker != 0 && x.Hfid != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Maker"]["Hfid"] = false
	}
	if x.Site != x.SiteId && x.Site != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Site"]["SiteId"] = false
	}
	if x.Site != x.EntityId && x.Site != 0 && x.EntityId != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Site"]["EntityId"] = false
	}
	if x.Site != x.Hfid && x.Site != 0 && x.Hfid != 0 {
		sameFields["HistoricalEventMasterpieceItem"]["Site"]["Hfid"] = false
	}
}

type HistoricalEventMerchant struct {
	DepotEntityId  int `json:"depotEntityId" legend:"base"`  // depot_entity_id
	Destination    int `json:"destination" legend:"plus"`    // destination
	Site           int `json:"site" legend:"plus"`           // site
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	Source         int `json:"source" legend:"plus"`         // source
	TraderEntityId int `json:"traderEntityId" legend:"base"` // trader_entity_id
}

func (x *HistoricalEventMerchant) RelatedToEntity(id int) bool {
	return x.DepotEntityId == id || x.TraderEntityId == id
}
func (x *HistoricalEventMerchant) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventMerchant) CheckFields() {
	if x.Destination != x.SiteId && x.Destination != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMerchant"]["Destination"]["SiteId"] = false
	}
	if x.Destination != x.TraderEntityId && x.Destination != 0 && x.TraderEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Destination"]["TraderEntityId"] = false
	}
	if x.Destination != x.DepotEntityId && x.Destination != 0 && x.DepotEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Destination"]["DepotEntityId"] = false
	}
	if x.Site != x.DepotEntityId && x.Site != 0 && x.DepotEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Site"]["DepotEntityId"] = false
	}
	if x.Site != x.SiteId && x.Site != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMerchant"]["Site"]["SiteId"] = false
	}
	if x.Site != x.TraderEntityId && x.Site != 0 && x.TraderEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Site"]["TraderEntityId"] = false
	}
	if x.Source != x.SiteId && x.Source != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventMerchant"]["Source"]["SiteId"] = false
	}
	if x.Source != x.TraderEntityId && x.Source != 0 && x.TraderEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Source"]["TraderEntityId"] = false
	}
	if x.Source != x.DepotEntityId && x.Source != 0 && x.DepotEntityId != 0 {
		sameFields["HistoricalEventMerchant"]["Source"]["DepotEntityId"] = false
	}
}

type HistoricalEventModifiedBuilding struct {
	Modification string `json:"modification" legend:"base"` // modification
	ModifierHfid int    `json:"modifierHfid" legend:"base"` // modifier_hfid
	SiteId       int    `json:"siteId" legend:"base"`       // site_id
	StructureId  int    `json:"structureId" legend:"base"`  // structure_id
}

func (x *HistoricalEventModifiedBuilding) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventModifiedBuilding) RelatedToHf(id int) bool     { return x.ModifierHfid == id }

func (x *HistoricalEventModifiedBuilding) CheckFields() {
}

type HistoricalEventMusicalFormCreated struct {
	Circumstance   string `json:"circumstance" legend:"base"`   // circumstance
	CircumstanceId int    `json:"circumstanceId" legend:"base"` // circumstance_id
	FormId         int    `json:"formId" legend:"base"`         // form_id
	HistFigureId   int    `json:"histFigureId" legend:"base"`   // hist_figure_id
	Reason         string `json:"reason" legend:"base"`         // reason
	ReasonId       int    `json:"reasonId" legend:"base"`       // reason_id
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
}

func (x *HistoricalEventMusicalFormCreated) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventMusicalFormCreated) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventMusicalFormCreated) CheckFields() {
}

type HistoricalEventNewSiteLeader struct {
	AttackerCivId int `json:"attackerCivId" legend:"base"` // attacker_civ_id
	DefenderCivId int `json:"defenderCivId" legend:"base"` // defender_civ_id
	NewLeaderHfid int `json:"newLeaderHfid" legend:"base"` // new_leader_hfid
	NewSiteCivId  int `json:"newSiteCivId" legend:"base"`  // new_site_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventNewSiteLeader) RelatedToEntity(id int) bool {
	return x.SiteCivId == id || x.AttackerCivId == id || x.DefenderCivId == id || x.NewSiteCivId == id
}
func (x *HistoricalEventNewSiteLeader) RelatedToHf(id int) bool { return x.NewLeaderHfid == id }

func (x *HistoricalEventNewSiteLeader) CheckFields() {
}

type HistoricalEventPeaceAccepted struct {
	Destination int    `json:"destination" legend:"plus"` // destination
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	Source      int    `json:"source" legend:"plus"`      // source
	Topic       string `json:"topic" legend:"plus"`       // topic
}

func (x *HistoricalEventPeaceAccepted) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventPeaceAccepted) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventPeaceAccepted) CheckFields() {
	if x.Destination != x.SiteId && x.Destination != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventPeaceAccepted"]["Destination"]["SiteId"] = false
	}
	if x.Source != x.SiteId && x.Source != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventPeaceAccepted"]["Source"]["SiteId"] = false
	}
}

type HistoricalEventPeaceRejected struct {
	Destination int    `json:"destination" legend:"plus"` // destination
	SiteId      int    `json:"siteId" legend:"base"`      // site_id
	Source      int    `json:"source" legend:"plus"`      // source
	Topic       string `json:"topic" legend:"plus"`       // topic
}

func (x *HistoricalEventPeaceRejected) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventPeaceRejected) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventPeaceRejected) CheckFields() {
	if x.Source != x.SiteId && x.Source != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventPeaceRejected"]["Source"]["SiteId"] = false
	}
	if x.Destination != x.SiteId && x.Destination != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventPeaceRejected"]["Destination"]["SiteId"] = false
	}
}

type HistoricalEventPerformance struct {
	CivId          int `json:"civId" legend:"base"`          // civ_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	OccasionId     int `json:"occasionId" legend:"base"`     // occasion_id
	ScheduleId     int `json:"scheduleId" legend:"base"`     // schedule_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventPerformance) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventPerformance) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventPerformance) CheckFields() {
}

type HistoricalEventPlunderedSite struct {
	AttackerCivId int  `json:"attackerCivId" legend:"base"` // attacker_civ_id
	DefenderCivId int  `json:"defenderCivId" legend:"base"` // defender_civ_id
	Detected      bool `json:"detected" legend:"base"`      // detected
	SiteCivId     int  `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int  `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventPlunderedSite) RelatedToEntity(id int) bool {
	return x.AttackerCivId == id || x.DefenderCivId == id || x.SiteCivId == id
}
func (x *HistoricalEventPlunderedSite) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventPlunderedSite) CheckFields() {
}

type HistoricalEventPoeticFormCreated struct {
	Circumstance string `json:"circumstance" legend:"base"` // circumstance
	FormId       int    `json:"formId" legend:"base"`       // form_id
	HistFigureId int    `json:"histFigureId" legend:"base"` // hist_figure_id
	SiteId       int    `json:"siteId" legend:"base"`       // site_id
}

func (x *HistoricalEventPoeticFormCreated) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventPoeticFormCreated) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventPoeticFormCreated) CheckFields() {
}

type HistoricalEventProcession struct {
	CivId          int `json:"civId" legend:"base"`          // civ_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	OccasionId     int `json:"occasionId" legend:"base"`     // occasion_id
	ScheduleId     int `json:"scheduleId" legend:"base"`     // schedule_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventProcession) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventProcession) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventProcession) CheckFields() {
}

type HistoricalEventRazedStructure struct {
	CivId       int `json:"civId" legend:"base"`       // civ_id
	SiteId      int `json:"siteId" legend:"base"`      // site_id
	StructureId int `json:"structureId" legend:"base"` // structure_id
}

func (x *HistoricalEventRazedStructure) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventRazedStructure) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventRazedStructure) CheckFields() {
}

type HistoricalEventReclaimSite struct {
	CivId     int `json:"civId" legend:"base"`     // civ_id
	SiteCivId int `json:"siteCivId" legend:"base"` // site_civ_id
	SiteId    int `json:"siteId" legend:"base"`    // site_id
}

func (x *HistoricalEventReclaimSite) RelatedToEntity(id int) bool {
	return x.CivId == id || x.SiteCivId == id
}
func (x *HistoricalEventReclaimSite) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventReclaimSite) CheckFields() {
}

type HistoricalEventRegionpopIncorporatedIntoEntity struct {
	JoinEntityId   int `json:"joinEntityId" legend:"base"`   // join_entity_id
	PopFlid        int `json:"popFlid" legend:"base"`        // pop_flid
	PopNumberMoved int `json:"popNumberMoved" legend:"base"` // pop_number_moved
	PopRace        int `json:"popRace" legend:"base"`        // pop_race
	PopSrid        int `json:"popSrid" legend:"base"`        // pop_srid
	SiteId         int `json:"siteId" legend:"base"`         // site_id
}

func (x *HistoricalEventRegionpopIncorporatedIntoEntity) RelatedToEntity(id int) bool {
	return x.JoinEntityId == id
}
func (x *HistoricalEventRegionpopIncorporatedIntoEntity) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventRegionpopIncorporatedIntoEntity) CheckFields() {
}

type HistoricalEventRelationship struct {
	Event        int    `json:"event" legend:"plus"`        // event
	Relationship string `json:"relationship" legend:"plus"` // relationship
	SourceHf     int    `json:"sourceHf" legend:"plus"`     // source_hf
	TargetHf     int    `json:"targetHf" legend:"plus"`     // target_hf
	Year         int    `json:"year" legend:"plus"`         // year
}

func (x *HistoricalEventRelationship) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventRelationship) RelatedToHf(id int) bool {
	return x.SourceHf == id || x.TargetHf == id
}

func (x *HistoricalEventRelationship) CheckFields() {
}

type HistoricalEventRelationshipSupplement struct {
	Event        int `json:"event" legend:"plus"`        // event
	OccasionType int `json:"occasionType" legend:"plus"` // occasion_type
	Site         int `json:"site" legend:"plus"`         // site
	Unk1         int `json:"unk1" legend:"plus"`         // unk_1
}

func (x *HistoricalEventRelationshipSupplement) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventRelationshipSupplement) RelatedToHf(id int) bool     { return false }

func (x *HistoricalEventRelationshipSupplement) CheckFields() {
}

type HistoricalEventRemoveHfEntityLink struct {
	CivId      int    `json:"civId" legend:"base"`      // civ_id
	Hfid       int    `json:"hfid" legend:"base"`       // hfid
	Link       string `json:"link" legend:"base"`       // link
	Position   string `json:"position" legend:"plus"`   // position
	PositionId int    `json:"positionId" legend:"base"` // position_id
}

func (x *HistoricalEventRemoveHfEntityLink) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *HistoricalEventRemoveHfEntityLink) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *HistoricalEventRemoveHfEntityLink) CheckFields() {
	if x.Position != x.Link && x.Position != "" && x.Link != "" {
		sameFields["HistoricalEventRemoveHfEntityLink"]["Position"]["Link"] = false
	}
}

type HistoricalEventRemoveHfHfLink struct {
	Hfid       int `json:"hfid" legend:"base"`       // hfid
	HfidTarget int `json:"hfidTarget" legend:"base"` // hfid_target
}

func (x *HistoricalEventRemoveHfHfLink) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventRemoveHfHfLink) RelatedToHf(id int) bool {
	return x.Hfid == id || x.HfidTarget == id
}

func (x *HistoricalEventRemoveHfHfLink) CheckFields() {
}

type HistoricalEventRemoveHfSiteLink struct {
	Civ       int    `json:"civ" legend:"plus"`       // civ
	Histfig   int    `json:"histfig" legend:"plus"`   // histfig
	LinkType  string `json:"linkType" legend:"plus"`  // link_type
	SiteId    int    `json:"siteId" legend:"base"`    // site_id
	Structure int    `json:"structure" legend:"plus"` // structure
}

func (x *HistoricalEventRemoveHfSiteLink) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventRemoveHfSiteLink) RelatedToHf(id int) bool     { return x.Histfig == id }

func (x *HistoricalEventRemoveHfSiteLink) CheckFields() {
	if x.Civ != x.SiteId && x.Civ != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventRemoveHfSiteLink"]["Civ"]["SiteId"] = false
	}
	if x.Histfig != x.SiteId && x.Histfig != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventRemoveHfSiteLink"]["Histfig"]["SiteId"] = false
	}
	if x.Structure != x.SiteId && x.Structure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventRemoveHfSiteLink"]["Structure"]["SiteId"] = false
	}
}

type HistoricalEventReplacedStructure struct {
	Civ          int `json:"civ" legend:"plus"`          // civ
	CivId        int `json:"civId" legend:"base"`        // civ_id
	NewAbId      int `json:"newAbId" legend:"base"`      // new_ab_id
	NewStructure int `json:"newStructure" legend:"plus"` // new_structure
	OldAbId      int `json:"oldAbId" legend:"base"`      // old_ab_id
	OldStructure int `json:"oldStructure" legend:"plus"` // old_structure
	Site         int `json:"site" legend:"plus"`         // site
	SiteCiv      int `json:"siteCiv" legend:"plus"`      // site_civ
	SiteCivId    int `json:"siteCivId" legend:"base"`    // site_civ_id
	SiteId       int `json:"siteId" legend:"base"`       // site_id
}

func (x *HistoricalEventReplacedStructure) RelatedToEntity(id int) bool {
	return x.SiteCivId == id || x.CivId == id
}
func (x *HistoricalEventReplacedStructure) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventReplacedStructure) CheckFields() {
	if x.Site != x.NewAbId && x.Site != 0 && x.NewAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Site"]["NewAbId"] = false
	}
	if x.Site != x.CivId && x.Site != 0 && x.CivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Site"]["CivId"] = false
	}
	if x.Site != x.OldAbId && x.Site != 0 && x.OldAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Site"]["OldAbId"] = false
	}
	if x.Site != x.SiteCivId && x.Site != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Site"]["SiteCivId"] = false
	}
	if x.Site != x.SiteId && x.Site != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Site"]["SiteId"] = false
	}
	if x.SiteCiv != x.NewAbId && x.SiteCiv != 0 && x.NewAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["SiteCiv"]["NewAbId"] = false
	}
	if x.SiteCiv != x.SiteCivId && x.SiteCiv != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["SiteCiv"]["SiteCivId"] = false
	}
	if x.SiteCiv != x.SiteId && x.SiteCiv != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["SiteCiv"]["SiteId"] = false
	}
	if x.SiteCiv != x.CivId && x.SiteCiv != 0 && x.CivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["SiteCiv"]["CivId"] = false
	}
	if x.SiteCiv != x.OldAbId && x.SiteCiv != 0 && x.OldAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["SiteCiv"]["OldAbId"] = false
	}
	if x.Civ != x.SiteCivId && x.Civ != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Civ"]["SiteCivId"] = false
	}
	if x.Civ != x.SiteId && x.Civ != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Civ"]["SiteId"] = false
	}
	if x.Civ != x.CivId && x.Civ != 0 && x.CivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Civ"]["CivId"] = false
	}
	if x.Civ != x.OldAbId && x.Civ != 0 && x.OldAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Civ"]["OldAbId"] = false
	}
	if x.Civ != x.NewAbId && x.Civ != 0 && x.NewAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["Civ"]["NewAbId"] = false
	}
	if x.NewStructure != x.SiteId && x.NewStructure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["NewStructure"]["SiteId"] = false
	}
	if x.NewStructure != x.CivId && x.NewStructure != 0 && x.CivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["NewStructure"]["CivId"] = false
	}
	if x.NewStructure != x.OldAbId && x.NewStructure != 0 && x.OldAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["NewStructure"]["OldAbId"] = false
	}
	if x.NewStructure != x.SiteCivId && x.NewStructure != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["NewStructure"]["SiteCivId"] = false
	}
	if x.NewStructure != x.NewAbId && x.NewStructure != 0 && x.NewAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["NewStructure"]["NewAbId"] = false
	}
	if x.OldStructure != x.NewAbId && x.OldStructure != 0 && x.NewAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["OldStructure"]["NewAbId"] = false
	}
	if x.OldStructure != x.SiteId && x.OldStructure != 0 && x.SiteId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["OldStructure"]["SiteId"] = false
	}
	if x.OldStructure != x.CivId && x.OldStructure != 0 && x.CivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["OldStructure"]["CivId"] = false
	}
	if x.OldStructure != x.OldAbId && x.OldStructure != 0 && x.OldAbId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["OldStructure"]["OldAbId"] = false
	}
	if x.OldStructure != x.SiteCivId && x.OldStructure != 0 && x.SiteCivId != 0 {
		sameFields["HistoricalEventReplacedStructure"]["OldStructure"]["SiteCivId"] = false
	}
}

type HistoricalEventSiteDispute struct {
	Dispute   string `json:"dispute" legend:"base"`   // dispute
	EntityId1 int    `json:"entityId1" legend:"base"` // entity_id_1
	EntityId2 int    `json:"entityId2" legend:"base"` // entity_id_2
	SiteId1   int    `json:"siteId1" legend:"base"`   // site_id_1
	SiteId2   int    `json:"siteId2" legend:"base"`   // site_id_2
}

func (x *HistoricalEventSiteDispute) RelatedToEntity(id int) bool {
	return x.EntityId1 == id || x.EntityId2 == id
}
func (x *HistoricalEventSiteDispute) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventSiteDispute) CheckFields() {
}

type HistoricalEventSiteTakenOver struct {
	AttackerCivId int `json:"attackerCivId" legend:"base"` // attacker_civ_id
	DefenderCivId int `json:"defenderCivId" legend:"base"` // defender_civ_id
	NewSiteCivId  int `json:"newSiteCivId" legend:"base"`  // new_site_civ_id
	SiteCivId     int `json:"siteCivId" legend:"base"`     // site_civ_id
	SiteId        int `json:"siteId" legend:"base"`        // site_id
}

func (x *HistoricalEventSiteTakenOver) RelatedToEntity(id int) bool {
	return x.AttackerCivId == id || x.DefenderCivId == id || x.NewSiteCivId == id || x.SiteCivId == id
}
func (x *HistoricalEventSiteTakenOver) RelatedToHf(id int) bool { return false }

func (x *HistoricalEventSiteTakenOver) CheckFields() {
}

type HistoricalEventSquadVsSquad struct {
	AHfid          int `json:"aHfid" legend:"base"`          // a_hfid
	ASquadId       int `json:"aSquadId" legend:"base"`       // a_squad_id
	DEffect        int `json:"dEffect" legend:"base"`        // d_effect
	DInteraction   int `json:"dInteraction" legend:"base"`   // d_interaction
	DNumber        int `json:"dNumber" legend:"base"`        // d_number
	DRace          int `json:"dRace" legend:"base"`          // d_race
	DSlain         int `json:"dSlain" legend:"base"`         // d_slain
	DSquadId       int `json:"dSquadId" legend:"base"`       // d_squad_id
	FeatureLayerId int `json:"featureLayerId" legend:"base"` // feature_layer_id
	SiteId         int `json:"siteId" legend:"base"`         // site_id
	StructureId    int `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventSquadVsSquad) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventSquadVsSquad) RelatedToHf(id int) bool     { return x.AHfid == id }

func (x *HistoricalEventSquadVsSquad) CheckFields() {
}

type HistoricalEventTacticalSituation struct {
	ATacticianHfid int    `json:"aTacticianHfid" legend:"base"` // a_tactician_hfid
	ATacticsRoll   int    `json:"aTacticsRoll" legend:"base"`   // a_tactics_roll
	DTacticianHfid int    `json:"dTacticianHfid" legend:"base"` // d_tactician_hfid
	DTacticsRoll   int    `json:"dTacticsRoll" legend:"base"`   // d_tactics_roll
	FeatureLayerId int    `json:"featureLayerId" legend:"base"` // feature_layer_id
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	Situation      string `json:"situation" legend:"base"`      // situation
	Start          bool   `json:"start" legend:"base"`          // start
	StructureId    int    `json:"structureId" legend:"base"`    // structure_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
}

func (x *HistoricalEventTacticalSituation) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventTacticalSituation) RelatedToHf(id int) bool {
	return x.ATacticianHfid == id || x.DTacticianHfid == id
}

func (x *HistoricalEventTacticalSituation) CheckFields() {
}

type HistoricalEventTrade struct {
	AccountShift     int `json:"accountShift" legend:"base"`     // account_shift
	Allotment        int `json:"allotment" legend:"base"`        // allotment
	AllotmentIndex   int `json:"allotmentIndex" legend:"base"`   // allotment_index
	DestSiteId       int `json:"destSiteId" legend:"base"`       // dest_site_id
	ProductionZoneId int `json:"productionZoneId" legend:"base"` // production_zone_id
	SourceSiteId     int `json:"sourceSiteId" legend:"base"`     // source_site_id
	TraderEntityId   int `json:"traderEntityId" legend:"base"`   // trader_entity_id
	TraderHfid       int `json:"traderHfid" legend:"base"`       // trader_hfid
}

func (x *HistoricalEventTrade) RelatedToEntity(id int) bool { return x.TraderEntityId == id }
func (x *HistoricalEventTrade) RelatedToHf(id int) bool     { return x.TraderHfid == id }

func (x *HistoricalEventTrade) CheckFields() {
}

type HistoricalEventWrittenContentComposed struct {
	Circumstance   string `json:"circumstance" legend:"base"`   // circumstance
	CircumstanceId int    `json:"circumstanceId" legend:"base"` // circumstance_id
	HistFigureId   int    `json:"histFigureId" legend:"base"`   // hist_figure_id
	Reason         string `json:"reason" legend:"base"`         // reason
	ReasonId       int    `json:"reasonId" legend:"base"`       // reason_id
	SiteId         int    `json:"siteId" legend:"base"`         // site_id
	SubregionId    int    `json:"subregionId" legend:"base"`    // subregion_id
	WcId           int    `json:"wcId" legend:"base"`           // wc_id
}

func (x *HistoricalEventWrittenContentComposed) RelatedToEntity(id int) bool { return false }
func (x *HistoricalEventWrittenContentComposed) RelatedToHf(id int) bool     { return x.HistFigureId == id }

func (x *HistoricalEventWrittenContentComposed) CheckFields() {
}

type HistoricalFigure struct {
	ActiveInteraction               []string                           `json:"activeInteraction" legend:"base"`               // active_interaction
	Animated                        bool                               `json:"animated" legend:"base"`                        // animated
	AnimatedString                  string                             `json:"animatedString" legend:"base"`                  // animated_string
	Appeared                        int                                `json:"appeared" legend:"base"`                        // appeared
	AssociatedType                  string                             `json:"associatedType" legend:"base"`                  // associated_type
	BirthSeconds72                  int                                `json:"birthSeconds72" legend:"base"`                  // birth_seconds72
	BirthYear                       int                                `json:"birthYear" legend:"base"`                       // birth_year
	Caste                           string                             `json:"caste" legend:"base"`                           // caste
	CurrentIdentityId               int                                `json:"currentIdentityId" legend:"base"`               // current_identity_id
	DeathSeconds72                  int                                `json:"deathSeconds72" legend:"base"`                  // death_seconds72
	DeathYear                       int                                `json:"deathYear" legend:"base"`                       // death_year
	Deity                           bool                               `json:"deity" legend:"base"`                           // deity
	EntPopId                        int                                `json:"entPopId" legend:"base"`                        // ent_pop_id
	EntityFormerPositionLink        []*EntityFormerPositionLink        `json:"entityFormerPositionLink" legend:"base"`        // entity_former_position_link
	EntityLink                      []*HistoricalFigureEntityLink      `json:"entityLink" legend:"base"`                      // entity_link
	EntityPositionLink              []*EntityPositionLink              `json:"entityPositionLink" legend:"base"`              // entity_position_link
	EntityReputation                []*EntityReputation                `json:"entityReputation" legend:"base"`                // entity_reputation
	EntitySquadLink                 *EntitySquadLink                   `json:"entitySquadLink" legend:"base"`                 // entity_squad_link
	Force                           bool                               `json:"force" legend:"base"`                           // force
	Goal                            []string                           `json:"goal" legend:"base"`                            // goal
	HfLink                          []*HfLink                          `json:"hfLink" legend:"base"`                          // hf_link
	HfSkill                         []*HfSkill                         `json:"hfSkill" legend:"base"`                         // hf_skill
	HoldsArtifact                   []int                              `json:"holdsArtifact" legend:"base"`                   // holds_artifact
	HonorEntity                     []*HonorEntity                     `json:"honorEntity" legend:"base"`                     // honor_entity
	Id_                             int                                `json:"id" legend:"both"`                              // id
	InteractionKnowledge            []string                           `json:"interactionKnowledge" legend:"base"`            // interaction_knowledge
	IntrigueActor                   []*IntrigueActor                   `json:"intrigueActor" legend:"base"`                   // intrigue_actor
	IntriguePlot                    []*IntriguePlot                    `json:"intriguePlot" legend:"base"`                    // intrigue_plot
	JourneyPet                      []string                           `json:"journeyPet" legend:"base"`                      // journey_pet
	Name_                           string                             `json:"name" legend:"base"`                            // name
	Race                            string                             `json:"race" legend:"both"`                            // race
	RelationshipProfileHfHistorical []*RelationshipProfileHfHistorical `json:"relationshipProfileHfHistorical" legend:"base"` // relationship_profile_hf_historical
	RelationshipProfileHfVisual     []*RelationshipProfileHfVisual     `json:"relationshipProfileHfVisual" legend:"base"`     // relationship_profile_hf_visual
	Sex                             int                                `json:"sex" legend:"plus"`                             // sex
	SiteLink                        []*SiteLink                        `json:"siteLink" legend:"base"`                        // site_link
	SiteProperty                    []*HistoricalFigureSiteProperty    `json:"siteProperty" legend:"base"`                    // site_property
	Sphere                          []string                           `json:"sphere" legend:"base"`                          // sphere
	UsedIdentityId                  []int                              `json:"usedIdentityId" legend:"base"`                  // used_identity_id
	VagueRelationship               []*VagueRelationship               `json:"vagueRelationship" legend:"base"`               // vague_relationship
}

func (x *HistoricalFigure) Id() int      { return x.Id_ }
func (x *HistoricalFigure) Name() string { return x.Name_ }
func (x *HistoricalFigure) RelatedToEntity(id int) bool {
	return x.CurrentIdentityId == id || containsInt(x.UsedIdentityId, id)
}
func (x *HistoricalFigure) RelatedToHf(id int) bool { return false }

func (x *HistoricalFigure) CheckFields() {
	if x.Sex != x.DeathYear && x.Sex != 0 && x.DeathYear != 0 {
		sameFields["HistoricalFigure"]["Sex"]["DeathYear"] = false
	}
	if x.Sex != x.EntPopId && x.Sex != 0 && x.EntPopId != 0 {
		sameFields["HistoricalFigure"]["Sex"]["EntPopId"] = false
	}
	if x.Sex != x.BirthYear && x.Sex != 0 && x.BirthYear != 0 {
		sameFields["HistoricalFigure"]["Sex"]["BirthYear"] = false
	}
	if x.Sex != x.CurrentIdentityId && x.Sex != 0 && x.CurrentIdentityId != 0 {
		sameFields["HistoricalFigure"]["Sex"]["CurrentIdentityId"] = false
	}
	if x.Sex != x.DeathSeconds72 && x.Sex != 0 && x.DeathSeconds72 != 0 {
		sameFields["HistoricalFigure"]["Sex"]["DeathSeconds72"] = false
	}
	if x.Sex != x.Appeared && x.Sex != 0 && x.Appeared != 0 {
		sameFields["HistoricalFigure"]["Sex"]["Appeared"] = false
	}
	if x.Sex != x.BirthSeconds72 && x.Sex != 0 && x.BirthSeconds72 != 0 {
		sameFields["HistoricalFigure"]["Sex"]["BirthSeconds72"] = false
	}
}

type HistoricalFigureEntityLink struct {
	EntityId     int    `json:"entityId" legend:"base"`     // entity_id
	LinkStrength int    `json:"linkStrength" legend:"base"` // link_strength
	LinkType     string `json:"linkType" legend:"base"`     // link_type
}

func (x *HistoricalFigureEntityLink) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *HistoricalFigureEntityLink) RelatedToHf(id int) bool     { return false }

func (x *HistoricalFigureEntityLink) CheckFields() {
}

type HistoricalFigureSiteProperty struct {
	PropertyId int `json:"propertyId" legend:"base"` // property_id
	SiteId     int `json:"siteId" legend:"base"`     // site_id
}

func (x *HistoricalFigureSiteProperty) RelatedToEntity(id int) bool { return false }
func (x *HistoricalFigureSiteProperty) RelatedToHf(id int) bool     { return false }

func (x *HistoricalFigureSiteProperty) CheckFields() {
}

type Honor struct {
	ExemptEpid                    int    `json:"exemptEpid" legend:"base"`                    // exempt_epid
	ExemptFormerEpid              int    `json:"exemptFormerEpid" legend:"base"`              // exempt_former_epid
	GivesPrecedence               int    `json:"givesPrecedence" legend:"base"`               // gives_precedence
	GrantedToEverybody            bool   `json:"grantedToEverybody" legend:"base"`            // granted_to_everybody
	Id_                           int    `json:"id" legend:"base"`                            // id
	Name_                         string `json:"name" legend:"base"`                          // name
	RequiredBattles               int    `json:"requiredBattles" legend:"base"`               // required_battles
	RequiredKills                 int    `json:"requiredKills" legend:"base"`                 // required_kills
	RequiredSkill                 string `json:"requiredSkill" legend:"base"`                 // required_skill
	RequiredSkillIpTotal          int    `json:"requiredSkillIpTotal" legend:"base"`          // required_skill_ip_total
	RequiredYears                 int    `json:"requiredYears" legend:"base"`                 // required_years
	RequiresAnyMeleeOrRangedSkill bool   `json:"requiresAnyMeleeOrRangedSkill" legend:"base"` // requires_any_melee_or_ranged_skill
}

func (x *Honor) Id() int                     { return x.Id_ }
func (x *Honor) Name() string                { return x.Name_ }
func (x *Honor) RelatedToEntity(id int) bool { return false }
func (x *Honor) RelatedToHf(id int) bool     { return false }

func (x *Honor) CheckFields() {
}

type HonorEntity struct {
	Battles int   `json:"battles" legend:"base"` // battles
	Entity  int   `json:"entity" legend:"base"`  // entity
	HonorId []int `json:"honorId" legend:"base"` // honor_id
	Kills   int   `json:"kills" legend:"base"`   // kills
}

func (x *HonorEntity) RelatedToEntity(id int) bool { return x.Entity == id }
func (x *HonorEntity) RelatedToHf(id int) bool     { return false }

func (x *HonorEntity) CheckFields() {
}

type Identity struct {
	BirthSecond int    `json:"birthSecond" legend:"plus"` // birth_second
	BirthYear   int    `json:"birthYear" legend:"plus"`   // birth_year
	Caste       string `json:"caste" legend:"plus"`       // caste
	EntityId    int    `json:"entityId" legend:"plus"`    // entity_id
	HistfigId   int    `json:"histfigId" legend:"plus"`   // histfig_id
	Id_         int    `json:"id" legend:"plus"`          // id
	Name_       string `json:"name" legend:"plus"`        // name
	NemesisId   int    `json:"nemesisId" legend:"plus"`   // nemesis_id
	Profession  string `json:"profession" legend:"plus"`  // profession
	Race        string `json:"race" legend:"plus"`        // race
}

func (x *Identity) Id() int                     { return x.Id_ }
func (x *Identity) Name() string                { return x.Name_ }
func (x *Identity) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *Identity) RelatedToHf(id int) bool     { return x.HistfigId == id }

func (x *Identity) CheckFields() {
}

type IntrigueActor struct {
	EntityId                 int    `json:"entityId" legend:"base"`                 // entity_id
	HandleActorId            int    `json:"handleActorId" legend:"base"`            // handle_actor_id
	Hfid                     int    `json:"hfid" legend:"base"`                     // hfid
	LocalId                  int    `json:"localId" legend:"base"`                  // local_id
	PromisedActorImmortality bool   `json:"promisedActorImmortality" legend:"base"` // promised_actor_immortality
	PromisedMeImmortality    bool   `json:"promisedMeImmortality" legend:"base"`    // promised_me_immortality
	Role                     string `json:"role" legend:"base"`                     // role
	Strategy                 string `json:"strategy" legend:"base"`                 // strategy
	StrategyEnid             int    `json:"strategyEnid" legend:"base"`             // strategy_enid
	StrategyEppid            int    `json:"strategyEppid" legend:"base"`            // strategy_eppid
}

func (x *IntrigueActor) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *IntrigueActor) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *IntrigueActor) CheckFields() {
}

type IntriguePlot struct {
	ActorId           int          `json:"actorId" legend:"base"`           // actor_id
	ArtifactId        int          `json:"artifactId" legend:"base"`        // artifact_id
	DelegatedPlotHfid int          `json:"delegatedPlotHfid" legend:"base"` // delegated_plot_hfid
	DelegatedPlotId   int          `json:"delegatedPlotId" legend:"base"`   // delegated_plot_id
	EntityId          int          `json:"entityId" legend:"base"`          // entity_id
	LocalId           int          `json:"localId" legend:"base"`           // local_id
	OnHold            bool         `json:"onHold" legend:"base"`            // on_hold
	ParentPlotHfid    int          `json:"parentPlotHfid" legend:"base"`    // parent_plot_hfid
	ParentPlotId      int          `json:"parentPlotId" legend:"base"`      // parent_plot_id
	PlotActor         []*PlotActor `json:"plotActor" legend:"base"`         // plot_actor
	Type              string       `json:"type" legend:"base"`              // type
}

func (x *IntriguePlot) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *IntriguePlot) RelatedToHf(id int) bool {
	return x.ParentPlotHfid == id || x.DelegatedPlotHfid == id
}

func (x *IntriguePlot) CheckFields() {
}

type Item struct {
	NameString              string `json:"nameString" legend:"base"`              // name_string
	PageNumber              int    `json:"pageNumber" legend:"base"`              // page_number
	PageWrittenContentId    int    `json:"pageWrittenContentId" legend:"base"`    // page_written_content_id
	WritingWrittenContentId int    `json:"writingWrittenContentId" legend:"base"` // writing_written_content_id
}

func (x *Item) RelatedToEntity(id int) bool { return false }
func (x *Item) RelatedToHf(id int) bool     { return false }

func (x *Item) CheckFields() {
}

type Landmass struct {
	Coord1 string `json:"coord1" legend:"plus"` // coord_1
	Coord2 string `json:"coord2" legend:"plus"` // coord_2
	Id_    int    `json:"id" legend:"plus"`     // id
	Name_  string `json:"name" legend:"plus"`   // name
}

func (x *Landmass) Id() int                     { return x.Id_ }
func (x *Landmass) Name() string                { return x.Name_ }
func (x *Landmass) RelatedToEntity(id int) bool { return false }
func (x *Landmass) RelatedToHf(id int) bool     { return false }

func (x *Landmass) CheckFields() {
}

type MountainPeak struct {
	Coords    string `json:"coords" legend:"plus"`    // coords
	Height    int    `json:"height" legend:"plus"`    // height
	Id_       int    `json:"id" legend:"plus"`        // id
	IsVolcano bool   `json:"isVolcano" legend:"plus"` // is_volcano
	Name_     string `json:"name" legend:"plus"`      // name
}

func (x *MountainPeak) Id() int                     { return x.Id_ }
func (x *MountainPeak) Name() string                { return x.Name_ }
func (x *MountainPeak) RelatedToEntity(id int) bool { return false }
func (x *MountainPeak) RelatedToHf(id int) bool     { return false }

func (x *MountainPeak) CheckFields() {
}

type MusicalForm struct {
	Description string `json:"description" legend:"base"` // description
	Id_         int    `json:"id" legend:"both"`          // id
	Name_       string `json:"name" legend:"plus"`        // name
}

func (x *MusicalForm) Id() int                     { return x.Id_ }
func (x *MusicalForm) Name() string                { return x.Name_ }
func (x *MusicalForm) RelatedToEntity(id int) bool { return false }
func (x *MusicalForm) RelatedToHf(id int) bool     { return false }

func (x *MusicalForm) CheckFields() {
}

type Occasion struct {
	Event    int         `json:"event" legend:"plus"`    // event
	Id_      int         `json:"id" legend:"plus"`       // id
	Name_    string      `json:"name" legend:"plus"`     // name
	Schedule []*Schedule `json:"schedule" legend:"plus"` // schedule
}

func (x *Occasion) Id() int                     { return x.Id_ }
func (x *Occasion) Name() string                { return x.Name_ }
func (x *Occasion) RelatedToEntity(id int) bool { return false }
func (x *Occasion) RelatedToHf(id int) bool     { return false }

func (x *Occasion) CheckFields() {
}

type PlotActor struct {
	ActorId               int    `json:"actorId" legend:"base"`               // actor_id
	AgreementHasMessenger bool   `json:"agreementHasMessenger" legend:"base"` // agreement_has_messenger
	AgreementId           int    `json:"agreementId" legend:"base"`           // agreement_id
	PlotRole              string `json:"plotRole" legend:"base"`              // plot_role
}

func (x *PlotActor) RelatedToEntity(id int) bool { return false }
func (x *PlotActor) RelatedToHf(id int) bool     { return false }

func (x *PlotActor) CheckFields() {
}

type PoeticForm struct {
	Description string `json:"description" legend:"base"` // description
	Id_         int    `json:"id" legend:"both"`          // id
	Name_       string `json:"name" legend:"plus"`        // name
}

func (x *PoeticForm) Id() int                     { return x.Id_ }
func (x *PoeticForm) Name() string                { return x.Name_ }
func (x *PoeticForm) RelatedToEntity(id int) bool { return false }
func (x *PoeticForm) RelatedToHf(id int) bool     { return false }

func (x *PoeticForm) CheckFields() {
}

type Reference struct {
	Id_  int    `json:"id" legend:"plus"`   // id
	Type string `json:"type" legend:"plus"` // type
}

func (x *Reference) Id() int                     { return x.Id_ }
func (x *Reference) RelatedToEntity(id int) bool { return false }
func (x *Reference) RelatedToHf(id int) bool     { return false }

func (x *Reference) CheckFields() {
}

type Region struct {
	Coords   string `json:"coords" legend:"plus"`   // coords
	Evilness string `json:"evilness" legend:"plus"` // evilness
	ForceId  int    `json:"forceId" legend:"plus"`  // force_id
	Id_      int    `json:"id" legend:"both"`       // id
	Name_    string `json:"name" legend:"base"`     // name
	Type     string `json:"type" legend:"base"`     // type
}

func (x *Region) Id() int                     { return x.Id_ }
func (x *Region) Name() string                { return x.Name_ }
func (x *Region) RelatedToEntity(id int) bool { return false }
func (x *Region) RelatedToHf(id int) bool     { return false }

func (x *Region) CheckFields() {
}

type RelationshipProfileHfHistorical struct {
	Fear    int `json:"fear" legend:"base"`    // fear
	HfId    int `json:"hfId" legend:"base"`    // hf_id
	Love    int `json:"love" legend:"base"`    // love
	Loyalty int `json:"loyalty" legend:"base"` // loyalty
	Respect int `json:"respect" legend:"base"` // respect
	Trust   int `json:"trust" legend:"base"`   // trust
}

func (x *RelationshipProfileHfHistorical) RelatedToEntity(id int) bool { return false }
func (x *RelationshipProfileHfHistorical) RelatedToHf(id int) bool     { return x.HfId == id }

func (x *RelationshipProfileHfHistorical) CheckFields() {
}

type RelationshipProfileHfVisual struct {
	Fear                 int `json:"fear" legend:"base"`                 // fear
	HfId                 int `json:"hfId" legend:"base"`                 // hf_id
	KnownIdentityId      int `json:"knownIdentityId" legend:"base"`      // known_identity_id
	LastMeetSeconds72    int `json:"lastMeetSeconds72" legend:"base"`    // last_meet_seconds72
	LastMeetYear         int `json:"lastMeetYear" legend:"base"`         // last_meet_year
	Love                 int `json:"love" legend:"base"`                 // love
	Loyalty              int `json:"loyalty" legend:"base"`              // loyalty
	MeetCount            int `json:"meetCount" legend:"base"`            // meet_count
	RepFriendly          int `json:"repFriendly" legend:"base"`          // rep_friendly
	RepInformationSource int `json:"repInformationSource" legend:"base"` // rep_information_source
	Respect              int `json:"respect" legend:"base"`              // respect
	Trust                int `json:"trust" legend:"base"`                // trust
}

func (x *RelationshipProfileHfVisual) RelatedToEntity(id int) bool { return x.KnownIdentityId == id }
func (x *RelationshipProfileHfVisual) RelatedToHf(id int) bool     { return x.HfId == id }

func (x *RelationshipProfileHfVisual) CheckFields() {
}

type River struct {
	EndPos string `json:"endPos" legend:"plus"` // end_pos
	Name_  string `json:"name" legend:"plus"`   // name
	Path   string `json:"path" legend:"plus"`   // path
}

func (x *River) Name() string                { return x.Name_ }
func (x *River) RelatedToEntity(id int) bool { return false }
func (x *River) RelatedToHf(id int) bool     { return false }

func (x *River) CheckFields() {
}

type Schedule struct {
	Feature     []*Feature `json:"feature" legend:"plus"`     // feature
	Id_         int        `json:"id" legend:"plus"`          // id
	ItemSubtype string     `json:"itemSubtype" legend:"plus"` // item_subtype
	ItemType    string     `json:"itemType" legend:"plus"`    // item_type
	Reference   int        `json:"reference" legend:"plus"`   // reference
	Reference2  int        `json:"reference2" legend:"plus"`  // reference2
	Type        string     `json:"type" legend:"plus"`        // type
}

func (x *Schedule) Id() int                     { return x.Id_ }
func (x *Schedule) RelatedToEntity(id int) bool { return false }
func (x *Schedule) RelatedToHf(id int) bool     { return false }

func (x *Schedule) CheckFields() {
}

type Site struct {
	CivId          int                       `json:"civId" legend:"plus"`          // civ_id
	Coords         string                    `json:"coords" legend:"base"`         // coords
	CurOwnerId     int                       `json:"curOwnerId" legend:"plus"`     // cur_owner_id
	Id_            int                       `json:"id" legend:"both"`             // id
	Name_          string                    `json:"name" legend:"base"`           // name
	Rectangle      string                    `json:"rectangle" legend:"base"`      // rectangle
	SiteProperties map[int]*SiteSiteProperty `json:"siteProperties" legend:"base"` // site_properties
	Structures     map[int]*Structure        `json:"structures" legend:"base"`     // structures
	Type           string                    `json:"type" legend:"base"`           // type
}

func (x *Site) Id() int                     { return x.Id_ }
func (x *Site) Name() string                { return x.Name_ }
func (x *Site) RelatedToEntity(id int) bool { return x.CivId == id }
func (x *Site) RelatedToHf(id int) bool     { return false }

func (x *Site) CheckFields() {
}

type SiteLink struct {
	EntityId     int    `json:"entityId" legend:"base"`     // entity_id
	LinkType     string `json:"linkType" legend:"base"`     // link_type
	OccupationId int    `json:"occupationId" legend:"base"` // occupation_id
	SiteId       int    `json:"siteId" legend:"base"`       // site_id
	SubId        int    `json:"subId" legend:"base"`        // sub_id
}

func (x *SiteLink) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *SiteLink) RelatedToHf(id int) bool     { return false }

func (x *SiteLink) CheckFields() {
}

type SiteSiteProperty struct {
	Id_         int    `json:"id" legend:"base"`          // id
	OwnerHfid   int    `json:"ownerHfid" legend:"base"`   // owner_hfid
	StructureId int    `json:"structureId" legend:"base"` // structure_id
	Type        string `json:"type" legend:"base"`        // type
}

func (x *SiteSiteProperty) Id() int                     { return x.Id_ }
func (x *SiteSiteProperty) RelatedToEntity(id int) bool { return false }
func (x *SiteSiteProperty) RelatedToHf(id int) bool     { return x.OwnerHfid == id }

func (x *SiteSiteProperty) CheckFields() {
}

type Structure struct {
	CopiedArtifactId []int  `json:"copiedArtifactId" legend:"base"` // copied_artifact_id
	Deity            int    `json:"deity" legend:"plus"`            // deity
	DeityType        int    `json:"deityType" legend:"plus"`        // deity_type
	DungeonType      int    `json:"dungeonType" legend:"plus"`      // dungeon_type
	EntityId         int    `json:"entityId" legend:"base"`         // entity_id
	Id_              int    `json:"id" legend:"plus"`               // id
	Inhabitant       []int  `json:"inhabitant" legend:"plus"`       // inhabitant
	LocalId          int    `json:"localId" legend:"base"`          // local_id
	Name_            string `json:"name" legend:"base"`             // name
	Religion         int    `json:"religion" legend:"plus"`         // religion
	Subtype          string `json:"subtype" legend:"base"`          // subtype
	Type             string `json:"type" legend:"base"`             // type
	WorshipHfid      int    `json:"worshipHfid" legend:"base"`      // worship_hfid
}

func (x *Structure) Id() int                     { return x.Id_ }
func (x *Structure) Name() string                { return x.Name_ }
func (x *Structure) RelatedToEntity(id int) bool { return x.EntityId == id }
func (x *Structure) RelatedToHf(id int) bool     { return x.WorshipHfid == id }

func (x *Structure) CheckFields() {
	if x.DeityType != x.EntityId && x.DeityType != 0 && x.EntityId != 0 {
		sameFields["Structure"]["DeityType"]["EntityId"] = false
	}
	if x.DeityType != x.WorshipHfid && x.DeityType != 0 && x.WorshipHfid != 0 {
		sameFields["Structure"]["DeityType"]["WorshipHfid"] = false
	}
	if x.DeityType != x.LocalId && x.DeityType != 0 && x.LocalId != 0 {
		sameFields["Structure"]["DeityType"]["LocalId"] = false
	}
	if x.Religion != x.WorshipHfid && x.Religion != 0 && x.WorshipHfid != 0 {
		sameFields["Structure"]["Religion"]["WorshipHfid"] = false
	}
	if x.Religion != x.EntityId && x.Religion != 0 && x.EntityId != 0 {
		sameFields["Structure"]["Religion"]["EntityId"] = false
	}
	if x.Religion != x.LocalId && x.Religion != 0 && x.LocalId != 0 {
		sameFields["Structure"]["Religion"]["LocalId"] = false
	}
	if x.Deity != x.LocalId && x.Deity != 0 && x.LocalId != 0 {
		sameFields["Structure"]["Deity"]["LocalId"] = false
	}
	if x.Deity != x.WorshipHfid && x.Deity != 0 && x.WorshipHfid != 0 {
		sameFields["Structure"]["Deity"]["WorshipHfid"] = false
	}
	if x.Deity != x.EntityId && x.Deity != 0 && x.EntityId != 0 {
		sameFields["Structure"]["Deity"]["EntityId"] = false
	}
	if x.DungeonType != x.LocalId && x.DungeonType != 0 && x.LocalId != 0 {
		sameFields["Structure"]["DungeonType"]["LocalId"] = false
	}
	if x.DungeonType != x.EntityId && x.DungeonType != 0 && x.EntityId != 0 {
		sameFields["Structure"]["DungeonType"]["EntityId"] = false
	}
	if x.DungeonType != x.WorshipHfid && x.DungeonType != 0 && x.WorshipHfid != 0 {
		sameFields["Structure"]["DungeonType"]["WorshipHfid"] = false
	}
}

type UndergroundRegion struct {
	Coords string `json:"coords" legend:"plus"` // coords
	Depth  int    `json:"depth" legend:"base"`  // depth
	Id_    int    `json:"id" legend:"both"`     // id
	Type   string `json:"type" legend:"base"`   // type
}

func (x *UndergroundRegion) Id() int                     { return x.Id_ }
func (x *UndergroundRegion) RelatedToEntity(id int) bool { return false }
func (x *UndergroundRegion) RelatedToHf(id int) bool     { return false }

func (x *UndergroundRegion) CheckFields() {
}

type VagueRelationship struct {
	ArtisticBuddy              bool `json:"artisticBuddy" legend:"base"`              // artistic_buddy
	AtheleticRival             bool `json:"atheleticRival" legend:"base"`             // atheletic_rival
	AthleteBuddy               bool `json:"athleteBuddy" legend:"base"`               // athlete_buddy
	BusinessRival              bool `json:"businessRival" legend:"base"`              // business_rival
	ChildhoodFriend            bool `json:"childhoodFriend" legend:"base"`            // childhood_friend
	Grudge                     bool `json:"grudge" legend:"base"`                     // grudge
	Hfid                       int  `json:"hfid" legend:"base"`                       // hfid
	JealousObsession           bool `json:"jealousObsession" legend:"base"`           // jealous_obsession
	JealousRelationshipGrudge  bool `json:"jealousRelationshipGrudge" legend:"base"`  // jealous_relationship_grudge
	PersecutionGrudge          bool `json:"persecutionGrudge" legend:"base"`          // persecution_grudge
	ReligiousPersecutionGrudge bool `json:"religiousPersecutionGrudge" legend:"base"` // religious_persecution_grudge
	ScholarBuddy               bool `json:"scholarBuddy" legend:"base"`               // scholar_buddy
	SupernaturalGrudge         bool `json:"supernaturalGrudge" legend:"base"`         // supernatural_grudge
	WarBuddy                   bool `json:"warBuddy" legend:"base"`                   // war_buddy
}

func (x *VagueRelationship) RelatedToEntity(id int) bool { return false }
func (x *VagueRelationship) RelatedToHf(id int) bool     { return x.Hfid == id }

func (x *VagueRelationship) CheckFields() {
}

type WorldConstruction struct {
	Coords string `json:"coords" legend:"plus"` // coords
	Id_    int    `json:"id" legend:"plus"`     // id
	Name_  string `json:"name" legend:"plus"`   // name
	Type   string `json:"type" legend:"plus"`   // type
}

func (x *WorldConstruction) Id() int                     { return x.Id_ }
func (x *WorldConstruction) Name() string                { return x.Name_ }
func (x *WorldConstruction) RelatedToEntity(id int) bool { return false }
func (x *WorldConstruction) RelatedToHf(id int) bool     { return false }

func (x *WorldConstruction) CheckFields() {
}

type WrittenContent struct {
	AuthorHfid int          `json:"authorHfid" legend:"base"` // author_hfid
	AuthorRoll int          `json:"authorRoll" legend:"base"` // author_roll
	Form       string       `json:"form" legend:"base"`       // form
	FormId     int          `json:"formId" legend:"base"`     // form_id
	Id_        int          `json:"id" legend:"both"`         // id
	PageEnd    int          `json:"pageEnd" legend:"plus"`    // page_end
	PageStart  int          `json:"pageStart" legend:"plus"`  // page_start
	Reference  []*Reference `json:"reference" legend:"plus"`  // reference
	Style      []string     `json:"style" legend:"base"`      // style
	Title      string       `json:"title" legend:"both"`      // title
	Type       string       `json:"type" legend:"plus"`       // type
}

func (x *WrittenContent) Id() int                     { return x.Id_ }
func (x *WrittenContent) RelatedToEntity(id int) bool { return false }
func (x *WrittenContent) RelatedToHf(id int) bool     { return x.AuthorHfid == id }

func (x *WrittenContent) CheckFields() {
	if x.PageEnd != x.FormId && x.PageEnd != 0 && x.FormId != 0 {
		sameFields["WrittenContent"]["PageEnd"]["FormId"] = false
	}
	if x.PageEnd != x.AuthorHfid && x.PageEnd != 0 && x.AuthorHfid != 0 {
		sameFields["WrittenContent"]["PageEnd"]["AuthorHfid"] = false
	}
	if x.PageEnd != x.AuthorRoll && x.PageEnd != 0 && x.AuthorRoll != 0 {
		sameFields["WrittenContent"]["PageEnd"]["AuthorRoll"] = false
	}
	if x.PageStart != x.AuthorHfid && x.PageStart != 0 && x.AuthorHfid != 0 {
		sameFields["WrittenContent"]["PageStart"]["AuthorHfid"] = false
	}
	if x.PageStart != x.AuthorRoll && x.PageStart != 0 && x.AuthorRoll != 0 {
		sameFields["WrittenContent"]["PageStart"]["AuthorRoll"] = false
	}
	if x.PageStart != x.FormId && x.PageStart != 0 && x.FormId != 0 {
		sameFields["WrittenContent"]["PageStart"]["FormId"] = false
	}
}

// Parser

func n(d []byte) int {
	v, _ := strconv.Atoi(string(d))
	return v
}
func parseArtifact(d *xml.Decoder, start *xml.StartElement) (*Artifact, error) {
	var (
		obj  = &Artifact{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "abs_tile_x":
				data = nil
			case "abs_tile_y":
				data = nil
			case "abs_tile_z":
				data = nil
			case "holder_hfid":
				data = nil
			case "id":
				data = nil
			case "item":
				v, _ := parseItem(d, &t)
				obj.Item = v
			case "name":
				data = nil
			case "site_id":
				data = nil
			case "structure_local_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "abs_tile_x":
				obj.AbsTileX = n(data)
			case "abs_tile_y":
				obj.AbsTileY = n(data)
			case "abs_tile_z":
				obj.AbsTileZ = n(data)
			case "holder_hfid":
				obj.HolderHfid = n(data)
			case "id":
				obj.Id_ = n(data)
			case "item":

			case "name":
				obj.Name_ = string(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_local_id":
				obj.StructureLocalId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseArtifactPlus(d *xml.Decoder, start *xml.StartElement, obj *Artifact) (*Artifact, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Artifact{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "item_description":
				data = nil
			case "item_subtype":
				data = nil
			case "item_type":
				data = nil
			case "mat":
				data = nil
			case "page_count":
				data = nil
			case "writing":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "item_description":
				obj.ItemDescription = string(data)
			case "item_subtype":
				obj.ItemSubtype = string(data)
			case "item_type":
				obj.ItemType = string(data)
			case "mat":
				obj.Mat = string(data)
			case "page_count":
				obj.PageCount = n(data)
			case "writing":
				obj.Writing = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseCreature(d *xml.Decoder, start *xml.StartElement) (*Creature, error) {
	var (
		obj  = &Creature{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseCreaturePlus(d *xml.Decoder, start *xml.StartElement, obj *Creature) (*Creature, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Creature{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "all_castes_alive":
				data = nil
			case "artificial_hiveable":
				data = nil
			case "biome_desert_badland":
				data = nil
			case "biome_desert_rock":
				data = nil
			case "biome_desert_sand":
				data = nil
			case "biome_forest_taiga":
				data = nil
			case "biome_forest_temperate_broadleaf":
				data = nil
			case "biome_forest_temperate_conifer":
				data = nil
			case "biome_forest_tropical_conifer":
				data = nil
			case "biome_forest_tropical_dry_broadleaf":
				data = nil
			case "biome_forest_tropical_moist_broadleaf":
				data = nil
			case "biome_glacier":
				data = nil
			case "biome_grassland_temperate":
				data = nil
			case "biome_grassland_tropical":
				data = nil
			case "biome_lake_temperate_brackishwater":
				data = nil
			case "biome_lake_temperate_freshwater":
				data = nil
			case "biome_lake_temperate_saltwater":
				data = nil
			case "biome_lake_tropical_brackishwater":
				data = nil
			case "biome_lake_tropical_freshwater":
				data = nil
			case "biome_lake_tropical_saltwater":
				data = nil
			case "biome_marsh_temperate_freshwater":
				data = nil
			case "biome_marsh_temperate_saltwater":
				data = nil
			case "biome_marsh_tropical_freshwater":
				data = nil
			case "biome_marsh_tropical_saltwater":
				data = nil
			case "biome_mountain":
				data = nil
			case "biome_ocean_arctic":
				data = nil
			case "biome_ocean_temperate":
				data = nil
			case "biome_ocean_tropical":
				data = nil
			case "biome_pool_temperate_brackishwater":
				data = nil
			case "biome_pool_temperate_freshwater":
				data = nil
			case "biome_pool_temperate_saltwater":
				data = nil
			case "biome_pool_tropical_brackishwater":
				data = nil
			case "biome_pool_tropical_freshwater":
				data = nil
			case "biome_pool_tropical_saltwater":
				data = nil
			case "biome_river_temperate_brackishwater":
				data = nil
			case "biome_river_temperate_freshwater":
				data = nil
			case "biome_river_temperate_saltwater":
				data = nil
			case "biome_river_tropical_brackishwater":
				data = nil
			case "biome_river_tropical_freshwater":
				data = nil
			case "biome_river_tropical_saltwater":
				data = nil
			case "biome_savanna_temperate":
				data = nil
			case "biome_savanna_tropical":
				data = nil
			case "biome_shrubland_temperate":
				data = nil
			case "biome_shrubland_tropical":
				data = nil
			case "biome_subterranean_chasm":
				data = nil
			case "biome_subterranean_lava":
				data = nil
			case "biome_subterranean_water":
				data = nil
			case "biome_swamp_mangrove":
				data = nil
			case "biome_swamp_temperate_freshwater":
				data = nil
			case "biome_swamp_temperate_saltwater":
				data = nil
			case "biome_swamp_tropical_freshwater":
				data = nil
			case "biome_swamp_tropical_saltwater":
				data = nil
			case "biome_tundra":
				data = nil
			case "creature_id":
				data = nil
			case "does_not_exist":
				data = nil
			case "equipment":
				data = nil
			case "equipment_wagon":
				data = nil
			case "evil":
				data = nil
			case "fanciful":
				data = nil
			case "generated":
				data = nil
			case "good":
				data = nil
			case "has_any_benign":
				data = nil
			case "has_any_can_swim":
				data = nil
			case "has_any_cannot_breathe_air":
				data = nil
			case "has_any_cannot_breathe_water":
				data = nil
			case "has_any_carnivore":
				data = nil
			case "has_any_common_domestic":
				data = nil
			case "has_any_curious_beast":
				data = nil
			case "has_any_demon":
				data = nil
			case "has_any_feature_beast":
				data = nil
			case "has_any_flier":
				data = nil
			case "has_any_fly_race_gait":
				data = nil
			case "has_any_grasp":
				data = nil
			case "has_any_grazer":
				data = nil
			case "has_any_has_blood":
				data = nil
			case "has_any_immobile":
				data = nil
			case "has_any_intelligent_learns":
				data = nil
			case "has_any_intelligent_speaks":
				data = nil
			case "has_any_large_predator":
				data = nil
			case "has_any_local_pops_controllable":
				data = nil
			case "has_any_local_pops_produce_heroes":
				data = nil
			case "has_any_megabeast":
				data = nil
			case "has_any_mischievous":
				data = nil
			case "has_any_natural_animal":
				data = nil
			case "has_any_night_creature":
				data = nil
			case "has_any_night_creature_bogeyman":
				data = nil
			case "has_any_night_creature_hunter":
				data = nil
			case "has_any_night_creature_nightmare":
				data = nil
			case "has_any_not_fireimmune":
				data = nil
			case "has_any_not_living":
				data = nil
			case "has_any_outsider_controllable":
				data = nil
			case "has_any_race_gait":
				data = nil
			case "has_any_semimegabeast":
				data = nil
			case "has_any_slow_learner":
				data = nil
			case "has_any_supernatural":
				data = nil
			case "has_any_titan":
				data = nil
			case "has_any_unique_demon":
				data = nil
			case "has_any_utterances":
				data = nil
			case "has_any_vermin_hateable":
				data = nil
			case "has_any_vermin_micro":
				data = nil
			case "has_female":
				data = nil
			case "has_male":
				data = nil
			case "large_roaming":
				data = nil
			case "loose_clusters":
				data = nil
			case "mates_to_breed":
				data = nil
			case "mundane":
				data = nil
			case "name_plural":
				data = nil
			case "name_singular":
				data = nil
			case "occurs_as_entity_race":
				data = nil
			case "savage":
				data = nil
			case "small_race":
				data = nil
			case "two_genders":
				data = nil
			case "ubiquitous":
				data = nil
			case "vermin_eater":
				data = nil
			case "vermin_fish":
				data = nil
			case "vermin_grounder":
				data = nil
			case "vermin_rotter":
				data = nil
			case "vermin_soil":
				data = nil
			case "vermin_soil_colony":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "all_castes_alive":
				obj.AllCastesAlive = true
			case "artificial_hiveable":
				obj.ArtificialHiveable = true
			case "biome_desert_badland":
				obj.BiomeDesertBadland = true
			case "biome_desert_rock":
				obj.BiomeDesertRock = true
			case "biome_desert_sand":
				obj.BiomeDesertSand = true
			case "biome_forest_taiga":
				obj.BiomeForestTaiga = true
			case "biome_forest_temperate_broadleaf":
				obj.BiomeForestTemperateBroadleaf = true
			case "biome_forest_temperate_conifer":
				obj.BiomeForestTemperateConifer = true
			case "biome_forest_tropical_conifer":
				obj.BiomeForestTropicalConifer = true
			case "biome_forest_tropical_dry_broadleaf":
				obj.BiomeForestTropicalDryBroadleaf = true
			case "biome_forest_tropical_moist_broadleaf":
				obj.BiomeForestTropicalMoistBroadleaf = true
			case "biome_glacier":
				obj.BiomeGlacier = true
			case "biome_grassland_temperate":
				obj.BiomeGrasslandTemperate = true
			case "biome_grassland_tropical":
				obj.BiomeGrasslandTropical = true
			case "biome_lake_temperate_brackishwater":
				obj.BiomeLakeTemperateBrackishwater = true
			case "biome_lake_temperate_freshwater":
				obj.BiomeLakeTemperateFreshwater = true
			case "biome_lake_temperate_saltwater":
				obj.BiomeLakeTemperateSaltwater = true
			case "biome_lake_tropical_brackishwater":
				obj.BiomeLakeTropicalBrackishwater = true
			case "biome_lake_tropical_freshwater":
				obj.BiomeLakeTropicalFreshwater = true
			case "biome_lake_tropical_saltwater":
				obj.BiomeLakeTropicalSaltwater = true
			case "biome_marsh_temperate_freshwater":
				obj.BiomeMarshTemperateFreshwater = true
			case "biome_marsh_temperate_saltwater":
				obj.BiomeMarshTemperateSaltwater = true
			case "biome_marsh_tropical_freshwater":
				obj.BiomeMarshTropicalFreshwater = true
			case "biome_marsh_tropical_saltwater":
				obj.BiomeMarshTropicalSaltwater = true
			case "biome_mountain":
				obj.BiomeMountain = true
			case "biome_ocean_arctic":
				obj.BiomeOceanArctic = true
			case "biome_ocean_temperate":
				obj.BiomeOceanTemperate = true
			case "biome_ocean_tropical":
				obj.BiomeOceanTropical = true
			case "biome_pool_temperate_brackishwater":
				obj.BiomePoolTemperateBrackishwater = true
			case "biome_pool_temperate_freshwater":
				obj.BiomePoolTemperateFreshwater = true
			case "biome_pool_temperate_saltwater":
				obj.BiomePoolTemperateSaltwater = true
			case "biome_pool_tropical_brackishwater":
				obj.BiomePoolTropicalBrackishwater = true
			case "biome_pool_tropical_freshwater":
				obj.BiomePoolTropicalFreshwater = true
			case "biome_pool_tropical_saltwater":
				obj.BiomePoolTropicalSaltwater = true
			case "biome_river_temperate_brackishwater":
				obj.BiomeRiverTemperateBrackishwater = true
			case "biome_river_temperate_freshwater":
				obj.BiomeRiverTemperateFreshwater = true
			case "biome_river_temperate_saltwater":
				obj.BiomeRiverTemperateSaltwater = true
			case "biome_river_tropical_brackishwater":
				obj.BiomeRiverTropicalBrackishwater = true
			case "biome_river_tropical_freshwater":
				obj.BiomeRiverTropicalFreshwater = true
			case "biome_river_tropical_saltwater":
				obj.BiomeRiverTropicalSaltwater = true
			case "biome_savanna_temperate":
				obj.BiomeSavannaTemperate = true
			case "biome_savanna_tropical":
				obj.BiomeSavannaTropical = true
			case "biome_shrubland_temperate":
				obj.BiomeShrublandTemperate = true
			case "biome_shrubland_tropical":
				obj.BiomeShrublandTropical = true
			case "biome_subterranean_chasm":
				obj.BiomeSubterraneanChasm = true
			case "biome_subterranean_lava":
				obj.BiomeSubterraneanLava = true
			case "biome_subterranean_water":
				obj.BiomeSubterraneanWater = true
			case "biome_swamp_mangrove":
				obj.BiomeSwampMangrove = true
			case "biome_swamp_temperate_freshwater":
				obj.BiomeSwampTemperateFreshwater = true
			case "biome_swamp_temperate_saltwater":
				obj.BiomeSwampTemperateSaltwater = true
			case "biome_swamp_tropical_freshwater":
				obj.BiomeSwampTropicalFreshwater = true
			case "biome_swamp_tropical_saltwater":
				obj.BiomeSwampTropicalSaltwater = true
			case "biome_tundra":
				obj.BiomeTundra = true
			case "creature_id":
				obj.CreatureId = string(data)
			case "does_not_exist":
				obj.DoesNotExist = true
			case "equipment":
				obj.Equipment = true
			case "equipment_wagon":
				obj.EquipmentWagon = true
			case "evil":
				obj.Evil = true
			case "fanciful":
				obj.Fanciful = true
			case "generated":
				obj.Generated = true
			case "good":
				obj.Good = true
			case "has_any_benign":
				obj.HasAnyBenign = true
			case "has_any_can_swim":
				obj.HasAnyCanSwim = true
			case "has_any_cannot_breathe_air":
				obj.HasAnyCannotBreatheAir = true
			case "has_any_cannot_breathe_water":
				obj.HasAnyCannotBreatheWater = true
			case "has_any_carnivore":
				obj.HasAnyCarnivore = true
			case "has_any_common_domestic":
				obj.HasAnyCommonDomestic = true
			case "has_any_curious_beast":
				obj.HasAnyCuriousBeast = true
			case "has_any_demon":
				obj.HasAnyDemon = true
			case "has_any_feature_beast":
				obj.HasAnyFeatureBeast = true
			case "has_any_flier":
				obj.HasAnyFlier = true
			case "has_any_fly_race_gait":
				obj.HasAnyFlyRaceGait = true
			case "has_any_grasp":
				obj.HasAnyGrasp = true
			case "has_any_grazer":
				obj.HasAnyGrazer = true
			case "has_any_has_blood":
				obj.HasAnyHasBlood = true
			case "has_any_immobile":
				obj.HasAnyImmobile = true
			case "has_any_intelligent_learns":
				obj.HasAnyIntelligentLearns = true
			case "has_any_intelligent_speaks":
				obj.HasAnyIntelligentSpeaks = true
			case "has_any_large_predator":
				obj.HasAnyLargePredator = true
			case "has_any_local_pops_controllable":
				obj.HasAnyLocalPopsControllable = true
			case "has_any_local_pops_produce_heroes":
				obj.HasAnyLocalPopsProduceHeroes = true
			case "has_any_megabeast":
				obj.HasAnyMegabeast = true
			case "has_any_mischievous":
				obj.HasAnyMischievous = true
			case "has_any_natural_animal":
				obj.HasAnyNaturalAnimal = true
			case "has_any_night_creature":
				obj.HasAnyNightCreature = true
			case "has_any_night_creature_bogeyman":
				obj.HasAnyNightCreatureBogeyman = true
			case "has_any_night_creature_hunter":
				obj.HasAnyNightCreatureHunter = true
			case "has_any_night_creature_nightmare":
				obj.HasAnyNightCreatureNightmare = true
			case "has_any_not_fireimmune":
				obj.HasAnyNotFireimmune = true
			case "has_any_not_living":
				obj.HasAnyNotLiving = true
			case "has_any_outsider_controllable":
				obj.HasAnyOutsiderControllable = true
			case "has_any_race_gait":
				obj.HasAnyRaceGait = true
			case "has_any_semimegabeast":
				obj.HasAnySemimegabeast = true
			case "has_any_slow_learner":
				obj.HasAnySlowLearner = true
			case "has_any_supernatural":
				obj.HasAnySupernatural = true
			case "has_any_titan":
				obj.HasAnyTitan = true
			case "has_any_unique_demon":
				obj.HasAnyUniqueDemon = true
			case "has_any_utterances":
				obj.HasAnyUtterances = true
			case "has_any_vermin_hateable":
				obj.HasAnyVerminHateable = true
			case "has_any_vermin_micro":
				obj.HasAnyVerminMicro = true
			case "has_female":
				obj.HasFemale = true
			case "has_male":
				obj.HasMale = true
			case "large_roaming":
				obj.LargeRoaming = true
			case "loose_clusters":
				obj.LooseClusters = true
			case "mates_to_breed":
				obj.MatesToBreed = true
			case "mundane":
				obj.Mundane = true
			case "name_plural":
				obj.NamePlural = string(data)
			case "name_singular":
				obj.NameSingular = string(data)
			case "occurs_as_entity_race":
				obj.OccursAsEntityRace = true
			case "savage":
				obj.Savage = true
			case "small_race":
				obj.SmallRace = true
			case "two_genders":
				obj.TwoGenders = true
			case "ubiquitous":
				obj.Ubiquitous = true
			case "vermin_eater":
				obj.VerminEater = true
			case "vermin_fish":
				obj.VerminFish = true
			case "vermin_grounder":
				obj.VerminGrounder = true
			case "vermin_rotter":
				obj.VerminRotter = true
			case "vermin_soil":
				obj.VerminSoil = true
			case "vermin_soil_colony":
				obj.VerminSoilColony = true
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseDanceForm(d *xml.Decoder, start *xml.StartElement) (*DanceForm, error) {
	var (
		obj  = &DanceForm{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "description":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "description":
				obj.Description = string(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseDanceFormPlus(d *xml.Decoder, start *xml.StartElement, obj *DanceForm) (*DanceForm, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &DanceForm{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseDfWorld(d *xml.Decoder, start *xml.StartElement) (*DfWorld, error) {
	var (
		obj  = &DfWorld{}
		data []byte
	)

	obj.Artifacts = make(map[int]*Artifact)

	obj.DanceForms = make(map[int]*DanceForm)
	obj.Entities = make(map[int]*Entity)
	obj.EntityPopulations = make(map[int]*EntityPopulation)

	obj.HistoricalEventCollections = make(map[int]*HistoricalEventCollection)

	obj.HistoricalEvents = make(map[int]*HistoricalEvent)
	obj.HistoricalFigures = make(map[int]*HistoricalFigure)
	obj.Identities = make(map[int]*Identity)
	obj.Landmasses = make(map[int]*Landmass)
	obj.MountainPeaks = make(map[int]*MountainPeak)
	obj.MusicalForms = make(map[int]*MusicalForm)

	obj.PoeticForms = make(map[int]*PoeticForm)
	obj.Regions = make(map[int]*Region)

	obj.Sites = make(map[int]*Site)
	obj.UndergroundRegions = make(map[int]*UndergroundRegion)
	obj.WorldConstructions = make(map[int]*WorldConstruction)
	obj.WrittenContents = make(map[int]*WrittenContent)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifacts":
				parseMap(d, &obj.Artifacts, parseArtifact)
			case "dance_forms":
				parseMap(d, &obj.DanceForms, parseDanceForm)
			case "entities":
				parseMap(d, &obj.Entities, parseEntity)
			case "entity_populations":
				parseMap(d, &obj.EntityPopulations, parseEntityPopulation)
			case "historical_eras":
				parseArray(d, &obj.HistoricalEras, parseHistoricalEra)
			case "historical_event_collections":
				parseMap(d, &obj.HistoricalEventCollections, parseHistoricalEventCollection)
			case "historical_events":
				parseMap(d, &obj.HistoricalEvents, parseHistoricalEvent)
			case "historical_figures":
				parseMap(d, &obj.HistoricalFigures, parseHistoricalFigure)
			case "musical_forms":
				parseMap(d, &obj.MusicalForms, parseMusicalForm)
			case "poetic_forms":
				parseMap(d, &obj.PoeticForms, parsePoeticForm)
			case "regions":
				parseMap(d, &obj.Regions, parseRegion)
			case "sites":
				parseMap(d, &obj.Sites, parseSite)
			case "underground_regions":
				parseMap(d, &obj.UndergroundRegions, parseUndergroundRegion)
			case "world_constructions":
				parseMap(d, &obj.WorldConstructions, parseWorldConstruction)
			case "written_contents":
				parseMap(d, &obj.WrittenContents, parseWrittenContent)
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifacts":

			case "dance_forms":

			case "entities":

			case "entity_populations":

			case "historical_eras":

			case "historical_event_collections":

			case "historical_events":

			case "historical_figures":

			case "musical_forms":

			case "poetic_forms":

			case "regions":

			case "sites":

			case "underground_regions":

			case "world_constructions":

			case "written_contents":

			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseDfWorldPlus(d *xml.Decoder, start *xml.StartElement, obj *DfWorld) (*DfWorld, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &DfWorld{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "altname":
				data = nil
			case "artifacts":
				parseMapPlus(d, &obj.Artifacts, parseArtifactPlus)
			case "creature_raw":
				parseArray(d, &obj.CreatureRaw, parseCreature)
			case "dance_forms":
				parseMapPlus(d, &obj.DanceForms, parseDanceFormPlus)
			case "entities":
				parseMapPlus(d, &obj.Entities, parseEntityPlus)
			case "entity_populations":
				parseMapPlus(d, &obj.EntityPopulations, parseEntityPopulationPlus)
			case "historical_eras":
				parseArray(d, &obj.HistoricalEras, parseHistoricalEra)
			case "historical_event_collections":
				parseMapPlus(d, &obj.HistoricalEventCollections, parseHistoricalEventCollectionPlus)
			case "historical_event_relationship_supplements":
				parseArray(d, &obj.HistoricalEventRelationshipSupplements, parseHistoricalEventRelationshipSupplement)
			case "historical_event_relationships":
				parseArray(d, &obj.HistoricalEventRelationships, parseHistoricalEventRelationship)
			case "historical_events":
				parseMapPlus(d, &obj.HistoricalEvents, parseHistoricalEventPlus)
			case "historical_figures":
				parseMapPlus(d, &obj.HistoricalFigures, parseHistoricalFigurePlus)
			case "identities":
				parseMapPlus(d, &obj.Identities, parseIdentityPlus)
			case "landmasses":
				parseMapPlus(d, &obj.Landmasses, parseLandmassPlus)
			case "mountain_peaks":
				parseMapPlus(d, &obj.MountainPeaks, parseMountainPeakPlus)
			case "musical_forms":
				parseMapPlus(d, &obj.MusicalForms, parseMusicalFormPlus)
			case "name":
				data = nil
			case "poetic_forms":
				parseMapPlus(d, &obj.PoeticForms, parsePoeticFormPlus)
			case "regions":
				parseMapPlus(d, &obj.Regions, parseRegionPlus)
			case "rivers":
				parseArray(d, &obj.Rivers, parseRiver)
			case "sites":
				parseMapPlus(d, &obj.Sites, parseSitePlus)
			case "underground_regions":
				parseMapPlus(d, &obj.UndergroundRegions, parseUndergroundRegionPlus)
			case "world_constructions":
				parseMapPlus(d, &obj.WorldConstructions, parseWorldConstructionPlus)
			case "written_contents":
				parseMapPlus(d, &obj.WrittenContents, parseWrittenContentPlus)
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "altname":
				obj.Altname = string(data)
			case "artifacts":

			case "creature_raw":

			case "dance_forms":

			case "entities":

			case "entity_populations":

			case "historical_eras":

			case "historical_event_collections":

			case "historical_event_relationship_supplements":

			case "historical_event_relationships":

			case "historical_events":

			case "historical_figures":

			case "identities":

			case "landmasses":

			case "mountain_peaks":

			case "musical_forms":

			case "name":
				obj.Name_ = string(data)
			case "poetic_forms":

			case "regions":

			case "rivers":

			case "sites":

			case "underground_regions":

			case "world_constructions":

			case "written_contents":

			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntity(d *xml.Decoder, start *xml.StartElement) (*Entity, error) {
	var (
		obj  = &Entity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "honor":
				v, _ := parseHonor(d, &t)
				obj.Honor = append(obj.Honor, v)
			case "id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "honor":

			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPlus(d *xml.Decoder, start *xml.StartElement, obj *Entity) (*Entity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Entity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "child":
				data = nil
			case "claims":
				data = nil
			case "entity_link":
				v, _ := parseEntityEntityLinkPlus(d, &t, &EntityEntityLink{})
				obj.EntityLink = append(obj.EntityLink, v)
			case "entity_position":
				v, _ := parseEntityPositionPlus(d, &t, &EntityPosition{})
				obj.EntityPosition = append(obj.EntityPosition, v)
			case "entity_position_assignment":
				v, _ := parseEntityPositionAssignmentPlus(d, &t, &EntityPositionAssignment{})
				obj.EntityPositionAssignment = append(obj.EntityPositionAssignment, v)
			case "histfig_id":
				data = nil
			case "id":
				data = nil
			case "occasion":
				v, _ := parseOccasionPlus(d, &t, &Occasion{})
				obj.Occasion = append(obj.Occasion, v)
			case "profession":
				data = nil
			case "race":
				data = nil
			case "type":
				data = nil
			case "weapon":
				data = nil
			case "worship_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "child":
				obj.Child = append(obj.Child, n(data))
			case "claims":
				obj.Claims = string(data)
			case "entity_link":

			case "entity_position":

			case "entity_position_assignment":

			case "histfig_id":
				obj.HistfigId = append(obj.HistfigId, n(data))
			case "id":
				obj.Id_ = n(data)
			case "occasion":

			case "profession":
				obj.Profession = string(data)
			case "race":
				obj.Race = string(data)
			case "type":
				obj.Type = string(data)
			case "weapon":
				obj.Weapon = append(obj.Weapon, string(data))
			case "worship_id":
				obj.WorshipId = append(obj.WorshipId, n(data))
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityEntityLink(d *xml.Decoder, start *xml.StartElement) (*EntityEntityLink, error) {
	var (
		obj  = &EntityEntityLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityEntityLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityEntityLink) (*EntityEntityLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityEntityLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "strength":
				data = nil
			case "target":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "strength":
				obj.Strength = n(data)
			case "target":
				obj.Target = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityFormerPositionLink(d *xml.Decoder, start *xml.StartElement) (*EntityFormerPositionLink, error) {
	var (
		obj  = &EntityFormerPositionLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "end_year":
				data = nil
			case "entity_id":
				data = nil
			case "position_profile_id":
				data = nil
			case "start_year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "end_year":
				obj.EndYear = n(data)
			case "entity_id":
				obj.EntityId = n(data)
			case "position_profile_id":
				obj.PositionProfileId = n(data)
			case "start_year":
				obj.StartYear = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityFormerPositionLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityFormerPositionLink) (*EntityFormerPositionLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityFormerPositionLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPopulation(d *xml.Decoder, start *xml.StartElement) (*EntityPopulation, error) {
	var (
		obj  = &EntityPopulation{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPopulationPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityPopulation) (*EntityPopulation, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityPopulation{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "id":
				data = nil
			case "race":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "id":
				obj.Id_ = n(data)
			case "race":
				obj.Race = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPosition(d *xml.Decoder, start *xml.StartElement) (*EntityPosition, error) {
	var (
		obj  = &EntityPosition{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPositionPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityPosition) (*EntityPosition, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityPosition{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "name":
				data = nil
			case "name_female":
				data = nil
			case "name_male":
				data = nil
			case "spouse":
				data = nil
			case "spouse_female":
				data = nil
			case "spouse_male":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "name_female":
				obj.NameFemale = string(data)
			case "name_male":
				obj.NameMale = string(data)
			case "spouse":
				obj.Spouse = string(data)
			case "spouse_female":
				obj.SpouseFemale = string(data)
			case "spouse_male":
				obj.SpouseMale = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPositionAssignment(d *xml.Decoder, start *xml.StartElement) (*EntityPositionAssignment, error) {
	var (
		obj  = &EntityPositionAssignment{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPositionAssignmentPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityPositionAssignment) (*EntityPositionAssignment, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityPositionAssignment{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "histfig":
				data = nil
			case "id":
				data = nil
			case "position_id":
				data = nil
			case "squad_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "histfig":
				obj.Histfig = n(data)
			case "id":
				obj.Id_ = n(data)
			case "position_id":
				obj.PositionId = n(data)
			case "squad_id":
				obj.SquadId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPositionLink(d *xml.Decoder, start *xml.StartElement) (*EntityPositionLink, error) {
	var (
		obj  = &EntityPositionLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "position_profile_id":
				data = nil
			case "start_year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "position_profile_id":
				obj.PositionProfileId = n(data)
			case "start_year":
				obj.StartYear = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityPositionLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityPositionLink) (*EntityPositionLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityPositionLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityReputation(d *xml.Decoder, start *xml.StartElement) (*EntityReputation, error) {
	var (
		obj  = &EntityReputation{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "first_ageless_season_count":
				data = nil
			case "first_ageless_year":
				data = nil
			case "unsolved_murders":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "first_ageless_season_count":
				obj.FirstAgelessSeasonCount = n(data)
			case "first_ageless_year":
				obj.FirstAgelessYear = n(data)
			case "unsolved_murders":
				obj.UnsolvedMurders = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntityReputationPlus(d *xml.Decoder, start *xml.StartElement, obj *EntityReputation) (*EntityReputation, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntityReputation{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntitySquadLink(d *xml.Decoder, start *xml.StartElement) (*EntitySquadLink, error) {
	var (
		obj  = &EntitySquadLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "squad_id":
				data = nil
			case "squad_position":
				data = nil
			case "start_year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "squad_id":
				obj.SquadId = n(data)
			case "squad_position":
				obj.SquadPosition = n(data)
			case "start_year":
				obj.StartYear = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseEntitySquadLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *EntitySquadLink) (*EntitySquadLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &EntitySquadLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseFeature(d *xml.Decoder, start *xml.StartElement) (*Feature, error) {
	var (
		obj  = &Feature{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseFeaturePlus(d *xml.Decoder, start *xml.StartElement, obj *Feature) (*Feature, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Feature{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "reference":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "reference":
				obj.Reference = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHfLink(d *xml.Decoder, start *xml.StartElement) (*HfLink, error) {
	var (
		obj  = &HfLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "link_strength":
				data = nil
			case "link_type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "link_strength":
				obj.LinkStrength = n(data)
			case "link_type":
				obj.LinkType = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHfLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HfLink) (*HfLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HfLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHfSkill(d *xml.Decoder, start *xml.StartElement) (*HfSkill, error) {
	var (
		obj  = &HfSkill{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "skill":
				data = nil
			case "total_ip":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "skill":
				obj.Skill = string(data)
			case "total_ip":
				obj.TotalIp = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHfSkillPlus(d *xml.Decoder, start *xml.StartElement, obj *HfSkill) (*HfSkill, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HfSkill{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEra(d *xml.Decoder, start *xml.StartElement) (*HistoricalEra, error) {
	var (
		obj  = &HistoricalEra{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "name":
				data = nil
			case "start_year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "name":
				obj.Name_ = string(data)
			case "start_year":
				obj.StartYear = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEraPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEra) (*HistoricalEra, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEra{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEvent(d *xml.Decoder, start *xml.StartElement) (*HistoricalEvent, error) {
	var (
		obj  = &HistoricalEvent{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "seconds72":
				data = nil
			case "type":
				data = nil
			case "year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "seconds72":
				obj.Seconds72 = n(data)
			case "type":

				var err error
				switch string(data) {
				case "add hf entity honor":
					obj.Details, err = parseHistoricalEventAddHfEntityHonor(d, start)
				case "add hf entity link":
					obj.Details, err = parseHistoricalEventAddHfEntityLink(d, start)
				case "add hf hf link":
					obj.Details, err = parseHistoricalEventAddHfHfLink(d, start)
				case "add hf site link":
					obj.Details, err = parseHistoricalEventAddHfSiteLink(d, start)
				case "agreement formed":
					obj.Details, err = parseHistoricalEventAgreementFormed(d, start)
				case "artifact claim formed":
					obj.Details, err = parseHistoricalEventArtifactClaimFormed(d, start)
				case "artifact copied":
					obj.Details, err = parseHistoricalEventArtifactCopied(d, start)
				case "artifact created":
					obj.Details, err = parseHistoricalEventArtifactCreated(d, start)
				case "artifact destroyed":
					obj.Details, err = parseHistoricalEventArtifactDestroyed(d, start)
				case "artifact found":
					obj.Details, err = parseHistoricalEventArtifactFound(d, start)
				case "artifact given":
					obj.Details, err = parseHistoricalEventArtifactGiven(d, start)
				case "artifact lost":
					obj.Details, err = parseHistoricalEventArtifactLost(d, start)
				case "artifact possessed":
					obj.Details, err = parseHistoricalEventArtifactPossessed(d, start)
				case "artifact recovered":
					obj.Details, err = parseHistoricalEventArtifactRecovered(d, start)
				case "artifact stored":
					obj.Details, err = parseHistoricalEventArtifactStored(d, start)
				case "assume identity":
					obj.Details, err = parseHistoricalEventAssumeIdentity(d, start)
				case "attacked site":
					obj.Details, err = parseHistoricalEventAttackedSite(d, start)
				case "body abused":
					obj.Details, err = parseHistoricalEventBodyAbused(d, start)
				case "building profile acquired":
					obj.Details, err = parseHistoricalEventBuildingProfileAcquired(d, start)
				case "ceremony":
					obj.Details, err = parseHistoricalEventCeremony(d, start)
				case "change hf body state":
					obj.Details, err = parseHistoricalEventChangeHfBodyState(d, start)
				case "change hf job":
					obj.Details, err = parseHistoricalEventChangeHfJob(d, start)
				case "change hf state":
					obj.Details, err = parseHistoricalEventChangeHfState(d, start)
				case "changed creature type":
					obj.Details, err = parseHistoricalEventChangedCreatureType(d, start)
				case "competition":
					obj.Details, err = parseHistoricalEventCompetition(d, start)
				case "create entity position":
					obj.Details, err = parseHistoricalEventCreateEntityPosition(d, start)
				case "created site":
					obj.Details, err = parseHistoricalEventCreatedSite(d, start)
				case "created structure":
					obj.Details, err = parseHistoricalEventCreatedStructure(d, start)
				case "created world construction":
					obj.Details, err = parseHistoricalEventCreatedWorldConstruction(d, start)
				case "creature devoured":
					obj.Details, err = parseHistoricalEventCreatureDevoured(d, start)
				case "dance form created":
					obj.Details, err = parseHistoricalEventDanceFormCreated(d, start)
				case "destroyed site":
					obj.Details, err = parseHistoricalEventDestroyedSite(d, start)
				case "entity alliance formed":
					obj.Details, err = parseHistoricalEventEntityAllianceFormed(d, start)
				case "entity breach feature layer":
					obj.Details, err = parseHistoricalEventEntityBreachFeatureLayer(d, start)
				case "entity created":
					obj.Details, err = parseHistoricalEventEntityCreated(d, start)
				case "entity dissolved":
					obj.Details, err = parseHistoricalEventEntityDissolved(d, start)
				case "entity equipment purchase":
					obj.Details, err = parseHistoricalEventEntityEquipmentPurchase(d, start)
				case "entity incorporated":
					obj.Details, err = parseHistoricalEventEntityIncorporated(d, start)
				case "entity law":
					obj.Details, err = parseHistoricalEventEntityLaw(d, start)
				case "entity overthrown":
					obj.Details, err = parseHistoricalEventEntityOverthrown(d, start)
				case "entity persecuted":
					obj.Details, err = parseHistoricalEventEntityPersecuted(d, start)
				case "entity primary criminals":
					obj.Details, err = parseHistoricalEventEntityPrimaryCriminals(d, start)
				case "entity relocate":
					obj.Details, err = parseHistoricalEventEntityRelocate(d, start)
				case "failed frame attempt":
					obj.Details, err = parseHistoricalEventFailedFrameAttempt(d, start)
				case "failed intrigue corruption":
					obj.Details, err = parseHistoricalEventFailedIntrigueCorruption(d, start)
				case "field battle":
					obj.Details, err = parseHistoricalEventFieldBattle(d, start)
				case "gamble":
					obj.Details, err = parseHistoricalEventGamble(d, start)
				case "hf abducted":
					obj.Details, err = parseHistoricalEventHfAbducted(d, start)
				case "hf attacked site":
					obj.Details, err = parseHistoricalEventHfAttackedSite(d, start)
				case "hf confronted":
					obj.Details, err = parseHistoricalEventHfConfronted(d, start)
				case "hf convicted":
					obj.Details, err = parseHistoricalEventHfConvicted(d, start)
				case "hf destroyed site":
					obj.Details, err = parseHistoricalEventHfDestroyedSite(d, start)
				case "hf died":
					obj.Details, err = parseHistoricalEventHfDied(d, start)
				case "hf disturbed structure":
					obj.Details, err = parseHistoricalEventHfDisturbedStructure(d, start)
				case "hf does interaction":
					obj.Details, err = parseHistoricalEventHfDoesInteraction(d, start)
				case "hf enslaved":
					obj.Details, err = parseHistoricalEventHfEnslaved(d, start)
				case "hf equipment purchase":
					obj.Details, err = parseHistoricalEventHfEquipmentPurchase(d, start)
				case "hf gains secret goal":
					obj.Details, err = parseHistoricalEventHfGainsSecretGoal(d, start)
				case "hf interrogated":
					obj.Details, err = parseHistoricalEventHfInterrogated(d, start)
				case "hf learns secret":
					obj.Details, err = parseHistoricalEventHfLearnsSecret(d, start)
				case "hf new pet":
					obj.Details, err = parseHistoricalEventHfNewPet(d, start)
				case "hf performed horrible experiments":
					obj.Details, err = parseHistoricalEventHfPerformedHorribleExperiments(d, start)
				case "hf prayed inside structure":
					obj.Details, err = parseHistoricalEventHfPrayedInsideStructure(d, start)
				case "hf preach":
					obj.Details, err = parseHistoricalEventHfPreach(d, start)
				case "hf profaned structure":
					obj.Details, err = parseHistoricalEventHfProfanedStructure(d, start)
				case "hf recruited unit type for entity":
					obj.Details, err = parseHistoricalEventHfRecruitedUnitTypeForEntity(d, start)
				case "hf relationship denied":
					obj.Details, err = parseHistoricalEventHfRelationshipDenied(d, start)
				case "hf reunion":
					obj.Details, err = parseHistoricalEventHfReunion(d, start)
				case "hf revived":
					obj.Details, err = parseHistoricalEventHfRevived(d, start)
				case "hf simple battle event":
					obj.Details, err = parseHistoricalEventHfSimpleBattleEvent(d, start)
				case "hf travel":
					obj.Details, err = parseHistoricalEventHfTravel(d, start)
				case "hf viewed artifact":
					obj.Details, err = parseHistoricalEventHfViewedArtifact(d, start)
				case "hf wounded":
					obj.Details, err = parseHistoricalEventHfWounded(d, start)
				case "hfs formed intrigue relationship":
					obj.Details, err = parseHistoricalEventHfsFormedIntrigueRelationship(d, start)
				case "hfs formed reputation relationship":
					obj.Details, err = parseHistoricalEventHfsFormedReputationRelationship(d, start)
				case "holy city declaration":
					obj.Details, err = parseHistoricalEventHolyCityDeclaration(d, start)
				case "item stolen":
					obj.Details, err = parseHistoricalEventItemStolen(d, start)
				case "knowledge discovered":
					obj.Details, err = parseHistoricalEventKnowledgeDiscovered(d, start)
				case "masterpiece item":
					obj.Details, err = parseHistoricalEventMasterpieceItem(d, start)
				case "merchant":
					obj.Details, err = parseHistoricalEventMerchant(d, start)
				case "modified building":
					obj.Details, err = parseHistoricalEventModifiedBuilding(d, start)
				case "musical form created":
					obj.Details, err = parseHistoricalEventMusicalFormCreated(d, start)
				case "new site leader":
					obj.Details, err = parseHistoricalEventNewSiteLeader(d, start)
				case "peace accepted":
					obj.Details, err = parseHistoricalEventPeaceAccepted(d, start)
				case "peace rejected":
					obj.Details, err = parseHistoricalEventPeaceRejected(d, start)
				case "performance":
					obj.Details, err = parseHistoricalEventPerformance(d, start)
				case "plundered site":
					obj.Details, err = parseHistoricalEventPlunderedSite(d, start)
				case "poetic form created":
					obj.Details, err = parseHistoricalEventPoeticFormCreated(d, start)
				case "procession":
					obj.Details, err = parseHistoricalEventProcession(d, start)
				case "razed structure":
					obj.Details, err = parseHistoricalEventRazedStructure(d, start)
				case "reclaim site":
					obj.Details, err = parseHistoricalEventReclaimSite(d, start)
				case "regionpop incorporated into entity":
					obj.Details, err = parseHistoricalEventRegionpopIncorporatedIntoEntity(d, start)
				case "remove hf entity link":
					obj.Details, err = parseHistoricalEventRemoveHfEntityLink(d, start)
				case "remove hf hf link":
					obj.Details, err = parseHistoricalEventRemoveHfHfLink(d, start)
				case "remove hf site link":
					obj.Details, err = parseHistoricalEventRemoveHfSiteLink(d, start)
				case "replaced structure":
					obj.Details, err = parseHistoricalEventReplacedStructure(d, start)
				case "site dispute":
					obj.Details, err = parseHistoricalEventSiteDispute(d, start)
				case "site taken over":
					obj.Details, err = parseHistoricalEventSiteTakenOver(d, start)
				case "squad vs squad":
					obj.Details, err = parseHistoricalEventSquadVsSquad(d, start)
				case "tactical situation":
					obj.Details, err = parseHistoricalEventTacticalSituation(d, start)
				case "trade":
					obj.Details, err = parseHistoricalEventTrade(d, start)
				case "written content composed":
					obj.Details, err = parseHistoricalEventWrittenContentComposed(d, start)
				default:
					d.Skip()
				}
				if err != nil {
					return nil, err
				}
				return obj, nil
			case "year":
				obj.Year = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEvent) (*HistoricalEvent, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEvent{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "type":

				var err error
				switch string(data) {
				case "add_hf_entity_link":
					obj.Details, err = parseHistoricalEventAddHfEntityLinkPlus(d, start, obj.Details.(*HistoricalEventAddHfEntityLink))
				case "add_hf_hf_link":
					obj.Details, err = parseHistoricalEventAddHfHfLinkPlus(d, start, obj.Details.(*HistoricalEventAddHfHfLink))
				case "add_hf_site_link":
					obj.Details, err = parseHistoricalEventAddHfSiteLinkPlus(d, start, obj.Details.(*HistoricalEventAddHfSiteLink))
				case "artifact_created":
					obj.Details, err = parseHistoricalEventArtifactCreatedPlus(d, start, obj.Details.(*HistoricalEventArtifactCreated))
				case "assume_identity":
					obj.Details, err = parseHistoricalEventAssumeIdentityPlus(d, start, obj.Details.(*HistoricalEventAssumeIdentity))
				case "body_abused":
					obj.Details, err = parseHistoricalEventBodyAbusedPlus(d, start, obj.Details.(*HistoricalEventBodyAbused))
				case "change_creature_type":
					obj.Details, err = parseHistoricalEventChangedCreatureTypePlus(d, start, obj.Details.(*HistoricalEventChangedCreatureType))
				case "change_hf_job":
					obj.Details, err = parseHistoricalEventChangeHfJobPlus(d, start, obj.Details.(*HistoricalEventChangeHfJob))
				case "change_hf_state":
					obj.Details, err = parseHistoricalEventChangeHfStatePlus(d, start, obj.Details.(*HistoricalEventChangeHfState))
				case "create_entity_position":
					obj.Details, err = parseHistoricalEventCreateEntityPositionPlus(d, start, obj.Details.(*HistoricalEventCreateEntityPosition))
				case "created_building":
					obj.Details, err = parseHistoricalEventCreatedStructurePlus(d, start, obj.Details.(*HistoricalEventCreatedStructure))
				case "creature_devoured":
					obj.Details, err = parseHistoricalEventCreatureDevouredPlus(d, start, obj.Details.(*HistoricalEventCreatureDevoured))
				case "entity_action":
					switch details := obj.Details.(type) {
					case *HistoricalEventEntityRelocate:
						obj.Details, err = parseHistoricalEventEntityRelocatePlus(d, start, details)
					case *HistoricalEventEntityPrimaryCriminals:
						obj.Details, err = parseHistoricalEventEntityPrimaryCriminalsPlus(d, start, details)
					default:
						fmt.Println("unknown subtype option", obj.Details)
						d.Skip()
					}
				case "hf_act_on_building":
					switch details := obj.Details.(type) {
					case *HistoricalEventHfDisturbedStructure:
						obj.Details, err = parseHistoricalEventHfDisturbedStructurePlus(d, start, details)
					case *HistoricalEventHfProfanedStructure:
						obj.Details, err = parseHistoricalEventHfProfanedStructurePlus(d, start, details)
					case *HistoricalEventHfPrayedInsideStructure:
						obj.Details, err = parseHistoricalEventHfPrayedInsideStructurePlus(d, start, details)
					default:
						fmt.Println("unknown subtype option", obj.Details)
						d.Skip()
					}
				case "hf_does_interaction":
					obj.Details, err = parseHistoricalEventHfDoesInteractionPlus(d, start, obj.Details.(*HistoricalEventHfDoesInteraction))
				case "hf_learns_secret":
					obj.Details, err = parseHistoricalEventHfLearnsSecretPlus(d, start, obj.Details.(*HistoricalEventHfLearnsSecret))
				case "hist_figure_died":
					obj.Details, err = parseHistoricalEventHfDiedPlus(d, start, obj.Details.(*HistoricalEventHfDied))
				case "hist_figure_new_pet":
					obj.Details, err = parseHistoricalEventHfNewPetPlus(d, start, obj.Details.(*HistoricalEventHfNewPet))
				case "hist_figure_wounded":
					obj.Details, err = parseHistoricalEventHfWoundedPlus(d, start, obj.Details.(*HistoricalEventHfWounded))
				case "item_stolen":
					obj.Details, err = parseHistoricalEventItemStolenPlus(d, start, obj.Details.(*HistoricalEventItemStolen))
				case "masterpiece_created_item":
					obj.Details, err = parseHistoricalEventMasterpieceItemPlus(d, start, obj.Details.(*HistoricalEventMasterpieceItem))
				case "merchant":
					obj.Details, err = parseHistoricalEventMerchantPlus(d, start, obj.Details.(*HistoricalEventMerchant))
				case "remove_hf_entity_link":
					obj.Details, err = parseHistoricalEventRemoveHfEntityLinkPlus(d, start, obj.Details.(*HistoricalEventRemoveHfEntityLink))
				case "remove_hf_site_link":
					obj.Details, err = parseHistoricalEventRemoveHfSiteLinkPlus(d, start, obj.Details.(*HistoricalEventRemoveHfSiteLink))
				case "replaced_building":
					obj.Details, err = parseHistoricalEventReplacedStructurePlus(d, start, obj.Details.(*HistoricalEventReplacedStructure))
				case "war_peace_accepted":
					obj.Details, err = parseHistoricalEventPeaceAcceptedPlus(d, start, obj.Details.(*HistoricalEventPeaceAccepted))
				case "war_peace_rejected":
					obj.Details, err = parseHistoricalEventPeaceRejectedPlus(d, start, obj.Details.(*HistoricalEventPeaceRejected))
				default:
					d.Skip()
				}
				if err != nil {
					return nil, err
				}
				return obj, nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfEntityHonor(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAddHfEntityHonor, error) {
	var (
		obj  = &HistoricalEventAddHfEntityHonor{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "hfid":
				data = nil
			case "honor_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "honor_id":
				obj.HonorId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfEntityHonorPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAddHfEntityHonor) (*HistoricalEventAddHfEntityHonor, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAddHfEntityHonor{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfEntityLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAddHfEntityLink, error) {
	var (
		obj  = &HistoricalEventAddHfEntityLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "appointer_hfid":
				data = nil
			case "civ_id":
				data = nil
			case "hfid":
				data = nil
			case "link":
				data = nil
			case "position_id":
				data = nil
			case "promise_to_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "appointer_hfid":
				obj.AppointerHfid = n(data)
			case "civ_id":
				obj.CivId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "link":
				obj.Link = string(data)
			case "position_id":
				obj.PositionId = n(data)
			case "promise_to_hfid":
				obj.PromiseToHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfEntityLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAddHfEntityLink) (*HistoricalEventAddHfEntityLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAddHfEntityLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "appointer_hfid":
				data = nil
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "link_type":
				data = nil
			case "position":
				data = nil
			case "promise_to_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "appointer_hfid":
				obj.AppointerHfid = n(data)
			case "civ":
				obj.CivId = n(data)
			case "histfig":
				obj.Hfid = n(data)
			case "link_type":
				obj.Link = string(data)
			case "position":
				obj.Position = string(data)
			case "promise_to_hfid":
				obj.PromiseToHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfHfLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAddHfHfLink, error) {
	var (
		obj  = &HistoricalEventAddHfHfLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "hfid_target":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "hfid_target":
				obj.HfidTarget = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfHfLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAddHfHfLink) (*HistoricalEventAddHfHfLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAddHfHfLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hf":
				data = nil
			case "hf_target":
				data = nil
			case "link_type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hf":
				obj.Hfid = n(data)
			case "hf_target":
				obj.HfidTarget = n(data)
			case "link_type":
				obj.LinkType = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfSiteLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAddHfSiteLink, error) {
	var (
		obj  = &HistoricalEventAddHfSiteLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAddHfSiteLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAddHfSiteLink) (*HistoricalEventAddHfSiteLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAddHfSiteLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "link_type":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ":
				obj.Civ = n(data)
			case "histfig":
				obj.Histfig = n(data)
			case "link_type":
				obj.LinkType = string(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.Structure = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAgreementFormed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAgreementFormed, error) {
	var (
		obj  = &HistoricalEventAgreementFormed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "agreement_id":
				data = nil
			case "ally_defense_bonus":
				data = nil
			case "coconspirator_bonus":
				data = nil
			case "delegated":
				data = nil
			case "failed_judgment_test":
				data = nil
			case "method":
				data = nil
			case "relevant_entity_id":
				data = nil
			case "relevant_id_for_method":
				data = nil
			case "relevant_position_profile_id":
				data = nil
			case "successful":
				data = nil
			case "top_facet":
				data = nil
			case "top_facet_modifier":
				data = nil
			case "top_facet_rating":
				data = nil
			case "top_relationship_factor":
				data = nil
			case "top_relationship_modifier":
				data = nil
			case "top_relationship_rating":
				data = nil
			case "top_value":
				data = nil
			case "top_value_modifier":
				data = nil
			case "top_value_rating":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "agreement_id":
				obj.AgreementId = n(data)
			case "ally_defense_bonus":
				obj.AllyDefenseBonus = n(data)
			case "coconspirator_bonus":
				obj.CoconspiratorBonus = n(data)
			case "delegated":
				obj.Delegated = true
			case "failed_judgment_test":
				obj.FailedJudgmentTest = true
			case "method":
				obj.Method = string(data)
			case "relevant_entity_id":
				obj.RelevantEntityId = n(data)
			case "relevant_id_for_method":
				obj.RelevantIdForMethod = n(data)
			case "relevant_position_profile_id":
				obj.RelevantPositionProfileId = n(data)
			case "successful":
				obj.Successful = true
			case "top_facet":
				obj.TopFacet = string(data)
			case "top_facet_modifier":
				obj.TopFacetModifier = n(data)
			case "top_facet_rating":
				obj.TopFacetRating = n(data)
			case "top_relationship_factor":
				obj.TopRelationshipFactor = string(data)
			case "top_relationship_modifier":
				obj.TopRelationshipModifier = n(data)
			case "top_relationship_rating":
				obj.TopRelationshipRating = n(data)
			case "top_value":
				obj.TopValue = string(data)
			case "top_value_modifier":
				obj.TopValueModifier = n(data)
			case "top_value_rating":
				obj.TopValueRating = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAgreementFormedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAgreementFormed) (*HistoricalEventAgreementFormed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAgreementFormed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactClaimFormed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactClaimFormed, error) {
	var (
		obj  = &HistoricalEventArtifactClaimFormed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "circumstance":
				data = nil
			case "claim":
				data = nil
			case "entity_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "position_profile_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "circumstance":
				obj.Circumstance = string(data)
			case "claim":
				obj.Claim = string(data)
			case "entity_id":
				obj.EntityId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "position_profile_id":
				obj.PositionProfileId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactClaimFormedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactClaimFormed) (*HistoricalEventArtifactClaimFormed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactClaimFormed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCopied(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactCopied, error) {
	var (
		obj  = &HistoricalEventArtifactCopied{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "dest_entity_id":
				data = nil
			case "dest_site_id":
				data = nil
			case "dest_structure_id":
				data = nil
			case "from_original":
				data = nil
			case "source_entity_id":
				data = nil
			case "source_site_id":
				data = nil
			case "source_structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "dest_entity_id":
				obj.DestEntityId = n(data)
			case "dest_site_id":
				obj.DestSiteId = n(data)
			case "dest_structure_id":
				obj.DestStructureId = n(data)
			case "from_original":
				obj.FromOriginal = true
			case "source_entity_id":
				obj.SourceEntityId = n(data)
			case "source_site_id":
				obj.SourceSiteId = n(data)
			case "source_structure_id":
				obj.SourceStructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCopiedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactCopied) (*HistoricalEventArtifactCopied, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactCopied{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCreated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactCreated, error) {
	var (
		obj  = &HistoricalEventArtifactCreated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "name_only":
				data = nil
			case "site_id":
				data = nil
			case "unit_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "name_only":
				obj.NameOnly = true
			case "site_id":
				obj.SiteId = n(data)
			case "unit_id":
				obj.UnitId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCreatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactCreated) (*HistoricalEventArtifactCreated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactCreated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "circumstance":
				v, _ := parseHistoricalEventArtifactCreatedCircumstancePlus(d, &t, &HistoricalEventArtifactCreatedCircumstance{})
				obj.Circumstance = v
			case "creator_hfid":
				data = nil
			case "creator_unit_id":
				data = nil
			case "reason":
				data = nil
			case "sanctify_hf":
				data = nil
			case "site":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "circumstance":

			case "creator_hfid":
				obj.HistFigureId = n(data)
			case "creator_unit_id":
				obj.UnitId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "sanctify_hf":
				obj.SanctifyHf = n(data)
			case "site":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCreatedCircumstance(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactCreatedCircumstance, error) {
	var (
		obj  = &HistoricalEventArtifactCreatedCircumstance{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactCreatedCircumstancePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactCreatedCircumstance) (*HistoricalEventArtifactCreatedCircumstance, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactCreatedCircumstance{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "defeated":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "defeated":
				obj.Defeated = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactDestroyed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactDestroyed, error) {
	var (
		obj  = &HistoricalEventArtifactDestroyed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "destroyer_enid":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "destroyer_enid":
				obj.DestroyerEnid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactDestroyedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactDestroyed) (*HistoricalEventArtifactDestroyed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactDestroyed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactFound(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactFound, error) {
	var (
		obj  = &HistoricalEventArtifactFound{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "site_id":
				data = nil
			case "unit_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "unit_id":
				obj.UnitId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactFoundPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactFound) (*HistoricalEventArtifactFound, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactFound{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactGiven(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactGiven, error) {
	var (
		obj  = &HistoricalEventArtifactGiven{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "giver_entity_id":
				data = nil
			case "giver_hist_figure_id":
				data = nil
			case "receiver_entity_id":
				data = nil
			case "receiver_hist_figure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "giver_entity_id":
				obj.GiverEntityId = n(data)
			case "giver_hist_figure_id":
				obj.GiverHistFigureId = n(data)
			case "receiver_entity_id":
				obj.ReceiverEntityId = n(data)
			case "receiver_hist_figure_id":
				obj.ReceiverHistFigureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactGivenPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactGiven) (*HistoricalEventArtifactGiven, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactGiven{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactLost(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactLost, error) {
	var (
		obj  = &HistoricalEventArtifactLost{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "site_id":
				data = nil
			case "site_property_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "site_property_id":
				obj.SitePropertyId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactLostPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactLost) (*HistoricalEventArtifactLost, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactLost{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactPossessed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactPossessed, error) {
	var (
		obj  = &HistoricalEventArtifactPossessed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "circumstance":
				data = nil
			case "circumstance_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "reason":
				data = nil
			case "reason_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "unit_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "circumstance":
				obj.Circumstance = string(data)
			case "circumstance_id":
				obj.CircumstanceId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "reason_id":
				obj.ReasonId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "unit_id":
				obj.UnitId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactPossessedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactPossessed) (*HistoricalEventArtifactPossessed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactPossessed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactRecovered(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactRecovered, error) {
	var (
		obj  = &HistoricalEventArtifactRecovered{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			case "unit_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "unit_id":
				obj.UnitId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactRecoveredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactRecovered) (*HistoricalEventArtifactRecovered, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactRecovered{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactStored(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventArtifactStored, error) {
	var (
		obj  = &HistoricalEventArtifactStored{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "site_id":
				data = nil
			case "unit_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "unit_id":
				obj.UnitId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventArtifactStoredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventArtifactStored) (*HistoricalEventArtifactStored, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventArtifactStored{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAssumeIdentity(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAssumeIdentity, error) {
	var (
		obj  = &HistoricalEventAssumeIdentity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "identity_id":
				data = nil
			case "target_enid":
				data = nil
			case "trickster_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "identity_id":
				obj.IdentityId = n(data)
			case "target_enid":
				obj.TargetEnid = n(data)
			case "trickster_hfid":
				obj.TricksterHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAssumeIdentityPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAssumeIdentity) (*HistoricalEventAssumeIdentity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAssumeIdentity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "identity_caste":
				data = nil
			case "identity_histfig_id":
				data = nil
			case "identity_name":
				data = nil
			case "identity_nemesis_id":
				data = nil
			case "identity_race":
				data = nil
			case "target":
				data = nil
			case "trickster":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "identity_caste":
				obj.IdentityCaste = string(data)
			case "identity_histfig_id":
				obj.TricksterHfid = n(data)
			case "identity_name":
				obj.IdentityName = string(data)
			case "identity_nemesis_id":
				obj.TricksterHfid = n(data)
			case "identity_race":
				obj.IdentityRace = string(data)
			case "target":
				obj.TargetEnid = n(data)
			case "trickster":
				obj.TricksterHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAttackedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventAttackedSite, error) {
	var (
		obj  = &HistoricalEventAttackedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "a_support_merc_enid":
				data = nil
			case "attacker_civ_id":
				data = nil
			case "attacker_general_hfid":
				data = nil
			case "attacker_merc_enid":
				data = nil
			case "d_support_merc_enid":
				data = nil
			case "defender_civ_id":
				data = nil
			case "defender_general_hfid":
				data = nil
			case "defender_merc_enid":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "a_support_merc_enid":
				obj.ASupportMercEnid = n(data)
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "attacker_general_hfid":
				obj.AttackerGeneralHfid = n(data)
			case "attacker_merc_enid":
				obj.AttackerMercEnid = n(data)
			case "d_support_merc_enid":
				obj.DSupportMercEnid = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "defender_general_hfid":
				obj.DefenderGeneralHfid = n(data)
			case "defender_merc_enid":
				obj.DefenderMercEnid = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventAttackedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventAttackedSite) (*HistoricalEventAttackedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventAttackedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventBodyAbused(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventBodyAbused, error) {
	var (
		obj  = &HistoricalEventBodyAbused{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventBodyAbusedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventBodyAbused) (*HistoricalEventBodyAbused, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventBodyAbused{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "abuse_type":
				data = nil
			case "bodies":
				data = nil
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "interaction":
				data = nil
			case "item_mat":
				data = nil
			case "item_subtype":
				data = nil
			case "item_type":
				data = nil
			case "pile_type":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			case "tree":
				data = nil
			case "victim_entity":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "abuse_type":
				obj.AbuseType = string(data)
			case "bodies":
				obj.Bodies = append(obj.Bodies, n(data))
			case "civ":
				obj.Civ = n(data)
			case "histfig":
				obj.Histfig = n(data)
			case "interaction":
				obj.Interaction = n(data)
			case "item_mat":
				obj.ItemMat = string(data)
			case "item_subtype":
				obj.ItemSubtype = string(data)
			case "item_type":
				obj.ItemType = string(data)
			case "pile_type":
				obj.PileType = string(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.Structure = n(data)
			case "tree":
				obj.Tree = n(data)
			case "victim_entity":
				obj.VictimEntity = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventBuildingProfileAcquired(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventBuildingProfileAcquired, error) {
	var (
		obj  = &HistoricalEventBuildingProfileAcquired{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "acquirer_enid":
				data = nil
			case "acquirer_hfid":
				data = nil
			case "building_profile_id":
				data = nil
			case "inherited":
				data = nil
			case "last_owner_hfid":
				data = nil
			case "purchased_unowned":
				data = nil
			case "rebuilt_ruined":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "acquirer_enid":
				obj.AcquirerEnid = n(data)
			case "acquirer_hfid":
				obj.AcquirerHfid = n(data)
			case "building_profile_id":
				obj.BuildingProfileId = n(data)
			case "inherited":
				obj.Inherited = true
			case "last_owner_hfid":
				obj.LastOwnerHfid = n(data)
			case "purchased_unowned":
				obj.PurchasedUnowned = true
			case "rebuilt_ruined":
				obj.RebuiltRuined = true
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventBuildingProfileAcquiredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventBuildingProfileAcquired) (*HistoricalEventBuildingProfileAcquired, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventBuildingProfileAcquired{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCeremony(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCeremony, error) {
	var (
		obj  = &HistoricalEventCeremony{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "occasion_id":
				data = nil
			case "schedule_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "occasion_id":
				obj.OccasionId = n(data)
			case "schedule_id":
				obj.ScheduleId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCeremonyPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCeremony) (*HistoricalEventCeremony, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCeremony{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfBodyState(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventChangeHfBodyState, error) {
	var (
		obj  = &HistoricalEventChangeHfBodyState{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "body_state":
				data = nil
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "body_state":
				obj.BodyState = string(data)
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfBodyStatePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventChangeHfBodyState) (*HistoricalEventChangeHfBodyState, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventChangeHfBodyState{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfJob(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventChangeHfJob, error) {
	var (
		obj  = &HistoricalEventChangeHfJob{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfJobPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventChangeHfJob) (*HistoricalEventChangeHfJob, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventChangeHfJob{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "new_job":
				data = nil
			case "old_job":
				data = nil
			case "site":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "new_job":
				obj.NewJob = string(data)
			case "old_job":
				obj.OldJob = string(data)
			case "site":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfState(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventChangeHfState, error) {
	var (
		obj  = &HistoricalEventChangeHfState{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "mood":
				data = nil
			case "reason":
				data = nil
			case "site_id":
				data = nil
			case "state":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "mood":
				obj.Mood = string(data)
			case "reason":
				obj.Reason = string(data)
			case "site_id":
				obj.SiteId = n(data)
			case "state":
				obj.State = string(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangeHfStatePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventChangeHfState) (*HistoricalEventChangeHfState, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventChangeHfState{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "reason":
				data = nil
			case "site":
				data = nil
			case "state":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "reason":
				obj.Reason = string(data)
			case "site":
				obj.SiteId = n(data)
			case "state":
				obj.State = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangedCreatureType(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventChangedCreatureType, error) {
	var (
		obj  = &HistoricalEventChangedCreatureType{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "changee_hfid":
				data = nil
			case "changer_hfid":
				data = nil
			case "new_caste":
				data = nil
			case "new_race":
				data = nil
			case "old_caste":
				data = nil
			case "old_race":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "changee_hfid":
				obj.ChangeeHfid = n(data)
			case "changer_hfid":
				obj.ChangerHfid = n(data)
			case "new_caste":
				obj.NewCaste = string(data)
			case "new_race":
				obj.NewRace = string(data)
			case "old_caste":
				obj.OldCaste = string(data)
			case "old_race":
				obj.OldRace = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventChangedCreatureTypePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventChangedCreatureType) (*HistoricalEventChangedCreatureType, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventChangedCreatureType{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "changee":
				data = nil
			case "changer":
				data = nil
			case "new_caste":
				data = nil
			case "new_race":
				data = nil
			case "old_caste":
				data = nil
			case "old_race":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "changee":
				obj.ChangeeHfid = n(data)
			case "changer":
				obj.ChangerHfid = n(data)
			case "new_caste":
				obj.NewCaste = string(data)
			case "new_race":
				obj.NewRace = string(data)
			case "old_caste":
				obj.OldCaste = string(data)
			case "old_race":
				obj.OldRace = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollection(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollection, error) {
	var (
		obj  = &HistoricalEventCollection{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "end_seconds72":
				data = nil
			case "end_year":
				data = nil
			case "event":
				data = nil
			case "eventcol":
				data = nil
			case "id":
				data = nil
			case "start_seconds72":
				data = nil
			case "start_year":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "end_seconds72":
				obj.EndSeconds72 = n(data)
			case "end_year":
				obj.EndYear = n(data)
			case "event":
				obj.Event = append(obj.Event, n(data))
			case "eventcol":
				obj.Eventcol = append(obj.Eventcol, n(data))
			case "id":
				obj.Id_ = n(data)
			case "start_seconds72":
				obj.StartSeconds72 = n(data)
			case "start_year":
				obj.StartYear = n(data)
			case "type":

				var err error
				switch string(data) {
				case "abduction":
					obj.Details, err = parseHistoricalEventCollectionAbduction(d, start)
				case "battle":
					obj.Details, err = parseHistoricalEventCollectionBattle(d, start)
				case "beast attack":
					obj.Details, err = parseHistoricalEventCollectionBeastAttack(d, start)
				case "ceremony":
					obj.Details, err = parseHistoricalEventCollectionCeremony(d, start)
				case "competition":
					obj.Details, err = parseHistoricalEventCollectionCompetition(d, start)
				case "duel":
					obj.Details, err = parseHistoricalEventCollectionDuel(d, start)
				case "entity overthrown":
					obj.Details, err = parseHistoricalEventCollectionEntityOverthrown(d, start)
				case "journey":
					obj.Details, err = parseHistoricalEventCollectionJourney(d, start)
				case "occasion":
					obj.Details, err = parseHistoricalEventCollectionOccasion(d, start)
				case "performance":
					obj.Details, err = parseHistoricalEventCollectionPerformance(d, start)
				case "persecution":
					obj.Details, err = parseHistoricalEventCollectionPersecution(d, start)
				case "procession":
					obj.Details, err = parseHistoricalEventCollectionProcession(d, start)
				case "purge":
					obj.Details, err = parseHistoricalEventCollectionPurge(d, start)
				case "site conquered":
					obj.Details, err = parseHistoricalEventCollectionSiteConquered(d, start)
				case "theft":
					obj.Details, err = parseHistoricalEventCollectionTheft(d, start)
				case "war":
					obj.Details, err = parseHistoricalEventCollectionWar(d, start)
				default:
					d.Skip()
				}
				if err != nil {
					return nil, err
				}
				return obj, nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollection) (*HistoricalEventCollection, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollection{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionAbduction(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionAbduction, error) {
	var (
		obj  = &HistoricalEventCollectionAbduction{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacking_enid":
				data = nil
			case "coords":
				data = nil
			case "defending_enid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "ordinal":
				data = nil
			case "parent_eventcol":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacking_enid":
				obj.AttackingEnid = n(data)
			case "coords":
				obj.Coords = string(data)
			case "defending_enid":
				obj.DefendingEnid = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "parent_eventcol":
				obj.ParentEventcol = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionAbductionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionAbduction) (*HistoricalEventCollectionAbduction, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionAbduction{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionBattle(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionBattle, error) {
	var (
		obj  = &HistoricalEventCollectionBattle{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "a_support_merc_enid":
				data = nil
			case "a_support_merc_hfid":
				data = nil
			case "attacking_hfid":
				data = nil
			case "attacking_merc_enid":
				data = nil
			case "attacking_squad_animated":
				data = nil
			case "attacking_squad_deaths":
				data = nil
			case "attacking_squad_entity_pop":
				data = nil
			case "attacking_squad_number":
				data = nil
			case "attacking_squad_race":
				data = nil
			case "attacking_squad_site":
				data = nil
			case "company_merc":
				data = nil
			case "coords":
				data = nil
			case "d_support_merc_enid":
				data = nil
			case "d_support_merc_hfid":
				data = nil
			case "defending_hfid":
				data = nil
			case "defending_merc_enid":
				data = nil
			case "defending_squad_animated":
				data = nil
			case "defending_squad_deaths":
				data = nil
			case "defending_squad_entity_pop":
				data = nil
			case "defending_squad_number":
				data = nil
			case "defending_squad_race":
				data = nil
			case "defending_squad_site":
				data = nil
			case "feature_layer_id":
				data = nil
			case "individual_merc":
				data = nil
			case "name":
				data = nil
			case "noncom_hfid":
				data = nil
			case "outcome":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "war_eventcol":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "a_support_merc_enid":
				obj.ASupportMercEnid = n(data)
			case "a_support_merc_hfid":
				obj.ASupportMercHfid = append(obj.ASupportMercHfid, n(data))
			case "attacking_hfid":
				obj.AttackingHfid = append(obj.AttackingHfid, n(data))
			case "attacking_merc_enid":
				obj.AttackingMercEnid = n(data)
			case "attacking_squad_animated":

			case "attacking_squad_deaths":
				obj.AttackingSquadDeaths = append(obj.AttackingSquadDeaths, n(data))
			case "attacking_squad_entity_pop":
				obj.AttackingSquadEntityPop = append(obj.AttackingSquadEntityPop, n(data))
			case "attacking_squad_number":
				obj.AttackingSquadNumber = append(obj.AttackingSquadNumber, n(data))
			case "attacking_squad_race":
				obj.AttackingSquadRace = append(obj.AttackingSquadRace, string(data))
			case "attacking_squad_site":
				obj.AttackingSquadSite = append(obj.AttackingSquadSite, n(data))
			case "company_merc":

			case "coords":
				obj.Coords = string(data)
			case "d_support_merc_enid":
				obj.DSupportMercEnid = n(data)
			case "d_support_merc_hfid":
				obj.DSupportMercHfid = append(obj.DSupportMercHfid, n(data))
			case "defending_hfid":
				obj.DefendingHfid = append(obj.DefendingHfid, n(data))
			case "defending_merc_enid":
				obj.DefendingMercEnid = n(data)
			case "defending_squad_animated":

			case "defending_squad_deaths":
				obj.DefendingSquadDeaths = append(obj.DefendingSquadDeaths, n(data))
			case "defending_squad_entity_pop":
				obj.DefendingSquadEntityPop = append(obj.DefendingSquadEntityPop, n(data))
			case "defending_squad_number":
				obj.DefendingSquadNumber = append(obj.DefendingSquadNumber, n(data))
			case "defending_squad_race":
				obj.DefendingSquadRace = append(obj.DefendingSquadRace, string(data))
			case "defending_squad_site":
				obj.DefendingSquadSite = append(obj.DefendingSquadSite, n(data))
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "individual_merc":

			case "name":
				obj.Name_ = string(data)
			case "noncom_hfid":
				obj.NoncomHfid = append(obj.NoncomHfid, n(data))
			case "outcome":
				obj.Outcome = string(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "war_eventcol":
				obj.WarEventcol = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionBattlePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionBattle) (*HistoricalEventCollectionBattle, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionBattle{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionBeastAttack(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionBeastAttack, error) {
	var (
		obj  = &HistoricalEventCollectionBeastAttack{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "defending_enid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "ordinal":
				data = nil
			case "parent_eventcol":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "defending_enid":
				obj.DefendingEnid = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "parent_eventcol":
				obj.ParentEventcol = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionBeastAttackPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionBeastAttack) (*HistoricalEventCollectionBeastAttack, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionBeastAttack{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionCeremony(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionCeremony, error) {
	var (
		obj  = &HistoricalEventCollectionCeremony{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionCeremonyPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionCeremony) (*HistoricalEventCollectionCeremony, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionCeremony{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionCompetition(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionCompetition, error) {
	var (
		obj  = &HistoricalEventCollectionCompetition{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionCompetitionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionCompetition) (*HistoricalEventCollectionCompetition, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionCompetition{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionDuel(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionDuel, error) {
	var (
		obj  = &HistoricalEventCollectionDuel{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacking_hfid":
				data = nil
			case "coords":
				data = nil
			case "defending_hfid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "ordinal":
				data = nil
			case "parent_eventcol":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacking_hfid":
				obj.AttackingHfid = n(data)
			case "coords":
				obj.Coords = string(data)
			case "defending_hfid":
				obj.DefendingHfid = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "parent_eventcol":
				obj.ParentEventcol = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionDuelPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionDuel) (*HistoricalEventCollectionDuel, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionDuel{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionEntityOverthrown(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionEntityOverthrown, error) {
	var (
		obj  = &HistoricalEventCollectionEntityOverthrown{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			case "site_id":
				data = nil
			case "target_entity_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "target_entity_id":
				obj.TargetEntityId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionEntityOverthrownPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionEntityOverthrown) (*HistoricalEventCollectionEntityOverthrown, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionEntityOverthrown{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionJourney(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionJourney, error) {
	var (
		obj  = &HistoricalEventCollectionJourney{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionJourneyPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionJourney) (*HistoricalEventCollectionJourney, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionJourney{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionOccasion(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionOccasion, error) {
	var (
		obj  = &HistoricalEventCollectionOccasion{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "occasion_id":
				data = nil
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "occasion_id":
				obj.OccasionId = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionOccasionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionOccasion) (*HistoricalEventCollectionOccasion, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionOccasion{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPerformance(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionPerformance, error) {
	var (
		obj  = &HistoricalEventCollectionPerformance{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPerformancePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionPerformance) (*HistoricalEventCollectionPerformance, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionPerformance{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPersecution(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionPersecution, error) {
	var (
		obj  = &HistoricalEventCollectionPersecution{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			case "site_id":
				data = nil
			case "target_entity_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "target_entity_id":
				obj.TargetEntityId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPersecutionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionPersecution) (*HistoricalEventCollectionPersecution, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionPersecution{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionProcession(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionProcession, error) {
	var (
		obj  = &HistoricalEventCollectionProcession{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "ordinal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "ordinal":
				obj.Ordinal = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionProcessionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionProcession) (*HistoricalEventCollectionProcession, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionProcession{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPurge(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionPurge, error) {
	var (
		obj  = &HistoricalEventCollectionPurge{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "adjective":
				data = nil
			case "ordinal":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "adjective":
				obj.Adjective = string(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionPurgePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionPurge) (*HistoricalEventCollectionPurge, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionPurge{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionSiteConquered(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionSiteConquered, error) {
	var (
		obj  = &HistoricalEventCollectionSiteConquered{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacking_enid":
				data = nil
			case "defending_enid":
				data = nil
			case "ordinal":
				data = nil
			case "site_id":
				data = nil
			case "war_eventcol":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacking_enid":
				obj.AttackingEnid = n(data)
			case "defending_enid":
				obj.DefendingEnid = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "war_eventcol":
				obj.WarEventcol = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionSiteConqueredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionSiteConquered) (*HistoricalEventCollectionSiteConquered, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionSiteConquered{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionTheft(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionTheft, error) {
	var (
		obj  = &HistoricalEventCollectionTheft{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacking_enid":
				data = nil
			case "coords":
				data = nil
			case "defending_enid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "ordinal":
				data = nil
			case "parent_eventcol":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacking_enid":
				obj.AttackingEnid = n(data)
			case "coords":
				obj.Coords = string(data)
			case "defending_enid":
				obj.DefendingEnid = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "ordinal":
				obj.Ordinal = n(data)
			case "parent_eventcol":
				obj.ParentEventcol = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionTheftPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionTheft) (*HistoricalEventCollectionTheft, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionTheft{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionWar(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCollectionWar, error) {
	var (
		obj  = &HistoricalEventCollectionWar{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "aggressor_ent_id":
				data = nil
			case "defender_ent_id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "aggressor_ent_id":
				obj.AggressorEntId = n(data)
			case "defender_ent_id":
				obj.DefenderEntId = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCollectionWarPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCollectionWar) (*HistoricalEventCollectionWar, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCollectionWar{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCompetition(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCompetition, error) {
	var (
		obj  = &HistoricalEventCompetition{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "competitor_hfid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "occasion_id":
				data = nil
			case "schedule_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "winner_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "competitor_hfid":
				obj.CompetitorHfid = append(obj.CompetitorHfid, n(data))
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "occasion_id":
				obj.OccasionId = n(data)
			case "schedule_id":
				obj.ScheduleId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "winner_hfid":
				obj.WinnerHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCompetitionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCompetition) (*HistoricalEventCompetition, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCompetition{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreateEntityPosition(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCreateEntityPosition, error) {
	var (
		obj  = &HistoricalEventCreateEntityPosition{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreateEntityPositionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCreateEntityPosition) (*HistoricalEventCreateEntityPosition, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCreateEntityPosition{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "position":
				data = nil
			case "reason":
				data = nil
			case "site_civ":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ":
				obj.Civ = n(data)
			case "histfig":
				obj.Histfig = n(data)
			case "position":
				obj.Position = string(data)
			case "reason":
				obj.Reason = string(data)
			case "site_civ":
				obj.SiteCiv = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCreatedSite, error) {
	var (
		obj  = &HistoricalEventCreatedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "builder_hfid":
				data = nil
			case "civ_id":
				data = nil
			case "resident_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "builder_hfid":
				obj.BuilderHfid = n(data)
			case "civ_id":
				obj.CivId = n(data)
			case "resident_civ_id":
				obj.ResidentCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCreatedSite) (*HistoricalEventCreatedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCreatedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCreatedStructure, error) {
	var (
		obj  = &HistoricalEventCreatedStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "builder_hfid":
				data = nil
			case "civ_id":
				data = nil
			case "rebuilt":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "builder_hfid":
				obj.BuilderHfid = n(data)
			case "civ_id":
				obj.CivId = n(data)
			case "rebuilt":
				obj.Rebuilt = true
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCreatedStructure) (*HistoricalEventCreatedStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCreatedStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "builder_hf":
				data = nil
			case "civ":
				data = nil
			case "rebuild":
				data = nil
			case "site":
				data = nil
			case "site_civ":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "builder_hf":
				obj.BuilderHfid = n(data)
			case "civ":
				obj.CivId = n(data)
			case "rebuild":
				obj.Rebuild = string(data)
			case "site":
				obj.SiteId = n(data)
			case "site_civ":
				obj.SiteCivId = n(data)
			case "structure":
				obj.Structure = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedWorldConstruction(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCreatedWorldConstruction, error) {
	var (
		obj  = &HistoricalEventCreatedWorldConstruction{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "master_wcid":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id1":
				data = nil
			case "site_id2":
				data = nil
			case "wcid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "master_wcid":
				obj.MasterWcid = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id1":
				obj.SiteId1 = n(data)
			case "site_id2":
				obj.SiteId2 = n(data)
			case "wcid":
				obj.Wcid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatedWorldConstructionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCreatedWorldConstruction) (*HistoricalEventCreatedWorldConstruction, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCreatedWorldConstruction{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatureDevoured(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventCreatureDevoured, error) {
	var (
		obj  = &HistoricalEventCreatureDevoured{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventCreatureDevouredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventCreatureDevoured) (*HistoricalEventCreatureDevoured, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventCreatureDevoured{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "caste":
				data = nil
			case "eater":
				data = nil
			case "entity":
				data = nil
			case "race":
				data = nil
			case "site":
				data = nil
			case "victim":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "caste":
				obj.Caste = string(data)
			case "eater":
				obj.Eater = n(data)
			case "entity":
				obj.Entity = n(data)
			case "race":
				obj.Race = string(data)
			case "site":
				obj.SiteId = n(data)
			case "victim":
				obj.Victim = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventDanceFormCreated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventDanceFormCreated, error) {
	var (
		obj  = &HistoricalEventDanceFormCreated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				data = nil
			case "circumstance_id":
				data = nil
			case "form_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "reason":
				data = nil
			case "reason_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":
				obj.Circumstance = string(data)
			case "circumstance_id":
				obj.CircumstanceId = n(data)
			case "form_id":
				obj.FormId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "reason_id":
				obj.ReasonId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventDanceFormCreatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventDanceFormCreated) (*HistoricalEventDanceFormCreated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventDanceFormCreated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventDestroyedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventDestroyedSite, error) {
	var (
		obj  = &HistoricalEventDestroyedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_civ_id":
				data = nil
			case "defender_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventDestroyedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventDestroyedSite) (*HistoricalEventDestroyedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventDestroyedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityAllianceFormed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityAllianceFormed, error) {
	var (
		obj  = &HistoricalEventEntityAllianceFormed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "initiating_enid":
				data = nil
			case "joining_enid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "initiating_enid":
				obj.InitiatingEnid = n(data)
			case "joining_enid":
				obj.JoiningEnid = append(obj.JoiningEnid, n(data))
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityAllianceFormedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityAllianceFormed) (*HistoricalEventEntityAllianceFormed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityAllianceFormed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityBreachFeatureLayer(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityBreachFeatureLayer, error) {
	var (
		obj  = &HistoricalEventEntityBreachFeatureLayer{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_entity_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "site_entity_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_entity_id":
				obj.CivEntityId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_entity_id":
				obj.SiteEntityId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityBreachFeatureLayerPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityBreachFeatureLayer) (*HistoricalEventEntityBreachFeatureLayer, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityBreachFeatureLayer{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityCreated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityCreated, error) {
	var (
		obj  = &HistoricalEventEntityCreated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "creator_hfid":
				data = nil
			case "entity_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "creator_hfid":
				obj.CreatorHfid = n(data)
			case "entity_id":
				obj.EntityId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityCreatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityCreated) (*HistoricalEventEntityCreated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityCreated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityDissolved(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityDissolved, error) {
	var (
		obj  = &HistoricalEventEntityDissolved{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "reason":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "reason":
				obj.Reason = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityDissolvedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityDissolved) (*HistoricalEventEntityDissolved, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityDissolved{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityEquipmentPurchase(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityEquipmentPurchase, error) {
	var (
		obj  = &HistoricalEventEntityEquipmentPurchase{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "hfid":
				data = nil
			case "new_equipment_level":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "hfid":
				obj.Hfid = append(obj.Hfid, n(data))
			case "new_equipment_level":
				obj.NewEquipmentLevel = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityEquipmentPurchasePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityEquipmentPurchase) (*HistoricalEventEntityEquipmentPurchase, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityEquipmentPurchase{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityIncorporated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityIncorporated, error) {
	var (
		obj  = &HistoricalEventEntityIncorporated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "joined_entity_id":
				data = nil
			case "joiner_entity_id":
				data = nil
			case "leader_hfid":
				data = nil
			case "partial_incorporation":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "joined_entity_id":
				obj.JoinedEntityId = n(data)
			case "joiner_entity_id":
				obj.JoinerEntityId = n(data)
			case "leader_hfid":
				obj.LeaderHfid = n(data)
			case "partial_incorporation":
				obj.PartialIncorporation = true
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityIncorporatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityIncorporated) (*HistoricalEventEntityIncorporated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityIncorporated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityLaw(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityLaw, error) {
	var (
		obj  = &HistoricalEventEntityLaw{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "law_add":
				data = nil
			case "law_remove":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "law_add":
				obj.LawAdd = string(data)
			case "law_remove":
				obj.LawRemove = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityLawPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityLaw) (*HistoricalEventEntityLaw, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityLaw{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityOverthrown(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityOverthrown, error) {
	var (
		obj  = &HistoricalEventEntityOverthrown{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "conspirator_hfid":
				data = nil
			case "entity_id":
				data = nil
			case "instigator_hfid":
				data = nil
			case "overthrown_hfid":
				data = nil
			case "pos_taker_hfid":
				data = nil
			case "position_profile_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "conspirator_hfid":
				obj.ConspiratorHfid = append(obj.ConspiratorHfid, n(data))
			case "entity_id":
				obj.EntityId = n(data)
			case "instigator_hfid":
				obj.InstigatorHfid = n(data)
			case "overthrown_hfid":
				obj.OverthrownHfid = n(data)
			case "pos_taker_hfid":
				obj.PosTakerHfid = n(data)
			case "position_profile_id":
				obj.PositionProfileId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityOverthrownPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityOverthrown) (*HistoricalEventEntityOverthrown, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityOverthrown{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityPersecuted(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityPersecuted, error) {
	var (
		obj  = &HistoricalEventEntityPersecuted{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "destroyed_structure_id":
				data = nil
			case "expelled_creature":
				data = nil
			case "expelled_hfid":
				data = nil
			case "expelled_number":
				data = nil
			case "expelled_pop_id":
				data = nil
			case "persecutor_enid":
				data = nil
			case "persecutor_hfid":
				data = nil
			case "property_confiscated_from_hfid":
				data = nil
			case "shrine_amount_destroyed":
				data = nil
			case "site_id":
				data = nil
			case "target_enid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "destroyed_structure_id":
				obj.DestroyedStructureId = n(data)
			case "expelled_creature":
				obj.ExpelledCreature = append(obj.ExpelledCreature, n(data))
			case "expelled_hfid":
				obj.ExpelledHfid = append(obj.ExpelledHfid, n(data))
			case "expelled_number":
				obj.ExpelledNumber = append(obj.ExpelledNumber, n(data))
			case "expelled_pop_id":
				obj.ExpelledPopId = append(obj.ExpelledPopId, n(data))
			case "persecutor_enid":
				obj.PersecutorEnid = n(data)
			case "persecutor_hfid":
				obj.PersecutorHfid = n(data)
			case "property_confiscated_from_hfid":
				obj.PropertyConfiscatedFromHfid = append(obj.PropertyConfiscatedFromHfid, n(data))
			case "shrine_amount_destroyed":
				obj.ShrineAmountDestroyed = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "target_enid":
				obj.TargetEnid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityPersecutedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityPersecuted) (*HistoricalEventEntityPersecuted, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityPersecuted{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityPrimaryCriminals(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityPrimaryCriminals, error) {
	var (
		obj  = &HistoricalEventEntityPrimaryCriminals{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityPrimaryCriminalsPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityPrimaryCriminals) (*HistoricalEventEntityPrimaryCriminals, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityPrimaryCriminals{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "entity":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "entity":
				obj.EntityId = n(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityRelocate(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventEntityRelocate, error) {
	var (
		obj  = &HistoricalEventEntityRelocate{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventEntityRelocatePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventEntityRelocate) (*HistoricalEventEntityRelocate, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventEntityRelocate{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "entity":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "entity":
				obj.EntityId = n(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFailedFrameAttempt(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventFailedFrameAttempt, error) {
	var (
		obj  = &HistoricalEventFailedFrameAttempt{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "convicter_enid":
				data = nil
			case "crime":
				data = nil
			case "fooled_hfid":
				data = nil
			case "framer_hfid":
				data = nil
			case "plotter_hfid":
				data = nil
			case "target_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "convicter_enid":
				obj.ConvicterEnid = n(data)
			case "crime":
				obj.Crime = string(data)
			case "fooled_hfid":
				obj.FooledHfid = n(data)
			case "framer_hfid":
				obj.FramerHfid = n(data)
			case "plotter_hfid":
				obj.PlotterHfid = n(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFailedFrameAttemptPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventFailedFrameAttempt) (*HistoricalEventFailedFrameAttempt, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventFailedFrameAttempt{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFailedIntrigueCorruption(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventFailedIntrigueCorruption, error) {
	var (
		obj  = &HistoricalEventFailedIntrigueCorruption{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "ally_defense_bonus":
				data = nil
			case "coconspirator_bonus":
				data = nil
			case "corruptor_hfid":
				data = nil
			case "corruptor_identity":
				data = nil
			case "failed_judgment_test":
				data = nil
			case "feature_layer_id":
				data = nil
			case "lure_hfid":
				data = nil
			case "method":
				data = nil
			case "relevant_entity_id":
				data = nil
			case "relevant_id_for_method":
				data = nil
			case "relevant_position_profile_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "target_hfid":
				data = nil
			case "target_identity":
				data = nil
			case "top_facet":
				data = nil
			case "top_facet_modifier":
				data = nil
			case "top_facet_rating":
				data = nil
			case "top_relationship_factor":
				data = nil
			case "top_relationship_modifier":
				data = nil
			case "top_relationship_rating":
				data = nil
			case "top_value":
				data = nil
			case "top_value_modifier":
				data = nil
			case "top_value_rating":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "ally_defense_bonus":
				obj.AllyDefenseBonus = n(data)
			case "coconspirator_bonus":
				obj.CoconspiratorBonus = n(data)
			case "corruptor_hfid":
				obj.CorruptorHfid = n(data)
			case "corruptor_identity":
				obj.CorruptorIdentity = n(data)
			case "failed_judgment_test":
				obj.FailedJudgmentTest = true
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "lure_hfid":
				obj.LureHfid = n(data)
			case "method":
				obj.Method = string(data)
			case "relevant_entity_id":
				obj.RelevantEntityId = n(data)
			case "relevant_id_for_method":
				obj.RelevantIdForMethod = n(data)
			case "relevant_position_profile_id":
				obj.RelevantPositionProfileId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			case "target_identity":
				obj.TargetIdentity = n(data)
			case "top_facet":
				obj.TopFacet = string(data)
			case "top_facet_modifier":
				obj.TopFacetModifier = n(data)
			case "top_facet_rating":
				obj.TopFacetRating = n(data)
			case "top_relationship_factor":
				obj.TopRelationshipFactor = string(data)
			case "top_relationship_modifier":
				obj.TopRelationshipModifier = n(data)
			case "top_relationship_rating":
				obj.TopRelationshipRating = n(data)
			case "top_value":
				obj.TopValue = string(data)
			case "top_value_modifier":
				obj.TopValueModifier = n(data)
			case "top_value_rating":
				obj.TopValueRating = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFailedIntrigueCorruptionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventFailedIntrigueCorruption) (*HistoricalEventFailedIntrigueCorruption, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventFailedIntrigueCorruption{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFieldBattle(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventFieldBattle, error) {
	var (
		obj  = &HistoricalEventFieldBattle{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "a_support_merc_enid":
				data = nil
			case "attacker_civ_id":
				data = nil
			case "attacker_general_hfid":
				data = nil
			case "attacker_merc_enid":
				data = nil
			case "coords":
				data = nil
			case "d_support_merc_enid":
				data = nil
			case "defender_civ_id":
				data = nil
			case "defender_general_hfid":
				data = nil
			case "defender_merc_enid":
				data = nil
			case "feature_layer_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "a_support_merc_enid":
				obj.ASupportMercEnid = n(data)
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "attacker_general_hfid":
				obj.AttackerGeneralHfid = n(data)
			case "attacker_merc_enid":
				obj.AttackerMercEnid = n(data)
			case "coords":
				obj.Coords = string(data)
			case "d_support_merc_enid":
				obj.DSupportMercEnid = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "defender_general_hfid":
				obj.DefenderGeneralHfid = n(data)
			case "defender_merc_enid":
				obj.DefenderMercEnid = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventFieldBattlePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventFieldBattle) (*HistoricalEventFieldBattle, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventFieldBattle{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventGamble(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventGamble, error) {
	var (
		obj  = &HistoricalEventGamble{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "gambler_hfid":
				data = nil
			case "new_account":
				data = nil
			case "old_account":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "gambler_hfid":
				obj.GamblerHfid = n(data)
			case "new_account":
				obj.NewAccount = n(data)
			case "old_account":
				obj.OldAccount = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventGamblePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventGamble) (*HistoricalEventGamble, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventGamble{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfAbducted(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfAbducted, error) {
	var (
		obj  = &HistoricalEventHfAbducted{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "snatcher_hfid":
				data = nil
			case "subregion_id":
				data = nil
			case "target_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "snatcher_hfid":
				obj.SnatcherHfid = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfAbductedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfAbducted) (*HistoricalEventHfAbducted, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfAbducted{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfAttackedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfAttackedSite, error) {
	var (
		obj  = &HistoricalEventHfAttackedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_hfid":
				data = nil
			case "defender_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_hfid":
				obj.AttackerHfid = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfAttackedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfAttackedSite) (*HistoricalEventHfAttackedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfAttackedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfConfronted(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfConfronted, error) {
	var (
		obj  = &HistoricalEventHfConfronted{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "reason":
				data = nil
			case "site_id":
				data = nil
			case "situation":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "reason":
				obj.Reason = append(obj.Reason, string(data))
			case "site_id":
				obj.SiteId = n(data)
			case "situation":
				obj.Situation = string(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfConfrontedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfConfronted) (*HistoricalEventHfConfronted, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfConfronted{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfConvicted(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfConvicted, error) {
	var (
		obj  = &HistoricalEventHfConvicted{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coconspirator_hfid":
				data = nil
			case "confessed_after_apb_arrest_enid":
				data = nil
			case "contact_hfid":
				data = nil
			case "convict_is_contact":
				data = nil
			case "convicted_hfid":
				data = nil
			case "convicter_enid":
				data = nil
			case "corrupt_convicter_hfid":
				data = nil
			case "crime":
				data = nil
			case "death_penalty":
				data = nil
			case "did_not_reveal_all_in_interrogation":
				data = nil
			case "exiled":
				data = nil
			case "fooled_hfid":
				data = nil
			case "framer_hfid":
				data = nil
			case "held_firm_in_interrogation":
				data = nil
			case "implicated_hfid":
				data = nil
			case "interrogator_hfid":
				data = nil
			case "plotter_hfid":
				data = nil
			case "prison_months":
				data = nil
			case "surveiled_coconspirator":
				data = nil
			case "surveiled_contact":
				data = nil
			case "surveiled_convicted":
				data = nil
			case "surveiled_target":
				data = nil
			case "target_hfid":
				data = nil
			case "wrongful_conviction":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coconspirator_hfid":
				obj.CoconspiratorHfid = n(data)
			case "confessed_after_apb_arrest_enid":
				obj.ConfessedAfterApbArrestEnid = n(data)
			case "contact_hfid":
				obj.ContactHfid = n(data)
			case "convict_is_contact":
				obj.ConvictIsContact = true
			case "convicted_hfid":
				obj.ConvictedHfid = n(data)
			case "convicter_enid":
				obj.ConvicterEnid = n(data)
			case "corrupt_convicter_hfid":
				obj.CorruptConvicterHfid = n(data)
			case "crime":
				obj.Crime = string(data)
			case "death_penalty":
				obj.DeathPenalty = true
			case "did_not_reveal_all_in_interrogation":
				obj.DidNotRevealAllInInterrogation = true
			case "exiled":
				obj.Exiled = true
			case "fooled_hfid":
				obj.FooledHfid = n(data)
			case "framer_hfid":
				obj.FramerHfid = n(data)
			case "held_firm_in_interrogation":
				obj.HeldFirmInInterrogation = true
			case "implicated_hfid":
				obj.ImplicatedHfid = append(obj.ImplicatedHfid, n(data))
			case "interrogator_hfid":
				obj.InterrogatorHfid = n(data)
			case "plotter_hfid":
				obj.PlotterHfid = n(data)
			case "prison_months":
				obj.PrisonMonths = n(data)
			case "surveiled_coconspirator":
				obj.SurveiledCoconspirator = true
			case "surveiled_contact":
				obj.SurveiledContact = true
			case "surveiled_convicted":
				obj.SurveiledConvicted = true
			case "surveiled_target":
				obj.SurveiledTarget = true
			case "target_hfid":
				obj.TargetHfid = n(data)
			case "wrongful_conviction":
				obj.WrongfulConviction = true
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfConvictedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfConvicted) (*HistoricalEventHfConvicted, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfConvicted{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDestroyedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfDestroyedSite, error) {
	var (
		obj  = &HistoricalEventHfDestroyedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_hfid":
				data = nil
			case "defender_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_hfid":
				obj.AttackerHfid = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDestroyedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfDestroyedSite) (*HistoricalEventHfDestroyedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfDestroyedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDied(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfDied, error) {
	var (
		obj  = &HistoricalEventHfDied{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "cause":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "slayer_caste":
				data = nil
			case "slayer_hfid":
				data = nil
			case "slayer_item_id":
				data = nil
			case "slayer_race":
				data = nil
			case "slayer_shooter_item_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "cause":
				obj.Cause = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "slayer_caste":
				obj.SlayerCaste = string(data)
			case "slayer_hfid":
				obj.SlayerHfid = n(data)
			case "slayer_item_id":
				obj.SlayerItemId = n(data)
			case "slayer_race":
				obj.SlayerRace = string(data)
			case "slayer_shooter_item_id":
				obj.SlayerShooterItemId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDiedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfDied) (*HistoricalEventHfDied, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfDied{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "death_cause":
				data = nil
			case "item":
				data = nil
			case "item_subtype":
				data = nil
			case "item_type":
				data = nil
			case "mat":
				data = nil
			case "site":
				data = nil
			case "slayer_caste":
				data = nil
			case "slayer_hf":
				data = nil
			case "slayer_race":
				data = nil
			case "victim_hf":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.SlayerItemId = n(data)
			case "death_cause":
				obj.DeathCause = string(data)
			case "item":
				obj.SlayerItemId = n(data)
			case "item_subtype":
				obj.Cause = string(data)
			case "item_type":
				obj.ItemType = string(data)
			case "mat":
				obj.Cause = string(data)
			case "site":
				obj.SiteId = n(data)
			case "slayer_caste":
				obj.SlayerCaste = string(data)
			case "slayer_hf":
				obj.SlayerHfid = n(data)
			case "slayer_race":
				obj.SlayerRace = string(data)
			case "victim_hf":
				obj.Hfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDisturbedStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfDisturbedStructure, error) {
	var (
		obj  = &HistoricalEventHfDisturbedStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hist_fig_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hist_fig_id":
				obj.HistFigId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDisturbedStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfDisturbedStructure) (*HistoricalEventHfDisturbedStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfDisturbedStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "histfig":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "histfig":
				obj.HistFigId = n(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDoesInteraction(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfDoesInteraction, error) {
	var (
		obj  = &HistoricalEventHfDoesInteraction{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "doer_hfid":
				data = nil
			case "interaction":
				data = nil
			case "target_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "doer_hfid":
				obj.DoerHfid = n(data)
			case "interaction":
				obj.Interaction = string(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfDoesInteractionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfDoesInteraction) (*HistoricalEventHfDoesInteraction, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfDoesInteraction{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "doer":
				data = nil
			case "interaction_action":
				data = nil
			case "region":
				data = nil
			case "site":
				data = nil
			case "source":
				data = nil
			case "target":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "doer":
				obj.DoerHfid = n(data)
			case "interaction_action":
				obj.InteractionAction = string(data)
			case "region":
				obj.Region = n(data)
			case "site":
				obj.Site = n(data)
			case "source":
				obj.Source = n(data)
			case "target":
				obj.TargetHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfEnslaved(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfEnslaved, error) {
	var (
		obj  = &HistoricalEventHfEnslaved{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "enslaved_hfid":
				data = nil
			case "moved_to_site_id":
				data = nil
			case "payer_entity_id":
				data = nil
			case "seller_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "enslaved_hfid":
				obj.EnslavedHfid = n(data)
			case "moved_to_site_id":
				obj.MovedToSiteId = n(data)
			case "payer_entity_id":
				obj.PayerEntityId = n(data)
			case "seller_hfid":
				obj.SellerHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfEnslavedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfEnslaved) (*HistoricalEventHfEnslaved, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfEnslaved{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfEquipmentPurchase(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfEquipmentPurchase, error) {
	var (
		obj  = &HistoricalEventHfEquipmentPurchase{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "group_hfid":
				data = nil
			case "quality":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_hfid":
				obj.GroupHfid = n(data)
			case "quality":
				obj.Quality = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfEquipmentPurchasePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfEquipmentPurchase) (*HistoricalEventHfEquipmentPurchase, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfEquipmentPurchase{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfGainsSecretGoal(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfGainsSecretGoal, error) {
	var (
		obj  = &HistoricalEventHfGainsSecretGoal{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "secret_goal":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "secret_goal":
				obj.SecretGoal = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfGainsSecretGoalPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfGainsSecretGoal) (*HistoricalEventHfGainsSecretGoal, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfGainsSecretGoal{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfInterrogated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfInterrogated, error) {
	var (
		obj  = &HistoricalEventHfInterrogated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "arresting_enid":
				data = nil
			case "held_firm_in_interrogation":
				data = nil
			case "interrogator_hfid":
				data = nil
			case "target_hfid":
				data = nil
			case "wanted_and_recognized":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "arresting_enid":
				obj.ArrestingEnid = n(data)
			case "held_firm_in_interrogation":
				obj.HeldFirmInInterrogation = true
			case "interrogator_hfid":
				obj.InterrogatorHfid = n(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			case "wanted_and_recognized":
				obj.WantedAndRecognized = true
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfInterrogatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfInterrogated) (*HistoricalEventHfInterrogated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfInterrogated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfLearnsSecret(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfLearnsSecret, error) {
	var (
		obj  = &HistoricalEventHfLearnsSecret{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "interaction":
				data = nil
			case "student_hfid":
				data = nil
			case "teacher_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "interaction":
				obj.Interaction = string(data)
			case "student_hfid":
				obj.StudentHfid = n(data)
			case "teacher_hfid":
				obj.TeacherHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfLearnsSecretPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfLearnsSecret) (*HistoricalEventHfLearnsSecret, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfLearnsSecret{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact":
				data = nil
			case "secret_text":
				data = nil
			case "student":
				data = nil
			case "teacher":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact":
				obj.ArtifactId = n(data)
			case "secret_text":
				obj.SecretText = string(data)
			case "student":
				obj.StudentHfid = n(data)
			case "teacher":
				obj.TeacherHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfNewPet(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfNewPet, error) {
	var (
		obj  = &HistoricalEventHfNewPet{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "group_hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_hfid":
				obj.GroupHfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfNewPetPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfNewPet) (*HistoricalEventHfNewPet, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfNewPet{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "group":
				data = nil
			case "pets":
				data = nil
			case "site":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "group":
				obj.GroupHfid = n(data)
			case "pets":
				obj.Pets = string(data)
			case "site":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPerformedHorribleExperiments(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfPerformedHorribleExperiments, error) {
	var (
		obj  = &HistoricalEventHfPerformedHorribleExperiments{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "group_hfid":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_hfid":
				obj.GroupHfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPerformedHorribleExperimentsPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfPerformedHorribleExperiments) (*HistoricalEventHfPerformedHorribleExperiments, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfPerformedHorribleExperiments{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPrayedInsideStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfPrayedInsideStructure, error) {
	var (
		obj  = &HistoricalEventHfPrayedInsideStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hist_fig_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hist_fig_id":
				obj.HistFigId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPrayedInsideStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfPrayedInsideStructure) (*HistoricalEventHfPrayedInsideStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfPrayedInsideStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "histfig":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "histfig":
				obj.HistFigId = n(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPreach(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfPreach, error) {
	var (
		obj  = &HistoricalEventHfPreach{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_1":
				data = nil
			case "entity_2":
				data = nil
			case "site_hfid":
				data = nil
			case "speaker_hfid":
				data = nil
			case "topic":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_1":
				obj.Entity1 = n(data)
			case "entity_2":
				obj.Entity2 = n(data)
			case "site_hfid":
				obj.SiteHfid = n(data)
			case "speaker_hfid":
				obj.SpeakerHfid = n(data)
			case "topic":
				obj.Topic = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfPreachPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfPreach) (*HistoricalEventHfPreach, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfPreach{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfProfanedStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfProfanedStructure, error) {
	var (
		obj  = &HistoricalEventHfProfanedStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hist_fig_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hist_fig_id":
				obj.HistFigId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfProfanedStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfProfanedStructure) (*HistoricalEventHfProfanedStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfProfanedStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "histfig":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "histfig":
				obj.HistFigId = n(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRecruitedUnitTypeForEntity(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfRecruitedUnitTypeForEntity, error) {
	var (
		obj  = &HistoricalEventHfRecruitedUnitTypeForEntity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "unit_type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "unit_type":
				obj.UnitType = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRecruitedUnitTypeForEntityPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfRecruitedUnitTypeForEntity) (*HistoricalEventHfRecruitedUnitTypeForEntity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfRecruitedUnitTypeForEntity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRelationshipDenied(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfRelationshipDenied, error) {
	var (
		obj  = &HistoricalEventHfRelationshipDenied{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "reason":
				data = nil
			case "reason_id":
				data = nil
			case "relationship":
				data = nil
			case "seeker_hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "target_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "reason_id":
				obj.ReasonId = n(data)
			case "relationship":
				obj.Relationship = string(data)
			case "seeker_hfid":
				obj.SeekerHfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "target_hfid":
				obj.TargetHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRelationshipDeniedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfRelationshipDenied) (*HistoricalEventHfRelationshipDenied, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfRelationshipDenied{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfReunion(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfReunion, error) {
	var (
		obj  = &HistoricalEventHfReunion{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "group_1_hfid":
				data = nil
			case "group_2_hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_1_hfid":
				obj.Group1Hfid = n(data)
			case "group_2_hfid":
				obj.Group2Hfid = append(obj.Group2Hfid, n(data))
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfReunionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfReunion) (*HistoricalEventHfReunion, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfReunion{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRevived(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfRevived, error) {
	var (
		obj  = &HistoricalEventHfRevived{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "actor_hfid":
				data = nil
			case "disturbance":
				data = nil
			case "feature_layer_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "actor_hfid":
				obj.ActorHfid = n(data)
			case "disturbance":
				obj.Disturbance = true
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfRevivedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfRevived) (*HistoricalEventHfRevived, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfRevived{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfSimpleBattleEvent(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfSimpleBattleEvent, error) {
	var (
		obj  = &HistoricalEventHfSimpleBattleEvent{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "group_1_hfid":
				data = nil
			case "group_2_hfid":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "subtype":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_1_hfid":
				obj.Group1Hfid = n(data)
			case "group_2_hfid":
				obj.Group2Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "subtype":
				obj.Subtype = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfSimpleBattleEventPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfSimpleBattleEvent) (*HistoricalEventHfSimpleBattleEvent, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfSimpleBattleEvent{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfTravel(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfTravel, error) {
	var (
		obj  = &HistoricalEventHfTravel{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "feature_layer_id":
				data = nil
			case "group_hfid":
				data = nil
			case "return":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "group_hfid":
				obj.GroupHfid = append(obj.GroupHfid, n(data))
			case "return":
				obj.Return = true
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfTravelPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfTravel) (*HistoricalEventHfTravel, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfTravel{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfViewedArtifact(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfViewedArtifact, error) {
	var (
		obj  = &HistoricalEventHfViewedArtifact{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artifact_id":
				data = nil
			case "hist_fig_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "hist_fig_id":
				obj.HistFigId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfViewedArtifactPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfViewedArtifact) (*HistoricalEventHfViewedArtifact, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfViewedArtifact{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfWounded(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfWounded, error) {
	var (
		obj  = &HistoricalEventHfWounded{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "woundee_hfid":
				data = nil
			case "wounder_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "woundee_hfid":
				obj.WoundeeHfid = n(data)
			case "wounder_hfid":
				obj.WounderHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfWoundedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfWounded) (*HistoricalEventHfWounded, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfWounded{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "body_part":
				data = nil
			case "injury_type":
				data = nil
			case "part_lost":
				data = nil
			case "site":
				data = nil
			case "woundee":
				data = nil
			case "woundee_caste":
				data = nil
			case "woundee_race":
				data = nil
			case "wounder":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "body_part":
				obj.BodyPart = n(data)
			case "injury_type":
				obj.InjuryType = string(data)
			case "part_lost":
				obj.PartLost = string(data)
			case "site":
				obj.SiteId = n(data)
			case "woundee":
				obj.WoundeeHfid = n(data)
			case "woundee_caste":
				obj.WoundeeCaste = n(data)
			case "woundee_race":
				obj.WoundeeRace = n(data)
			case "wounder":
				obj.WounderHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfsFormedIntrigueRelationship(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfsFormedIntrigueRelationship, error) {
	var (
		obj  = &HistoricalEventHfsFormedIntrigueRelationship{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "action":
				data = nil
			case "ally_defense_bonus":
				data = nil
			case "circumstance":
				data = nil
			case "circumstance_id":
				data = nil
			case "coconspirator_bonus":
				data = nil
			case "corruptor_hfid":
				data = nil
			case "corruptor_identity":
				data = nil
			case "corruptor_seen_as":
				data = nil
			case "failed_judgment_test":
				data = nil
			case "feature_layer_id":
				data = nil
			case "lure_hfid":
				data = nil
			case "method":
				data = nil
			case "relevant_entity_id":
				data = nil
			case "relevant_id_for_method":
				data = nil
			case "relevant_position_profile_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "successful":
				data = nil
			case "target_hfid":
				data = nil
			case "target_identity":
				data = nil
			case "target_seen_as":
				data = nil
			case "top_facet":
				data = nil
			case "top_facet_modifier":
				data = nil
			case "top_facet_rating":
				data = nil
			case "top_relationship_factor":
				data = nil
			case "top_relationship_modifier":
				data = nil
			case "top_relationship_rating":
				data = nil
			case "top_value":
				data = nil
			case "top_value_modifier":
				data = nil
			case "top_value_rating":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "action":
				obj.Action = string(data)
			case "ally_defense_bonus":
				obj.AllyDefenseBonus = n(data)
			case "circumstance":
				obj.Circumstance = string(data)
			case "circumstance_id":
				obj.CircumstanceId = n(data)
			case "coconspirator_bonus":
				obj.CoconspiratorBonus = n(data)
			case "corruptor_hfid":
				obj.CorruptorHfid = n(data)
			case "corruptor_identity":
				obj.CorruptorIdentity = n(data)
			case "corruptor_seen_as":
				obj.CorruptorSeenAs = string(data)
			case "failed_judgment_test":
				obj.FailedJudgmentTest = true
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "lure_hfid":
				obj.LureHfid = n(data)
			case "method":
				obj.Method = string(data)
			case "relevant_entity_id":
				obj.RelevantEntityId = n(data)
			case "relevant_id_for_method":
				obj.RelevantIdForMethod = n(data)
			case "relevant_position_profile_id":
				obj.RelevantPositionProfileId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "successful":
				obj.Successful = true
			case "target_hfid":
				obj.TargetHfid = n(data)
			case "target_identity":
				obj.TargetIdentity = n(data)
			case "target_seen_as":
				obj.TargetSeenAs = string(data)
			case "top_facet":
				obj.TopFacet = string(data)
			case "top_facet_modifier":
				obj.TopFacetModifier = n(data)
			case "top_facet_rating":
				obj.TopFacetRating = n(data)
			case "top_relationship_factor":
				obj.TopRelationshipFactor = string(data)
			case "top_relationship_modifier":
				obj.TopRelationshipModifier = n(data)
			case "top_relationship_rating":
				obj.TopRelationshipRating = n(data)
			case "top_value":
				obj.TopValue = string(data)
			case "top_value_modifier":
				obj.TopValueModifier = n(data)
			case "top_value_rating":
				obj.TopValueRating = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfsFormedIntrigueRelationshipPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfsFormedIntrigueRelationship) (*HistoricalEventHfsFormedIntrigueRelationship, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfsFormedIntrigueRelationship{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfsFormedReputationRelationship(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHfsFormedReputationRelationship, error) {
	var (
		obj  = &HistoricalEventHfsFormedReputationRelationship{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature_layer_id":
				data = nil
			case "hf_rep_1_of_2":
				data = nil
			case "hf_rep_2_of_1":
				data = nil
			case "hfid1":
				data = nil
			case "hfid2":
				data = nil
			case "identity_id1":
				data = nil
			case "identity_id2":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "hf_rep_1_of_2":
				obj.HfRep1Of2 = string(data)
			case "hf_rep_2_of_1":
				obj.HfRep2Of1 = string(data)
			case "hfid1":
				obj.Hfid1 = n(data)
			case "hfid2":
				obj.Hfid2 = n(data)
			case "identity_id1":
				obj.IdentityId1 = n(data)
			case "identity_id2":
				obj.IdentityId2 = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHfsFormedReputationRelationshipPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHfsFormedReputationRelationship) (*HistoricalEventHfsFormedReputationRelationship, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHfsFormedReputationRelationship{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHolyCityDeclaration(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventHolyCityDeclaration, error) {
	var (
		obj  = &HistoricalEventHolyCityDeclaration{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "religion_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "religion_id":
				obj.ReligionId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventHolyCityDeclarationPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventHolyCityDeclaration) (*HistoricalEventHolyCityDeclaration, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventHolyCityDeclaration{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventItemStolen(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventItemStolen, error) {
	var (
		obj  = &HistoricalEventItemStolen{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				v, _ := parseHistoricalEventItemStolenCircumstance(d, &t)
				obj.Circumstance = v
			case "circumstance_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":

			case "circumstance_id":
				obj.CircumstanceId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventItemStolenPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventItemStolen) (*HistoricalEventItemStolen, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventItemStolen{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				v, _ := parseHistoricalEventItemStolenCircumstancePlus(d, &t, &HistoricalEventItemStolenCircumstance{})
				obj.Circumstance = v
			case "entity":
				data = nil
			case "histfig":
				data = nil
			case "item":
				data = nil
			case "item_subtype":
				data = nil
			case "item_type":
				data = nil
			case "mat":
				data = nil
			case "matindex":
				data = nil
			case "mattype":
				data = nil
			case "site":
				data = nil
			case "stash_site":
				data = nil
			case "structure":
				data = nil
			case "theft_method":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":

			case "entity":
				obj.Entity = n(data)
			case "histfig":
				obj.Histfig = n(data)
			case "item":
				obj.Item = n(data)
			case "item_subtype":
				obj.ItemSubtype = string(data)
			case "item_type":
				obj.ItemType = string(data)
			case "mat":
				obj.Mat = string(data)
			case "matindex":
				obj.Matindex = n(data)
			case "mattype":
				obj.Mattype = n(data)
			case "site":
				obj.Site = n(data)
			case "stash_site":
				obj.StashSite = n(data)
			case "structure":
				obj.Structure = n(data)
			case "theft_method":
				obj.TheftMethod = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventItemStolenCircumstance(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventItemStolenCircumstance, error) {
	var (
		obj  = &HistoricalEventItemStolenCircumstance{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventItemStolenCircumstancePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventItemStolenCircumstance) (*HistoricalEventItemStolenCircumstance, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventItemStolenCircumstance{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "defeated":
				data = nil
			case "hist_event_collection":
				data = nil
			case "murdered":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "defeated":
				obj.Defeated = n(data)
			case "hist_event_collection":
				obj.HistEventCollection = n(data)
			case "murdered":
				obj.Murdered = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventKnowledgeDiscovered(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventKnowledgeDiscovered, error) {
	var (
		obj  = &HistoricalEventKnowledgeDiscovered{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "first":
				data = nil
			case "hfid":
				data = nil
			case "knowledge":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "first":
				obj.First = true
			case "hfid":
				obj.Hfid = n(data)
			case "knowledge":
				obj.Knowledge = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventKnowledgeDiscoveredPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventKnowledgeDiscovered) (*HistoricalEventKnowledgeDiscovered, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventKnowledgeDiscovered{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMasterpieceItem(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventMasterpieceItem, error) {
	var (
		obj  = &HistoricalEventMasterpieceItem{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "hfid":
				data = nil
			case "site_id":
				data = nil
			case "skill_at_time":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "skill_at_time":
				obj.SkillAtTime = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMasterpieceItemPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventMasterpieceItem) (*HistoricalEventMasterpieceItem, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventMasterpieceItem{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "item_id":
				data = nil
			case "item_type":
				data = nil
			case "maker":
				data = nil
			case "maker_entity":
				data = nil
			case "mat":
				data = nil
			case "site":
				data = nil
			case "skill_at_time":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "item_id":
				obj.ItemId = n(data)
			case "item_type":
				obj.ItemType = string(data)
			case "maker":
				obj.Maker = n(data)
			case "maker_entity":
				obj.MakerEntity = n(data)
			case "mat":
				obj.Mat = string(data)
			case "site":
				obj.Site = n(data)
			case "skill_at_time":
				obj.SkillAtTime = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMerchant(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventMerchant, error) {
	var (
		obj  = &HistoricalEventMerchant{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "depot_entity_id":
				data = nil
			case "site_id":
				data = nil
			case "trader_entity_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "depot_entity_id":
				obj.DepotEntityId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "trader_entity_id":
				obj.TraderEntityId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMerchantPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventMerchant) (*HistoricalEventMerchant, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventMerchant{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "destination":
				data = nil
			case "site":
				data = nil
			case "source":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "destination":
				obj.Destination = n(data)
			case "site":
				obj.Site = n(data)
			case "source":
				obj.Source = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventModifiedBuilding(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventModifiedBuilding, error) {
	var (
		obj  = &HistoricalEventModifiedBuilding{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "modification":
				data = nil
			case "modifier_hfid":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "modification":
				obj.Modification = string(data)
			case "modifier_hfid":
				obj.ModifierHfid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventModifiedBuildingPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventModifiedBuilding) (*HistoricalEventModifiedBuilding, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventModifiedBuilding{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMusicalFormCreated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventMusicalFormCreated, error) {
	var (
		obj  = &HistoricalEventMusicalFormCreated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				data = nil
			case "circumstance_id":
				data = nil
			case "form_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "reason":
				data = nil
			case "reason_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":
				obj.Circumstance = string(data)
			case "circumstance_id":
				obj.CircumstanceId = n(data)
			case "form_id":
				obj.FormId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "reason_id":
				obj.ReasonId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventMusicalFormCreatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventMusicalFormCreated) (*HistoricalEventMusicalFormCreated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventMusicalFormCreated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventNewSiteLeader(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventNewSiteLeader, error) {
	var (
		obj  = &HistoricalEventNewSiteLeader{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_civ_id":
				data = nil
			case "defender_civ_id":
				data = nil
			case "new_leader_hfid":
				data = nil
			case "new_site_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "new_leader_hfid":
				obj.NewLeaderHfid = n(data)
			case "new_site_civ_id":
				obj.NewSiteCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventNewSiteLeaderPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventNewSiteLeader) (*HistoricalEventNewSiteLeader, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventNewSiteLeader{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPeaceAccepted(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventPeaceAccepted, error) {
	var (
		obj  = &HistoricalEventPeaceAccepted{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPeaceAcceptedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventPeaceAccepted) (*HistoricalEventPeaceAccepted, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventPeaceAccepted{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "destination":
				data = nil
			case "site":
				data = nil
			case "source":
				data = nil
			case "topic":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "destination":
				obj.Destination = n(data)
			case "site":
				obj.SiteId = n(data)
			case "source":
				obj.Source = n(data)
			case "topic":
				obj.Topic = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPeaceRejected(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventPeaceRejected, error) {
	var (
		obj  = &HistoricalEventPeaceRejected{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPeaceRejectedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventPeaceRejected) (*HistoricalEventPeaceRejected, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventPeaceRejected{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "destination":
				data = nil
			case "site":
				data = nil
			case "source":
				data = nil
			case "topic":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "destination":
				obj.Destination = n(data)
			case "site":
				obj.SiteId = n(data)
			case "source":
				obj.Source = n(data)
			case "topic":
				obj.Topic = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPerformance(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventPerformance, error) {
	var (
		obj  = &HistoricalEventPerformance{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "occasion_id":
				data = nil
			case "schedule_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "occasion_id":
				obj.OccasionId = n(data)
			case "schedule_id":
				obj.ScheduleId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPerformancePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventPerformance) (*HistoricalEventPerformance, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventPerformance{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPlunderedSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventPlunderedSite, error) {
	var (
		obj  = &HistoricalEventPlunderedSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_civ_id":
				data = nil
			case "defender_civ_id":
				data = nil
			case "detected":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "detected":
				obj.Detected = true
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPlunderedSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventPlunderedSite) (*HistoricalEventPlunderedSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventPlunderedSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPoeticFormCreated(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventPoeticFormCreated, error) {
	var (
		obj  = &HistoricalEventPoeticFormCreated{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				data = nil
			case "form_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":
				obj.Circumstance = string(data)
			case "form_id":
				obj.FormId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventPoeticFormCreatedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventPoeticFormCreated) (*HistoricalEventPoeticFormCreated, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventPoeticFormCreated{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventProcession(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventProcession, error) {
	var (
		obj  = &HistoricalEventProcession{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "occasion_id":
				data = nil
			case "schedule_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "occasion_id":
				obj.OccasionId = n(data)
			case "schedule_id":
				obj.ScheduleId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventProcessionPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventProcession) (*HistoricalEventProcession, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventProcession{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRazedStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRazedStructure, error) {
	var (
		obj  = &HistoricalEventRazedStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRazedStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRazedStructure) (*HistoricalEventRazedStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRazedStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventReclaimSite(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventReclaimSite, error) {
	var (
		obj  = &HistoricalEventReclaimSite{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventReclaimSitePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventReclaimSite) (*HistoricalEventReclaimSite, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventReclaimSite{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRegionpopIncorporatedIntoEntity(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRegionpopIncorporatedIntoEntity, error) {
	var (
		obj  = &HistoricalEventRegionpopIncorporatedIntoEntity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "join_entity_id":
				data = nil
			case "pop_flid":
				data = nil
			case "pop_number_moved":
				data = nil
			case "pop_race":
				data = nil
			case "pop_srid":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "join_entity_id":
				obj.JoinEntityId = n(data)
			case "pop_flid":
				obj.PopFlid = n(data)
			case "pop_number_moved":
				obj.PopNumberMoved = n(data)
			case "pop_race":
				obj.PopRace = n(data)
			case "pop_srid":
				obj.PopSrid = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRegionpopIncorporatedIntoEntityPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRegionpopIncorporatedIntoEntity) (*HistoricalEventRegionpopIncorporatedIntoEntity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRegionpopIncorporatedIntoEntity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRelationship(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRelationship, error) {
	var (
		obj  = &HistoricalEventRelationship{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRelationshipPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRelationship) (*HistoricalEventRelationship, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRelationship{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "event":
				data = nil
			case "relationship":
				data = nil
			case "source_hf":
				data = nil
			case "target_hf":
				data = nil
			case "year":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "event":
				obj.Event = n(data)
			case "relationship":
				obj.Relationship = string(data)
			case "source_hf":
				obj.SourceHf = n(data)
			case "target_hf":
				obj.TargetHf = n(data)
			case "year":
				obj.Year = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRelationshipSupplement(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRelationshipSupplement, error) {
	var (
		obj  = &HistoricalEventRelationshipSupplement{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRelationshipSupplementPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRelationshipSupplement) (*HistoricalEventRelationshipSupplement, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRelationshipSupplement{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "event":
				data = nil
			case "occasion_type":
				data = nil
			case "site":
				data = nil
			case "unk_1":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "event":
				obj.Event = n(data)
			case "occasion_type":
				obj.OccasionType = n(data)
			case "site":
				obj.Site = n(data)
			case "unk_1":
				obj.Unk1 = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfEntityLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRemoveHfEntityLink, error) {
	var (
		obj  = &HistoricalEventRemoveHfEntityLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "hfid":
				data = nil
			case "link":
				data = nil
			case "position_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "link":
				obj.Link = string(data)
			case "position_id":
				obj.PositionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfEntityLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRemoveHfEntityLink) (*HistoricalEventRemoveHfEntityLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRemoveHfEntityLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "link_type":
				data = nil
			case "position":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ":
				obj.CivId = n(data)
			case "histfig":
				obj.Hfid = n(data)
			case "link_type":
				obj.Link = string(data)
			case "position":
				obj.Position = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfHfLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRemoveHfHfLink, error) {
	var (
		obj  = &HistoricalEventRemoveHfHfLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "hfid":
				data = nil
			case "hfid_target":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "hfid":
				obj.Hfid = n(data)
			case "hfid_target":
				obj.HfidTarget = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfHfLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRemoveHfHfLink) (*HistoricalEventRemoveHfHfLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRemoveHfHfLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfSiteLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventRemoveHfSiteLink, error) {
	var (
		obj  = &HistoricalEventRemoveHfSiteLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventRemoveHfSiteLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventRemoveHfSiteLink) (*HistoricalEventRemoveHfSiteLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventRemoveHfSiteLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ":
				data = nil
			case "histfig":
				data = nil
			case "link_type":
				data = nil
			case "site":
				data = nil
			case "structure":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ":
				obj.Civ = n(data)
			case "histfig":
				obj.Histfig = n(data)
			case "link_type":
				obj.LinkType = string(data)
			case "site":
				obj.SiteId = n(data)
			case "structure":
				obj.Structure = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventReplacedStructure(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventReplacedStructure, error) {
	var (
		obj  = &HistoricalEventReplacedStructure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "new_ab_id":
				data = nil
			case "old_ab_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "new_ab_id":
				obj.NewAbId = n(data)
			case "old_ab_id":
				obj.OldAbId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventReplacedStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventReplacedStructure) (*HistoricalEventReplacedStructure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventReplacedStructure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ":
				data = nil
			case "new_structure":
				data = nil
			case "old_structure":
				data = nil
			case "site":
				data = nil
			case "site_civ":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ":
				obj.Civ = n(data)
			case "new_structure":
				obj.NewStructure = n(data)
			case "old_structure":
				obj.OldStructure = n(data)
			case "site":
				obj.Site = n(data)
			case "site_civ":
				obj.SiteCiv = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSiteDispute(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventSiteDispute, error) {
	var (
		obj  = &HistoricalEventSiteDispute{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "dispute":
				data = nil
			case "entity_id_1":
				data = nil
			case "entity_id_2":
				data = nil
			case "site_id_1":
				data = nil
			case "site_id_2":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "dispute":
				obj.Dispute = string(data)
			case "entity_id_1":
				obj.EntityId1 = n(data)
			case "entity_id_2":
				obj.EntityId2 = n(data)
			case "site_id_1":
				obj.SiteId1 = n(data)
			case "site_id_2":
				obj.SiteId2 = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSiteDisputePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventSiteDispute) (*HistoricalEventSiteDispute, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventSiteDispute{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSiteTakenOver(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventSiteTakenOver, error) {
	var (
		obj  = &HistoricalEventSiteTakenOver{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "attacker_civ_id":
				data = nil
			case "defender_civ_id":
				data = nil
			case "new_site_civ_id":
				data = nil
			case "site_civ_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "attacker_civ_id":
				obj.AttackerCivId = n(data)
			case "defender_civ_id":
				obj.DefenderCivId = n(data)
			case "new_site_civ_id":
				obj.NewSiteCivId = n(data)
			case "site_civ_id":
				obj.SiteCivId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSiteTakenOverPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventSiteTakenOver) (*HistoricalEventSiteTakenOver, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventSiteTakenOver{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSquadVsSquad(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventSquadVsSquad, error) {
	var (
		obj  = &HistoricalEventSquadVsSquad{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "a_hfid":
				data = nil
			case "a_squad_id":
				data = nil
			case "d_effect":
				data = nil
			case "d_interaction":
				data = nil
			case "d_number":
				data = nil
			case "d_race":
				data = nil
			case "d_slain":
				data = nil
			case "d_squad_id":
				data = nil
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "a_hfid":
				obj.AHfid = n(data)
			case "a_squad_id":
				obj.ASquadId = n(data)
			case "d_effect":
				obj.DEffect = n(data)
			case "d_interaction":
				obj.DInteraction = n(data)
			case "d_number":
				obj.DNumber = n(data)
			case "d_race":
				obj.DRace = n(data)
			case "d_slain":
				obj.DSlain = n(data)
			case "d_squad_id":
				obj.DSquadId = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventSquadVsSquadPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventSquadVsSquad) (*HistoricalEventSquadVsSquad, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventSquadVsSquad{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventTacticalSituation(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventTacticalSituation, error) {
	var (
		obj  = &HistoricalEventTacticalSituation{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "a_tactician_hfid":
				data = nil
			case "a_tactics_roll":
				data = nil
			case "d_tactician_hfid":
				data = nil
			case "d_tactics_roll":
				data = nil
			case "feature_layer_id":
				data = nil
			case "site_id":
				data = nil
			case "situation":
				data = nil
			case "start":
				data = nil
			case "structure_id":
				data = nil
			case "subregion_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "a_tactician_hfid":
				obj.ATacticianHfid = n(data)
			case "a_tactics_roll":
				obj.ATacticsRoll = n(data)
			case "d_tactician_hfid":
				obj.DTacticianHfid = n(data)
			case "d_tactics_roll":
				obj.DTacticsRoll = n(data)
			case "feature_layer_id":
				obj.FeatureLayerId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "situation":
				obj.Situation = string(data)
			case "start":
				obj.Start = true
			case "structure_id":
				obj.StructureId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventTacticalSituationPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventTacticalSituation) (*HistoricalEventTacticalSituation, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventTacticalSituation{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventTrade(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventTrade, error) {
	var (
		obj  = &HistoricalEventTrade{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "account_shift":
				data = nil
			case "allotment":
				data = nil
			case "allotment_index":
				data = nil
			case "dest_site_id":
				data = nil
			case "production_zone_id":
				data = nil
			case "source_site_id":
				data = nil
			case "trader_entity_id":
				data = nil
			case "trader_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "account_shift":
				obj.AccountShift = n(data)
			case "allotment":
				obj.Allotment = n(data)
			case "allotment_index":
				obj.AllotmentIndex = n(data)
			case "dest_site_id":
				obj.DestSiteId = n(data)
			case "production_zone_id":
				obj.ProductionZoneId = n(data)
			case "source_site_id":
				obj.SourceSiteId = n(data)
			case "trader_entity_id":
				obj.TraderEntityId = n(data)
			case "trader_hfid":
				obj.TraderHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventTradePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventTrade) (*HistoricalEventTrade, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventTrade{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventWrittenContentComposed(d *xml.Decoder, start *xml.StartElement) (*HistoricalEventWrittenContentComposed, error) {
	var (
		obj  = &HistoricalEventWrittenContentComposed{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "circumstance":
				data = nil
			case "circumstance_id":
				data = nil
			case "hist_figure_id":
				data = nil
			case "reason":
				data = nil
			case "reason_id":
				data = nil
			case "site_id":
				data = nil
			case "subregion_id":
				data = nil
			case "wc_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "circumstance":
				obj.Circumstance = string(data)
			case "circumstance_id":
				obj.CircumstanceId = n(data)
			case "hist_figure_id":
				obj.HistFigureId = n(data)
			case "reason":
				obj.Reason = string(data)
			case "reason_id":
				obj.ReasonId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "subregion_id":
				obj.SubregionId = n(data)
			case "wc_id":
				obj.WcId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalEventWrittenContentComposedPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalEventWrittenContentComposed) (*HistoricalEventWrittenContentComposed, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalEventWrittenContentComposed{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigure(d *xml.Decoder, start *xml.StartElement) (*HistoricalFigure, error) {
	var (
		obj  = &HistoricalFigure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "active_interaction":
				data = nil
			case "animated":
				data = nil
			case "animated_string":
				data = nil
			case "appeared":
				data = nil
			case "associated_type":
				data = nil
			case "birth_seconds72":
				data = nil
			case "birth_year":
				data = nil
			case "caste":
				data = nil
			case "current_identity_id":
				data = nil
			case "death_seconds72":
				data = nil
			case "death_year":
				data = nil
			case "deity":
				data = nil
			case "ent_pop_id":
				data = nil
			case "entity_former_position_link":
				v, _ := parseEntityFormerPositionLink(d, &t)
				obj.EntityFormerPositionLink = append(obj.EntityFormerPositionLink, v)
			case "entity_link":
				v, _ := parseHistoricalFigureEntityLink(d, &t)
				obj.EntityLink = append(obj.EntityLink, v)
			case "entity_position_link":
				v, _ := parseEntityPositionLink(d, &t)
				obj.EntityPositionLink = append(obj.EntityPositionLink, v)
			case "entity_reputation":
				v, _ := parseEntityReputation(d, &t)
				obj.EntityReputation = append(obj.EntityReputation, v)
			case "entity_squad_link":
				v, _ := parseEntitySquadLink(d, &t)
				obj.EntitySquadLink = v
			case "force":
				data = nil
			case "goal":
				data = nil
			case "hf_link":
				v, _ := parseHfLink(d, &t)
				obj.HfLink = append(obj.HfLink, v)
			case "hf_skill":
				v, _ := parseHfSkill(d, &t)
				obj.HfSkill = append(obj.HfSkill, v)
			case "holds_artifact":
				data = nil
			case "honor_entity":
				v, _ := parseHonorEntity(d, &t)
				obj.HonorEntity = append(obj.HonorEntity, v)
			case "id":
				data = nil
			case "interaction_knowledge":
				data = nil
			case "intrigue_actor":
				v, _ := parseIntrigueActor(d, &t)
				obj.IntrigueActor = append(obj.IntrigueActor, v)
			case "intrigue_plot":
				v, _ := parseIntriguePlot(d, &t)
				obj.IntriguePlot = append(obj.IntriguePlot, v)
			case "journey_pet":
				data = nil
			case "name":
				data = nil
			case "race":
				data = nil
			case "relationship_profile_hf_historical":
				v, _ := parseRelationshipProfileHfHistorical(d, &t)
				obj.RelationshipProfileHfHistorical = append(obj.RelationshipProfileHfHistorical, v)
			case "relationship_profile_hf_visual":
				v, _ := parseRelationshipProfileHfVisual(d, &t)
				obj.RelationshipProfileHfVisual = append(obj.RelationshipProfileHfVisual, v)
			case "site_link":
				v, _ := parseSiteLink(d, &t)
				obj.SiteLink = append(obj.SiteLink, v)
			case "site_property":
				v, _ := parseHistoricalFigureSiteProperty(d, &t)
				obj.SiteProperty = append(obj.SiteProperty, v)
			case "sphere":
				data = nil
			case "used_identity_id":
				data = nil
			case "vague_relationship":
				v, _ := parseVagueRelationship(d, &t)
				obj.VagueRelationship = append(obj.VagueRelationship, v)
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "active_interaction":
				obj.ActiveInteraction = append(obj.ActiveInteraction, string(data))
			case "animated":
				obj.Animated = true
			case "animated_string":
				obj.AnimatedString = string(data)
			case "appeared":
				obj.Appeared = n(data)
			case "associated_type":
				obj.AssociatedType = string(data)
			case "birth_seconds72":
				obj.BirthSeconds72 = n(data)
			case "birth_year":
				obj.BirthYear = n(data)
			case "caste":
				obj.Caste = string(data)
			case "current_identity_id":
				obj.CurrentIdentityId = n(data)
			case "death_seconds72":
				obj.DeathSeconds72 = n(data)
			case "death_year":
				obj.DeathYear = n(data)
			case "deity":
				obj.Deity = true
			case "ent_pop_id":
				obj.EntPopId = n(data)
			case "entity_former_position_link":

			case "entity_link":

			case "entity_position_link":

			case "entity_reputation":

			case "entity_squad_link":

			case "force":
				obj.Force = true
			case "goal":
				obj.Goal = append(obj.Goal, string(data))
			case "hf_link":

			case "hf_skill":

			case "holds_artifact":
				obj.HoldsArtifact = append(obj.HoldsArtifact, n(data))
			case "honor_entity":

			case "id":
				obj.Id_ = n(data)
			case "interaction_knowledge":
				obj.InteractionKnowledge = append(obj.InteractionKnowledge, string(data))
			case "intrigue_actor":

			case "intrigue_plot":

			case "journey_pet":
				obj.JourneyPet = append(obj.JourneyPet, string(data))
			case "name":
				obj.Name_ = string(data)
			case "race":
				obj.Race = string(data)
			case "relationship_profile_hf_historical":

			case "relationship_profile_hf_visual":

			case "site_link":

			case "site_property":

			case "sphere":
				obj.Sphere = append(obj.Sphere, string(data))
			case "used_identity_id":
				obj.UsedIdentityId = append(obj.UsedIdentityId, n(data))
			case "vague_relationship":

			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigurePlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalFigure) (*HistoricalFigure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalFigure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "race":
				data = nil
			case "sex":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "race":
				obj.Race = string(data)
			case "sex":
				obj.Sex = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigureEntityLink(d *xml.Decoder, start *xml.StartElement) (*HistoricalFigureEntityLink, error) {
	var (
		obj  = &HistoricalFigureEntityLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "link_strength":
				data = nil
			case "link_type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "link_strength":
				obj.LinkStrength = n(data)
			case "link_type":
				obj.LinkType = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigureEntityLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalFigureEntityLink) (*HistoricalFigureEntityLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalFigureEntityLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigureSiteProperty(d *xml.Decoder, start *xml.StartElement) (*HistoricalFigureSiteProperty, error) {
	var (
		obj  = &HistoricalFigureSiteProperty{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "property_id":
				data = nil
			case "site_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "property_id":
				obj.PropertyId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHistoricalFigureSitePropertyPlus(d *xml.Decoder, start *xml.StartElement, obj *HistoricalFigureSiteProperty) (*HistoricalFigureSiteProperty, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HistoricalFigureSiteProperty{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHonor(d *xml.Decoder, start *xml.StartElement) (*Honor, error) {
	var (
		obj  = &Honor{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "exempt_epid":
				data = nil
			case "exempt_former_epid":
				data = nil
			case "gives_precedence":
				data = nil
			case "granted_to_everybody":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			case "required_battles":
				data = nil
			case "required_kills":
				data = nil
			case "required_skill":
				data = nil
			case "required_skill_ip_total":
				data = nil
			case "required_years":
				data = nil
			case "requires_any_melee_or_ranged_skill":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "exempt_epid":
				obj.ExemptEpid = n(data)
			case "exempt_former_epid":
				obj.ExemptFormerEpid = n(data)
			case "gives_precedence":
				obj.GivesPrecedence = n(data)
			case "granted_to_everybody":
				obj.GrantedToEverybody = true
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "required_battles":
				obj.RequiredBattles = n(data)
			case "required_kills":
				obj.RequiredKills = n(data)
			case "required_skill":
				obj.RequiredSkill = string(data)
			case "required_skill_ip_total":
				obj.RequiredSkillIpTotal = n(data)
			case "required_years":
				obj.RequiredYears = n(data)
			case "requires_any_melee_or_ranged_skill":
				obj.RequiresAnyMeleeOrRangedSkill = true
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHonorPlus(d *xml.Decoder, start *xml.StartElement, obj *Honor) (*Honor, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Honor{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHonorEntity(d *xml.Decoder, start *xml.StartElement) (*HonorEntity, error) {
	var (
		obj  = &HonorEntity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "battles":
				data = nil
			case "entity":
				data = nil
			case "honor_id":
				data = nil
			case "kills":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "battles":
				obj.Battles = n(data)
			case "entity":
				obj.Entity = n(data)
			case "honor_id":
				obj.HonorId = append(obj.HonorId, n(data))
			case "kills":
				obj.Kills = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseHonorEntityPlus(d *xml.Decoder, start *xml.StartElement, obj *HonorEntity) (*HonorEntity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &HonorEntity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIdentity(d *xml.Decoder, start *xml.StartElement) (*Identity, error) {
	var (
		obj  = &Identity{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIdentityPlus(d *xml.Decoder, start *xml.StartElement, obj *Identity) (*Identity, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Identity{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "birth_second":
				data = nil
			case "birth_year":
				data = nil
			case "caste":
				data = nil
			case "entity_id":
				data = nil
			case "histfig_id":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			case "nemesis_id":
				data = nil
			case "profession":
				data = nil
			case "race":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "birth_second":
				obj.BirthSecond = n(data)
			case "birth_year":
				obj.BirthYear = n(data)
			case "caste":
				obj.Caste = string(data)
			case "entity_id":
				obj.EntityId = n(data)
			case "histfig_id":
				obj.HistfigId = n(data)
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "nemesis_id":
				obj.NemesisId = n(data)
			case "profession":
				obj.Profession = string(data)
			case "race":
				obj.Race = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIntrigueActor(d *xml.Decoder, start *xml.StartElement) (*IntrigueActor, error) {
	var (
		obj  = &IntrigueActor{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "handle_actor_id":
				data = nil
			case "hfid":
				data = nil
			case "local_id":
				data = nil
			case "promised_actor_immortality":
				data = nil
			case "promised_me_immortality":
				data = nil
			case "role":
				data = nil
			case "strategy":
				data = nil
			case "strategy_enid":
				data = nil
			case "strategy_eppid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "handle_actor_id":
				obj.HandleActorId = n(data)
			case "hfid":
				obj.Hfid = n(data)
			case "local_id":
				obj.LocalId = n(data)
			case "promised_actor_immortality":
				obj.PromisedActorImmortality = true
			case "promised_me_immortality":
				obj.PromisedMeImmortality = true
			case "role":
				obj.Role = string(data)
			case "strategy":
				obj.Strategy = string(data)
			case "strategy_enid":
				obj.StrategyEnid = n(data)
			case "strategy_eppid":
				obj.StrategyEppid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIntrigueActorPlus(d *xml.Decoder, start *xml.StartElement, obj *IntrigueActor) (*IntrigueActor, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &IntrigueActor{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIntriguePlot(d *xml.Decoder, start *xml.StartElement) (*IntriguePlot, error) {
	var (
		obj  = &IntriguePlot{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "actor_id":
				data = nil
			case "artifact_id":
				data = nil
			case "delegated_plot_hfid":
				data = nil
			case "delegated_plot_id":
				data = nil
			case "entity_id":
				data = nil
			case "local_id":
				data = nil
			case "on_hold":
				data = nil
			case "parent_plot_hfid":
				data = nil
			case "parent_plot_id":
				data = nil
			case "plot_actor":
				v, _ := parsePlotActor(d, &t)
				obj.PlotActor = append(obj.PlotActor, v)
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "actor_id":
				obj.ActorId = n(data)
			case "artifact_id":
				obj.ArtifactId = n(data)
			case "delegated_plot_hfid":
				obj.DelegatedPlotHfid = n(data)
			case "delegated_plot_id":
				obj.DelegatedPlotId = n(data)
			case "entity_id":
				obj.EntityId = n(data)
			case "local_id":
				obj.LocalId = n(data)
			case "on_hold":
				obj.OnHold = true
			case "parent_plot_hfid":
				obj.ParentPlotHfid = n(data)
			case "parent_plot_id":
				obj.ParentPlotId = n(data)
			case "plot_actor":

			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseIntriguePlotPlus(d *xml.Decoder, start *xml.StartElement, obj *IntriguePlot) (*IntriguePlot, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &IntriguePlot{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseItem(d *xml.Decoder, start *xml.StartElement) (*Item, error) {
	var (
		obj  = &Item{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "name_string":
				data = nil
			case "page_number":
				data = nil
			case "page_written_content_id":
				data = nil
			case "writing_written_content_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "name_string":
				obj.NameString = string(data)
			case "page_number":
				obj.PageNumber = n(data)
			case "page_written_content_id":
				obj.PageWrittenContentId = n(data)
			case "writing_written_content_id":
				obj.WritingWrittenContentId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseItemPlus(d *xml.Decoder, start *xml.StartElement, obj *Item) (*Item, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Item{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseLandmass(d *xml.Decoder, start *xml.StartElement) (*Landmass, error) {
	var (
		obj  = &Landmass{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseLandmassPlus(d *xml.Decoder, start *xml.StartElement, obj *Landmass) (*Landmass, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Landmass{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coord_1":
				data = nil
			case "coord_2":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coord_1":
				obj.Coord1 = string(data)
			case "coord_2":
				obj.Coord2 = string(data)
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseMountainPeak(d *xml.Decoder, start *xml.StartElement) (*MountainPeak, error) {
	var (
		obj  = &MountainPeak{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseMountainPeakPlus(d *xml.Decoder, start *xml.StartElement, obj *MountainPeak) (*MountainPeak, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &MountainPeak{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "height":
				data = nil
			case "id":
				data = nil
			case "is_volcano":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "height":
				obj.Height = n(data)
			case "id":
				obj.Id_ = n(data)
			case "is_volcano":
				obj.IsVolcano = true
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseMusicalForm(d *xml.Decoder, start *xml.StartElement) (*MusicalForm, error) {
	var (
		obj  = &MusicalForm{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "description":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "description":
				obj.Description = string(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseMusicalFormPlus(d *xml.Decoder, start *xml.StartElement, obj *MusicalForm) (*MusicalForm, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &MusicalForm{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseOccasion(d *xml.Decoder, start *xml.StartElement) (*Occasion, error) {
	var (
		obj  = &Occasion{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseOccasionPlus(d *xml.Decoder, start *xml.StartElement, obj *Occasion) (*Occasion, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Occasion{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "event":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			case "schedule":
				v, _ := parseSchedulePlus(d, &t, &Schedule{})
				obj.Schedule = append(obj.Schedule, v)
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "event":
				obj.Event = n(data)
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "schedule":

			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parsePlotActor(d *xml.Decoder, start *xml.StartElement) (*PlotActor, error) {
	var (
		obj  = &PlotActor{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "actor_id":
				data = nil
			case "agreement_has_messenger":
				data = nil
			case "agreement_id":
				data = nil
			case "plot_role":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "actor_id":
				obj.ActorId = n(data)
			case "agreement_has_messenger":
				obj.AgreementHasMessenger = true
			case "agreement_id":
				obj.AgreementId = n(data)
			case "plot_role":
				obj.PlotRole = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parsePlotActorPlus(d *xml.Decoder, start *xml.StartElement, obj *PlotActor) (*PlotActor, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &PlotActor{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parsePoeticForm(d *xml.Decoder, start *xml.StartElement) (*PoeticForm, error) {
	var (
		obj  = &PoeticForm{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "description":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "description":
				obj.Description = string(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parsePoeticFormPlus(d *xml.Decoder, start *xml.StartElement, obj *PoeticForm) (*PoeticForm, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &PoeticForm{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "name":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseReference(d *xml.Decoder, start *xml.StartElement) (*Reference, error) {
	var (
		obj  = &Reference{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseReferencePlus(d *xml.Decoder, start *xml.StartElement, obj *Reference) (*Reference, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Reference{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRegion(d *xml.Decoder, start *xml.StartElement) (*Region, error) {
	var (
		obj  = &Region{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "name":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRegionPlus(d *xml.Decoder, start *xml.StartElement, obj *Region) (*Region, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Region{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "evilness":
				data = nil
			case "force_id":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "evilness":
				obj.Evilness = string(data)
			case "force_id":
				obj.ForceId = n(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRelationshipProfileHfHistorical(d *xml.Decoder, start *xml.StartElement) (*RelationshipProfileHfHistorical, error) {
	var (
		obj  = &RelationshipProfileHfHistorical{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "fear":
				data = nil
			case "hf_id":
				data = nil
			case "love":
				data = nil
			case "loyalty":
				data = nil
			case "respect":
				data = nil
			case "trust":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "fear":
				obj.Fear = n(data)
			case "hf_id":
				obj.HfId = n(data)
			case "love":
				obj.Love = n(data)
			case "loyalty":
				obj.Loyalty = n(data)
			case "respect":
				obj.Respect = n(data)
			case "trust":
				obj.Trust = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRelationshipProfileHfHistoricalPlus(d *xml.Decoder, start *xml.StartElement, obj *RelationshipProfileHfHistorical) (*RelationshipProfileHfHistorical, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &RelationshipProfileHfHistorical{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRelationshipProfileHfVisual(d *xml.Decoder, start *xml.StartElement) (*RelationshipProfileHfVisual, error) {
	var (
		obj  = &RelationshipProfileHfVisual{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "fear":
				data = nil
			case "hf_id":
				data = nil
			case "known_identity_id":
				data = nil
			case "last_meet_seconds72":
				data = nil
			case "last_meet_year":
				data = nil
			case "love":
				data = nil
			case "loyalty":
				data = nil
			case "meet_count":
				data = nil
			case "rep_friendly":
				data = nil
			case "rep_information_source":
				data = nil
			case "respect":
				data = nil
			case "trust":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "fear":
				obj.Fear = n(data)
			case "hf_id":
				obj.HfId = n(data)
			case "known_identity_id":
				obj.KnownIdentityId = n(data)
			case "last_meet_seconds72":
				obj.LastMeetSeconds72 = n(data)
			case "last_meet_year":
				obj.LastMeetYear = n(data)
			case "love":
				obj.Love = n(data)
			case "loyalty":
				obj.Loyalty = n(data)
			case "meet_count":
				obj.MeetCount = n(data)
			case "rep_friendly":
				obj.RepFriendly = n(data)
			case "rep_information_source":
				obj.RepInformationSource = n(data)
			case "respect":
				obj.Respect = n(data)
			case "trust":
				obj.Trust = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRelationshipProfileHfVisualPlus(d *xml.Decoder, start *xml.StartElement, obj *RelationshipProfileHfVisual) (*RelationshipProfileHfVisual, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &RelationshipProfileHfVisual{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRiver(d *xml.Decoder, start *xml.StartElement) (*River, error) {
	var (
		obj  = &River{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseRiverPlus(d *xml.Decoder, start *xml.StartElement, obj *River) (*River, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &River{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "end_pos":
				data = nil
			case "name":
				data = nil
			case "path":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "end_pos":
				obj.EndPos = string(data)
			case "name":
				obj.Name_ = string(data)
			case "path":
				obj.Path = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSchedule(d *xml.Decoder, start *xml.StartElement) (*Schedule, error) {
	var (
		obj  = &Schedule{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSchedulePlus(d *xml.Decoder, start *xml.StartElement, obj *Schedule) (*Schedule, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Schedule{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "feature":
				v, _ := parseFeaturePlus(d, &t, &Feature{})
				obj.Feature = append(obj.Feature, v)
			case "id":
				data = nil
			case "item_subtype":
				data = nil
			case "item_type":
				data = nil
			case "reference":
				data = nil
			case "reference2":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "feature":

			case "id":
				obj.Id_ = n(data)
			case "item_subtype":
				obj.ItemSubtype = string(data)
			case "item_type":
				obj.ItemType = string(data)
			case "reference":
				obj.Reference = n(data)
			case "reference2":
				obj.Reference2 = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSite(d *xml.Decoder, start *xml.StartElement) (*Site, error) {
	var (
		obj  = &Site{}
		data []byte
	)

	obj.SiteProperties = make(map[int]*SiteSiteProperty)
	obj.Structures = make(map[int]*Structure)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			case "rectangle":
				data = nil
			case "site_properties":
				parseMap(d, &obj.SiteProperties, parseSiteSiteProperty)
			case "structures":
				parseMap(d, &obj.Structures, parseStructure)
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "rectangle":
				obj.Rectangle = string(data)
			case "site_properties":

			case "structures":

			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSitePlus(d *xml.Decoder, start *xml.StartElement, obj *Site) (*Site, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Site{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "civ_id":
				data = nil
			case "cur_owner_id":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "civ_id":
				obj.CivId = n(data)
			case "cur_owner_id":
				obj.CurOwnerId = n(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSiteLink(d *xml.Decoder, start *xml.StartElement) (*SiteLink, error) {
	var (
		obj  = &SiteLink{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "entity_id":
				data = nil
			case "link_type":
				data = nil
			case "occupation_id":
				data = nil
			case "site_id":
				data = nil
			case "sub_id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "entity_id":
				obj.EntityId = n(data)
			case "link_type":
				obj.LinkType = string(data)
			case "occupation_id":
				obj.OccupationId = n(data)
			case "site_id":
				obj.SiteId = n(data)
			case "sub_id":
				obj.SubId = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSiteLinkPlus(d *xml.Decoder, start *xml.StartElement, obj *SiteLink) (*SiteLink, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &SiteLink{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSiteSiteProperty(d *xml.Decoder, start *xml.StartElement) (*SiteSiteProperty, error) {
	var (
		obj  = &SiteSiteProperty{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "id":
				data = nil
			case "owner_hfid":
				data = nil
			case "structure_id":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "id":
				obj.Id_ = n(data)
			case "owner_hfid":
				obj.OwnerHfid = n(data)
			case "structure_id":
				obj.StructureId = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseSiteSitePropertyPlus(d *xml.Decoder, start *xml.StartElement, obj *SiteSiteProperty) (*SiteSiteProperty, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &SiteSiteProperty{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseStructure(d *xml.Decoder, start *xml.StartElement) (*Structure, error) {
	var (
		obj  = &Structure{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "copied_artifact_id":
				data = nil
			case "entity_id":
				data = nil
			case "local_id":
				data = nil
			case "name":
				data = nil
			case "subtype":
				data = nil
			case "type":
				data = nil
			case "worship_hfid":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "copied_artifact_id":
				obj.CopiedArtifactId = append(obj.CopiedArtifactId, n(data))
			case "entity_id":
				obj.EntityId = n(data)
			case "local_id":
				obj.LocalId = n(data)
			case "name":
				obj.Name_ = string(data)
			case "subtype":
				obj.Subtype = string(data)
			case "type":
				obj.Type = string(data)
			case "worship_hfid":
				obj.WorshipHfid = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseStructurePlus(d *xml.Decoder, start *xml.StartElement, obj *Structure) (*Structure, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &Structure{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "deity":
				data = nil
			case "deity_type":
				data = nil
			case "dungeon_type":
				data = nil
			case "id":
				data = nil
			case "inhabitant":
				data = nil
			case "name2":
				data = nil
			case "religion":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "deity":
				obj.Deity = n(data)
			case "deity_type":
				obj.DeityType = n(data)
			case "dungeon_type":
				obj.DungeonType = n(data)
			case "id":
				obj.Id_ = n(data)
			case "inhabitant":
				obj.Inhabitant = append(obj.Inhabitant, n(data))
			case "name2":
				obj.Subtype = string(data)
			case "religion":
				obj.Religion = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseUndergroundRegion(d *xml.Decoder, start *xml.StartElement) (*UndergroundRegion, error) {
	var (
		obj  = &UndergroundRegion{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "depth":
				data = nil
			case "id":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "depth":
				obj.Depth = n(data)
			case "id":
				obj.Id_ = n(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseUndergroundRegionPlus(d *xml.Decoder, start *xml.StartElement, obj *UndergroundRegion) (*UndergroundRegion, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &UndergroundRegion{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "id":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "id":
				obj.Id_ = n(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseVagueRelationship(d *xml.Decoder, start *xml.StartElement) (*VagueRelationship, error) {
	var (
		obj  = &VagueRelationship{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "artistic_buddy":
				data = nil
			case "atheletic_rival":
				data = nil
			case "athlete_buddy":
				data = nil
			case "business_rival":
				data = nil
			case "childhood_friend":
				data = nil
			case "grudge":
				data = nil
			case "hfid":
				data = nil
			case "jealous_obsession":
				data = nil
			case "jealous_relationship_grudge":
				data = nil
			case "persecution_grudge":
				data = nil
			case "religious_persecution_grudge":
				data = nil
			case "scholar_buddy":
				data = nil
			case "supernatural_grudge":
				data = nil
			case "war_buddy":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "artistic_buddy":
				obj.ArtisticBuddy = true
			case "atheletic_rival":
				obj.AtheleticRival = true
			case "athlete_buddy":
				obj.AthleteBuddy = true
			case "business_rival":
				obj.BusinessRival = true
			case "childhood_friend":
				obj.ChildhoodFriend = true
			case "grudge":
				obj.Grudge = true
			case "hfid":
				obj.Hfid = n(data)
			case "jealous_obsession":
				obj.JealousObsession = true
			case "jealous_relationship_grudge":
				obj.JealousRelationshipGrudge = true
			case "persecution_grudge":
				obj.PersecutionGrudge = true
			case "religious_persecution_grudge":
				obj.ReligiousPersecutionGrudge = true
			case "scholar_buddy":
				obj.ScholarBuddy = true
			case "supernatural_grudge":
				obj.SupernaturalGrudge = true
			case "war_buddy":
				obj.WarBuddy = true
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseVagueRelationshipPlus(d *xml.Decoder, start *xml.StartElement, obj *VagueRelationship) (*VagueRelationship, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &VagueRelationship{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseWorldConstruction(d *xml.Decoder, start *xml.StartElement) (*WorldConstruction, error) {
	var (
		obj  = &WorldConstruction{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseWorldConstructionPlus(d *xml.Decoder, start *xml.StartElement, obj *WorldConstruction) (*WorldConstruction, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &WorldConstruction{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "coords":
				data = nil
			case "id":
				data = nil
			case "name":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "coords":
				obj.Coords = string(data)
			case "id":
				obj.Id_ = n(data)
			case "name":
				obj.Name_ = string(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseWrittenContent(d *xml.Decoder, start *xml.StartElement) (*WrittenContent, error) {
	var (
		obj  = &WrittenContent{}
		data []byte
	)

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "author_hfid":
				data = nil
			case "author_roll":
				data = nil
			case "form":
				data = nil
			case "form_id":
				data = nil
			case "id":
				data = nil
			case "style":
				data = nil
			case "title":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "author_hfid":
				obj.AuthorHfid = n(data)
			case "author_roll":
				obj.AuthorRoll = n(data)
			case "form":
				obj.Form = string(data)
			case "form_id":
				obj.FormId = n(data)
			case "id":
				obj.Id_ = n(data)
			case "style":
				obj.Style = append(obj.Style, string(data))
			case "title":
				obj.Title = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
func parseWrittenContentPlus(d *xml.Decoder, start *xml.StartElement, obj *WrittenContent) (*WrittenContent, error) {
	var (
		data []byte
	)
	if obj == nil {
		obj = &WrittenContent{}
	}

	for {
		tok, err := d.Token()
		if err != nil {
			return nil, err
		}
		switch t := tok.(type) {
		case xml.StartElement:
			switch t.Name.Local {
			case "author":
				data = nil
			case "id":
				data = nil
			case "page_end":
				data = nil
			case "page_start":
				data = nil
			case "reference":
				v, _ := parseReferencePlus(d, &t, &Reference{})
				obj.Reference = append(obj.Reference, v)
			case "title":
				data = nil
			case "type":
				data = nil
			default:
				// fmt.Println("unknown field", t.Name.Local)
				d.Skip()
			}

		case xml.CharData:
			data = append(data, t...)

		case xml.EndElement:
			if t.Name.Local == start.Name.Local {
				obj.CheckFields()
				return obj, nil
			}

			switch t.Name.Local {
			case "author":
				obj.AuthorHfid = n(data)
			case "id":
				obj.Id_ = n(data)
			case "page_end":
				obj.PageEnd = n(data)
			case "page_start":
				obj.PageStart = n(data)
			case "reference":

			case "title":
				obj.Title = string(data)
			case "type":
				obj.Type = string(data)
			default:
				// fmt.Println("unknown field", t.Name.Local)
			}
		}
	}
}
